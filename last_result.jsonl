{"instruction": "Use Fortran to create a function that calculates the product of a and s modulo m.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[10,20,30]", "case3": "[100,200,300]", "case4": "[1000,2000,3000]", "case5": "[10000,20000,30000]", "result": ["2", "20", "200", "2000", "20000"]}, "code": "function multmod ( a, s, m )\n\n!*****************************************************************************80\n!\n!! MULTMOD carries out modular multiplication.\n!\n!  Discussion:\n!\n!    This procedure returns \n!\n!      ( A * S ) mod M\n!\n!  Licensing:\n!\n!    This code is distributed under the GNU LGPL license.\n!\n!  Modified:\n!\n!    26 March 2013\n!\n!  Author:\n!\n!    Original Pascal version by Pierre L'Ecuyer, Serge Cote.\n!    FORTRAN90 version by John Burkardt.\n!\n!  Reference:\n!\n!    Pierre LEcuyer, Serge Cote,\n!    Implementing a Random Number Package with Splitting Facilities,\n!    ACM Transactions on Mathematical Software,\n!    Volume 17, Number 1, March 1991, pages 98-111.\n!\n!  Parameters:\n!\n!    Input, integer ( kind = 4 ) A, S, M, the arguments.\n!\n!    Output, integer ( kind = 4 ) MULTMOD, the value of the product of A and S, \n!    modulo M.\n!\n  implicit none\n\n  integer ( kind = 4 ) a\n  integer ( kind = 4 ) a0\n  integer ( kind = 4 ) a1\n  integer ( kind = 4 ), parameter :: h = 32768\n  integer ( kind = 4 ) k\n  integer ( kind = 4 ) m\n  integer ( kind = 4 ) multmod\n  integer ( kind = 4 ) p\n  integer ( kind = 4 ) q\n  integer ( kind = 4 ) qh\n  integer ( kind = 4 ) rh\n  integer ( kind = 4 ) s\n\n  if ( a <= 0 ) then\n    write ( *, '(a)' ) ' '\n    write ( *, '(a)' ) 'MULTMOD - Fatal error!'\n    write ( *, '(a)' ) '  A <= 0.'\n    stop 1\n  end if\n\n  if ( m <= a ) then\n    write ( *, '(a)' ) ' '\n    write ( *, '(a)' ) 'MULTMOD - Fatal error!'\n    write ( *, '(a)' ) '  M <= A.'\n    stop 1\n  end if\n\n  if ( s <= 0 ) then\n    write ( *, '(a)' ) ' '\n    write ( *, '(a)' ) 'MULTMOD - Fatal error!'\n    write ( *, '(a)' ) '  S <= 0.'\n    stop 1\n  end if\n\n  if ( m <= s ) then\n    write ( *, '(a)' ) ' '\n    write ( *, '(a)' ) 'MULTMOD - Fatal error!'\n    write ( *, '(a)' ) '  M <= S.'\n    stop 1\n  end if\n\n  if ( a < h ) then\n\n    a0 = a\n    p = 0\n\n  else\n\n    a1 = a / h\n    a0 = a - h * a1\n    qh = m / h\n    rh = m - h * qh\n\n    if ( h <= a1 ) then\n   \n      a1 = a1 - h\n      k = s / qh\n      p = h * ( s - k * qh ) - k * rh\n\n      do while ( p < 0 )\n        p = p + m\n      end do\n\n    else\n\n      p = 0\n\n    end if\n\n    if ( a1 /= 0 ) then\n\n      q = m / a1\n      k = s / q\n      p = p - k * ( m - a1 * q )\n\n      if ( 0 < p ) then\n        p = p - m\n      end if\n\n      p = p + a1 * ( s - k * q )\n\n      do while ( p < 0 )\n        p = p + m\n      end do\n\n    end if\n\n    k = p / qh\n    p = h * ( p - k * qh ) - k * rh\n\n    do while ( p < 0 )\n      p = p + m\n    end do\n\n  end if\n\n  if ( a0 /= 0 ) then\n\n    q = m / a0\n    k = s / q\n    p = p - k * ( m - a0 * q )\n\n    if ( 0 < p ) then\n      p = p - m\n    end if\n\n    p = p + a0 * ( s - k * q )\n\n    do while ( p < 0 )\n      p = p + m\n    end do\n\n  end if\n\n  multmod = p\n\n  return\nend function"}
{"instruction": "Use Fortran to create a function that returns an integer, either the input integer or a default integer if the input is not present.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function get_default_ii(i, default) result(ret)\n        integer, intent(in), optional :: i\n        integer, intent(in) :: default\n        integer :: ret\n\n        if (present(i)) then\n            ret = i\n        else\n            ret = default\n        end if\n    end function"}
{"instruction": "Use Fortran to create a function that takes in an optional character and returns it if present, otherwise returns a default character.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'a','b'", "case2": "'c','d'", "case3": "'','e'", "case4": "'f',''", "case5": "'g','h'", "result": ["a", "c", "P", "f", "g"]}, "code": "function get_default_cc(c, default) result(ret)\n        character, intent(in), optional :: c\n        character, intent(in) :: default\n        character :: ret\n\n        if (present(c)) then\n            ret = c\n        else\n            ret = default\n        end if\n    end function"}
{"instruction": "Use Fortran to create a function that counts the number of times a substring appears in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello world', 'l']", "case2": "['hello world', 'o']", "case3": "['hello world', '']", "case4": "['hello world', 'ld']", "case5": "['hello world', 'z']", "result": ["3", "2", "0", "1", "0"]}, "code": "function substrcount(str, substr)\n  character(len=*), intent(in) :: str\n  character(len=*), intent(in) :: substr\n  integer :: substrcount\n  integer :: pos\n  integer :: step\n  substrcount = 0\n  if (len(substr) == 0) then\n    return\n  else \n    pos = 1\n    do while(.true.)\n      step = index(str(pos:), substr)     \n      if (step == 0) exit\n      substrcount = substrcount + 1 \n      pos = pos + step - 1 + len(substr)\n    end do\n  end if\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given point (a,b) is inside or outside of a Sierpinski carpet.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[0,0]", "case2": "[1,1]", "case3": "[3,3]", "case4": "[9,9]", "case5": "[10,10]", "result": ["T", "F", "F", "F", "F"]}, "code": "function In_carpet(a, b)\n  logical :: in_carpet\n  integer, intent(in) :: a, b\n  integer :: x, y\n\n  x = a ; y = b\n  do\n    if(x == 0 .or. y == 0) then\n      In_carpet = .true.\n      return\n    else if(mod(x, 3) == 1 .and. mod(y, 3) == 1) then\n      In_carpet = .false.\n      return\n    end if\n    x = x / 3\n    y = y / 3\n  end do\nend function"}
{"instruction": "Use Fortran to create a function that returns the index of the first true value in a logical array.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.false.]", "case2": "[.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.]", "case4": "[.false.,.true.,.false.,.true.]", "case5": "[.true.,.false.,.true.,.false.]", "result": ["1", "0", "1", "2", "1"]}, "code": "function findfirst(log_arr) result(ind)\n! Replacement for intrinsic function in f2008, but not the same inputs!\nimplicit none\n    logical :: log_arr(:)\n    integer :: ind\n    integer :: k1\n    \n    ind = 0\n    do k1=1,size(log_arr)\n        if (log_arr(k1)) then\n            ind = k1\n            return\n        endif\n    enddo\n    \nend function"}
{"instruction": "Use Fortran to give me a function for calculating the equilibrium constant of a reaction at a given temperature.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[298.15, 1.0, 2.0, 300.0]", "case2": "[100.0, 0.5, 1.5, 350.0]", "case3": "[500.0, 2.0, 3.0, 400.0]", "case4": "[1000.0, 1.0, 1.0, 500.0]", "case5": "[1.0, 0.0, 0.0, 273.15]", "result": ["296.305756", "91.1775208", "267.101715", "596.299988", "1.00000000"]}, "code": "function fn_keq(keq_298, a, b, t)\n      real(kind=8) keq_298, a, b, t\n      real(kind=8) tt\n        tt = 298.15/t\n        fn_keq = keq_298*exp(a*(tt-1.)+b*(1.+log(tt)-tt))\n      return\n      end function"}
{"instruction": "Use Fortran to give me a function for calculating the mean molecular speed given temperature and molecular weight.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[300.0,28.0]", "case2": "[500.0,32.0]", "case3": "[273.15,18.0]", "case4": "[1000.0,44.0]", "case5": "[200.0,16.0]", "result": ["47626", "57513", "56679", "69364", "51442"]}, "code": "function mean_molecular_speed(t, mw)\n      real(kind=8) t, mw\n        mean_molecular_speed = 1.455e4 * sqrt(t/mw)\n      return\n      end function"}
{"instruction": "Use Fortran to give me a function for calculating the Fuchs-Sutugin approximation for a given set of input parameters.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.7]", "result": ["0.737825871", "0.614698112", "1.00000000", "0.139903620", "0.790852726"]}, "code": "function fuchs_sutugin(rkn,a)\n      real(kind=8) rkn, a\n      real(kind=8) rnum, denom\n      rnum = 0.75*a*(1. + rkn)\n      denom = rkn**2 + rkn + 0.283*rkn*a + 0.75*a\n      fuchs_sutugin = rnum/denom\n      return\n      end function"}
{"instruction": "Use Fortran to create a function that takes in three integers and returns a 3D array of type real, where each element is the product of the first integer divided by the second integer and multiplied by the third integer.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["1.5000000000000000        1.5000000000000000        1.5000000000000000        1.5000000000000000        1.5000000000000000        1.5000000000000000", "4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007        4.8000000000000007", "7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000        7.8750000000000000", "10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908        10.909090909090908", "13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429        13.928571428571429"]}, "code": "function arraytst(a,b,c)\n\n  implicit none\n  \n  real(kind=8), dimension(:,:,:), allocatable :: arraytst\n  integer, intent(in) :: a,b,c\n  \n  allocate(arraytst(a,b,c))\n  \n  arraytst = (dble(a)/dble(b))*dble(c)\n  \n  return\n  \nend function"}
{"instruction": "Use Fortran to create a function that takes an integer input, adds 15 to it, and returns the result along with a status code.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,16]", "case2": "[0,15]", "case3": "[-5,10]", "case4": "[100,115]", "case5": "[2147483647,-2147483633]", "result": ["0", "0", "0", "0", "0"]}, "code": "function test_intent_parameters_none(input, output)\n                        integer :: input, output\n                        integer :: test_intent_parameters_none\n\n                        output = input + 15\n\n                        test_intent_parameters_none = 0\n\n                end function"}
{"instruction": "Use Fortran to create a function that takes an integer input, adds 15 to it, and returns the result as an integer output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[0,15]", "case2": "[10,25]", "case3": "[-5,10]", "case4": "[100,115]", "case5": "[2147483647,-2147483632]", "result": ["0", "0", "0", "0", "0"]}, "code": "function test_intent_parameters_correct(input, output)\n                        integer, intent(in) :: input\n                        integer, intent(out) :: output\n                        integer :: test_intent_parameters_correct                     \n                        output = input + 15\n\n                        test_intent_parameters_correct = 0\n\n                end function"}
{"instruction": "Use Fortran to create a function that takes an integer input, adds 15 to it, and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,16]", "case2": "[0,15]", "case3": "[-5,10]", "case4": "[100,115]", "case5": "[2147483647,-2147483633]", "result": ["0", "0", "0", "0", "0"]}, "code": "function test_intent_parameters_permissive(input, output)\n                        integer, intent(inout) :: input, output\n                        integer :: test_intent_parameters_permissive\n\n                        output = input + 15\n\n                        test_intent_parameters_permissive = 0\n\n                end function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient of two integers m and n.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[5,3]", "case3": "[10,5]", "case4": "[7,2]", "case5": "[15,7]", "result": ["0.0000000000000000", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000"]}, "code": "function binomialcoefficient(m, n) result (biocoeff)\n\n    integer, intent(in)::m,n\n    double precision::biocoeff\n\n    integer, parameter::size=30\n    integer, save::bc(size,size)=0\n    logical, save::initialized=.false.;\n\n    integer::i,j,k\n\n    if (.not.initialized) then\n        do i=1,size\n        bc(i,1)=one\n        bc(i,2:size)=zero\n        end do\n        do i=2, size\n        do j=2, i\n        bc(i,j)=bc(i-1,j-1)+bc(i-1,j)\n        end do\n        end do\n\n        initialized=.true.\n    end if\n\n    biocoeff=one*bc(m,n)\n\nend function"}
{"instruction": "Use Fortran to create a function that takes in two character arrays and returns a C pointer.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'test', 'case'", "case4": "'input', 'output'", "case5": "'alpha', 'beta'", "result": ["14580224", "16284160", "15628800", "15694336", "16677376"]}, "code": "function ygg_output_fmt_c(name, fmt) result(channel) &\n          bind(c, name=\"yggOutputFmt_f\")\n       use, intrinsic :: iso_c_binding, only: c_ptr, c_char\n       implicit none\n       character(kind=c_char), dimension(*), intent(in) :: name\n       character(kind=c_char), dimension(*), intent(in) :: fmt\n       type(c_ptr) :: channel\n     end function"}
{"instruction": "Use Fortran to create a function that takes in a name and format and returns a C pointer for an input channel.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file1','fmt1'", "case2": "'file2','fmt2'", "case3": "'file3','fmt3'", "case4": "'file4','fmt4'", "case5": "'file5','fmt5'", "result": ["14711296", "7436800", "7633408", "16939520", "7174656"]}, "code": "function ygg_input_fmt_c(name, fmt) result(channel) &\n          bind(c, name=\"yggInputFmt_f\")\n       use, intrinsic :: iso_c_binding, only: c_ptr, c_char\n       implicit none\n       character(kind=c_char), dimension(*), intent(in) :: name\n       character(kind=c_char), dimension(*), intent(in) :: fmt\n       type(c_ptr) :: channel\n     end function"}
{"instruction": "Use Fortran to create a function that returns a C pointer to a Yggdrasil RPC client channel given the channel name and input/output formats.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "['name','out_fmt','in_fmt']", "case2": "['client','out','in']", "case3": "['rpc','out','in']", "case4": "['ygg','out_fmt','in_fmt']", "case5": "['client_name','output_format','input_format']", "result": ["7174720", "14252608", "7240224", "15694400", "6978112"]}, "code": "function ygg_rpc_client_c(name, out_fmt, in_fmt) result(channel) &\n          bind(c, name=\"yggRpcClient_f\")\n       use, intrinsic :: iso_c_binding, only: c_ptr, c_char\n       implicit none\n       character(kind=c_char), dimension(*), intent(in) :: name\n       character(kind=c_char), dimension(*), intent(in) :: out_fmt\n       character(kind=c_char), dimension(*), intent(in) :: in_fmt\n       type(c_ptr) :: channel\n     end function"}
{"instruction": "Use Fortran to create a function that returns a channel pointer for a Yggdrasil RPC server with specified input and output formats.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "['name1','in_fmt1','out_fmt1']", "case2": "['name2','in_fmt2','out_fmt2']", "case3": "['name3','in_fmt3','out_fmt3']", "case4": "['name4','in_fmt4','out_fmt4']", "case5": "['name5','in_fmt5','out_fmt5']", "result": ["16480832", "16349760", "16087616", "14907968", "7633472"]}, "code": "function ygg_rpc_server_c(name, in_fmt, out_fmt) result(channel) &\n          bind(c, name=\"yggRpcServer_f\")\n       use, intrinsic :: iso_c_binding, only: c_ptr, c_char\n       implicit none\n       character(kind=c_char), dimension(*), intent(in) :: name\n       character(kind=c_char), dimension(*), intent(in) :: in_fmt\n       character(kind=c_char), dimension(*), intent(in) :: out_fmt\n       type(c_ptr) :: channel\n     end function"}
{"instruction": "Use Fortran to create a C binding function that takes in two character arrays and returns a C pointer.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['name1','t_units1']", "case2": "['name2','t_units2']", "case3": "['name3','t_units3']", "case4": "['name4','t_units4']", "case5": "['name5','t_units5']", "result": ["6978048", "17267200", "15956480", "15497728", "15038976"]}, "code": "function ygg_timesync_c(name, t_units) result(channel) &\n          bind(c, name=\"yggTimesync_f\")\n       use, intrinsic :: iso_c_binding, only: c_ptr, c_char\n       implicit none\n       character(kind=c_char), dimension(*), intent(in) :: name\n       character(kind=c_char), dimension(*), intent(in) :: t_units\n       type(c_ptr) :: channel\n     end function"}
{"instruction": "Use Fortran to create a function that takes an integer n and a real array x as input and returns an array y of size n with all elements set to 1.", "test_case": {"param_num": 2, "param_type": "integer,real*4(:)", "case1": "[5,[1.0,2.0,3.0,4.0,5.0]]", "case2": "[3,[0.0,0.0,0.0]]", "case3": "[0,[]]", "case4": "[2,[1.0,2.0]]", "case5": "[4,[1.0,2.0,3.0,4.0]]", "result": ["1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000", "", "1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000"]}, "code": "function f(n,x) result(y)\n    integer, intent(in) :: n\n    real, dimension(:), intent(in) :: x\n    real, dimension(n) :: y\n    y = 1\n  end function"}
{"instruction": "Use Fortran to give me a function that takes in three integer inputs and returns a logical output.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["T", "T", "T", "T", "T"]}, "code": "function prc_is_allowed (flv, hel, col) result (is_allowed)\n       logical :: is_allowed\n       integer, intent(in) :: flv, hel, col\n     end function"}
{"instruction": "Use Fortran to give me a function that returns the d-th digit of an integer n.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[123,2]", "case2": "[456,1]", "case3": "[789,3]", "case4": "[0,1]", "case5": "[987654321,9]", "result": ["2", "6", "7", "0", "9"]}, "code": "function digit(n,d)\n    implicit none\n    integer, intent(in) :: n, d\n    integer             :: digit\n    digit = mod(n,10**d)/(10**(d-1))\n  end function"}
{"instruction": "Use Fortran to define a function that takes in six integer arguments, increments each argument by one, sums them up, and uses OpenMP SIMD directives to optimize the function.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5,6]", "case2": "[0,0,0,0,0,0]", "case3": "[1,1,1,1,1,1]", "case4": "[100,200,300,400,500,600]", "case5": "[-1,-2,-3,-4,-5,-6]", "result": ["27", "6", "12", "2106", "-15"]}, "code": "function f1 (a, b, c, d, e, f)\n  integer, value :: a, b, c\n  integer :: d, e, f, f1\n!$omp declare simd (f1) uniform(b) linear(c, d) linear(uval(e)) linear(ref(f))\n  a = a + 1\n  b = b + 1\n  c = c + 1\n  d = d + 1\n  e = e + 1\n  f = f + 1\n  f1 = a + b + c + d + e + f\nend function"}
{"instruction": "Use Fortran to define a function that takes two integers as input, increments the first integer by 1, and returns the sum of the two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["4.00000000", "8.00000000", "6.00000000", "7.00000000", "7.00000000"]}, "code": "function f2 (a, b)\n  integer :: a, b\n!$omp declare simd uniform(b) linear(ref(a):b)\n  a = a + 1\n  f2 = a + b\nend function"}
{"instruction": "Use Fortran to give me a function that rounds an integer ix to the range 1 to nx.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "1", "2"]}, "code": "function roundx(ix, nx)\nimplicit none\n!-- for input -----------\ninteger                     ix, nx\n!-- for output ----------\ninteger                     roundx\n!------------------------\nif (ix .ge. 1) then\n  roundx = ix - int((ix -1)/nx)*nx\nelse\n  roundx = nx - abs(mod(ix,nx))\nend if \nreturn\nend function"}
{"instruction": "Use Fortran to create a function that calculates the factorial ratio 2 of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[8,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["60", "25200", "1680", "90810720", "670442572800"]}, "code": "function fact_ratio2(ain, bin) result(ret)\n!****************************************************************************\n! Factorial ratio 2 := a! / ( b! (a-2b)! )\n!****************************************************************************\n  implicit none\n  ! Params\n  integer, intent(in) :: ain, bin ! ain >= 2bin\n  ! Locals\n  integer :: i1, imx, imn\n  ! Return\n  integer(kind=8) :: ret\n\n  if ( (ain.eq.0) .or. (ain.eq.1) .or. &\n       (bin.eq.0) ) then\n      ret =  1\n      return\n  else if (ain.gt.28) then\n      write(6,'(\"ERR, fact_ratio2 cannot handle numbers > 28\")')\n      ret = 0\n      return\n  end if\n\n  imx = max(bin, ain - 2*bin)\n  imn = min(bin, ain - 2*bin)\n\n  ret = 1\n  do i1 = imx+1, ain\n      ret = ret * int(i1, 8)\n  end do\n  if ( imn .gt. 1) then\n      do i1 = 2, imn\n          ret = ret / int(i1, 8)\n      end do\n  end if\n\n  return\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["10", "120", "35", "3003", "117"]}, "code": "function binomcof(ain, bin) result(ret)\n!****************************************************************************\n! binomial coefficient := a! / ( b! (a-b)! )\n!****************************************************************************\n  implicit none\n  ! Params\n  integer, intent(in) :: ain, bin\n  ! Locals\n  integer :: i1, imx, imn\n  ! Return\n  integer :: ret\n\n  if ( (ain.eq.0) .or. (ain.eq.1) .or. &\n       (bin.eq.0) ) then\n      ret =  1\n      return\n  end if\n\n  imx = max(bin, ain - bin)\n  imn = min(bin, ain - bin)\n\n  ret = 1\n  do i1 = imx+1, ain\n      ret = ret * i1\n  end do\n  if ( imn .gt. 1) then\n      do i1 = 2, imn\n          ret = ret / i1\n      end do\n  end if\n\n  return\nend function"}
{"instruction": "Use Fortran to give me a function that computes r given x1 and xbr using a conditional statement and an exponential function.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["2.7182818284590451", "33.115451958692312", "1.0000000000000000", "Infinity", "12.182493960703473"]}, "code": "function calcrmks_single(x1,xbr) result(r)\n          ! Compute r given x1 for Jon's simulations                                                                 \n          ! JAD 7/24/2011\n          real(kind=8), intent(in) :: x1,xbr\n          real(kind=8) :: npow2\n          real(kind=8) :: r, xi\n          npow2=10d0\n          if(x1.gt.xbr) then\n             xi=x1+(x1-xbr)**npow2\n          else\n             xi=x1\n          endif\n          r=exp(xi)\n        end function"}
{"instruction": "Use Fortran to calculate the value of theta based on a set of input parameters and equations.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["NaN", "NaN", "NaN", "NaN", "NaN"]}, "code": "function calcthmks6_8single(x2,r) result(theta)\n          ! Calculates \\theta for Jon's defcoord = 1401\n          ! JAD 5/14/2010, fortran 12/28/2012    \n          real(kind=8), intent(in) :: x2,r\n          real(kind=8) :: th,r0r,r1jet,njet,r0jet,rsjet,qjet, &\n               rs,r0,r0jet3,rsjet3,h0,ntheta,htheta,rsjet2,r0jet2,myhslope,th2, &\n               th0,switch0,switch2,theta1,theta2,arctan2,theta\n          r0r=0.\n          r1jet=2.8\n          njet=0.3\n          r0jet=15.\n          rsjet=40.\n          qjet=1.3\n          rs=40.\n          r0=20.\n          r0jet3=20.\n          rsjet3=0.\n          h0=0.3\n          njet=1.0\n          ntheta=5.\n          htheta=0.15\n          rsjet2=5.0\n          r0jet2=2.0\n          myhslope=h0+((r-rsjet3)/r0jet3)**njet\n          th2=0.5*pi*(1.+atan(myhslope*(x2-0.5))/atan(myhslope*.5))\n          myhslope=2.0-qjet*(r/r1jet)**(-njet*(0.5+1.0/pi*atan(r/r0jet-rsjet/r0jet)))\n          th0=pi*x2+((1.-myhslope)*0.5)*sin(2.*pi*x2)\n          switch0=0.5+1.0/pi*atan((r-rs)/r0)\n          switch2=0.5-1.0/pi*atan((r-rs)/r0)\n          theta1=th0*switch2+th2*switch0\n          theta2=pi*.5*(htheta*(2.*x2-1.)+(1.-htheta)*(2.*x2-1.)**ntheta+1.)\n          arctan2=.5+1./pi*(atan((r-rsjet2)/r0jet2))\n          theta=theta2+arctan2*(theta1-theta2)\n        end function"}
{"instruction": "Use Fortran to give me a function for adding two integers and returning the result as an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function int_add(n_1, n_2) result(sum)\n        integer, intent(in) :: n_1, n_2\n        integer :: sum\n        sum = n_1 + n_2\n    end function"}
{"instruction": "Use Fortran to give me a function for adding two real numbers and returning their sum.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.5,1.5]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "7.00000000", "7.00000000"]}, "code": "function real_add(n_1, n_2) result(sum)\n        real, intent(in) :: n_1, n_2\n        real :: sum\n        sum = n_1 + n_2\n    end function"}
{"instruction": "Use Fortran to give me a function for subtracting two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["-1", "-1", "1", "4", "-2"]}, "code": "function int_sub(n_1, n_2) result(sub)\n        integer, intent(in) :: n_1, n_2\n        integer :: sub\n        sub = n_1 - n_2\n    end function"}
{"instruction": "Use Fortran to give me a function for multiplying two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[-2,4]", "result": ["2", "12", "0", "5", "-8"]}, "code": "function int_mult(n_1, n_2) result(mult)\n        integer, intent(in) :: n_1, n_2\n        integer :: mult\n        mult = n_1 * n_2\n    end function"}
{"instruction": "Use Fortran to create a function that calculates the Julian Day for a given date and time.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,real*8", "case1": "[1,1,2000,12.0]", "case2": "[2,29,2020,6.5]", "case3": "[12,31,2021,0.0]", "case4": "[2,29,2021,18.0]", "case5": "[4,15,2022,23.5]", "result": ["2451545.0000000000", "2458908.7708333335", "2459579.5000000000", "2459275.2500000000", "2459685.4791666665"]}, "code": "function JulianDay(month,day,year,hour) ! Calculates time in JD for a given date\n    integer :: month,day,year,year_r,month_r\n    double precision :: hour,JulianDay\n    year_r = year+4800-floor((14-month)/12.0)\n    month_r = month+12*floor((14-month)/12.0)-3\n    JulianDay = day + floor((153*month_r+2)/5.0) + 365*year_r &\n         + floor(year_r/4.0) -floor(year_r/100.0) + &\n         floor(year_r/400.0) - 32045 + (hour-12.0)/24.0\n  end function"}
{"instruction": "Use Fortran to create a function that compares two character strings and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','worlds'", "case3": "'fortran','FORTRAN'", "case4": "'',''", "case5": "'123','12345'", "result": ["T", "F", "F", "T", "F"]}, "code": "function equal(a,b)\n    character(len=*), intent(in) :: a, b\n    logical :: equal\n\n    equal = (len(a) == len(b)) .and. (a == b)\n  end function"}
{"instruction": "Use Fortran to read data from a csv file with a specified number of rows and columns and return it as a 2D array.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "['data.csv',3,2]", "case2": "['data.csv',4,3]", "case3": "['data.csv',2,5]", "case4": "['data.csv',1,1]", "case5": "['data.csv',0,0]", "result": ["417.000000       604.000000       226.000000       791.000000       620.000000       458.000000", "417.000000       620.000000       723.000000       707.000000       791.000000       226.000000       522.000000       510.000000       604.000000       458.000000       475.000000       772.000000", "417.000000       458.000000       791.000000       723.000000       604.000000       522.000000       620.000000       475.000000       226.000000       707.000000", "417.000000", ""]}, "code": "function getTable(filename,rows,cols)\n    !! Returns data from csv formatted file\n    character(len=*), intent(in) :: filename\n    integer, intent(in) :: rows  !! No. of rows\n    integer, intent(in) :: cols  !! No. of columns \n    integer :: i, j\n    integer :: stat\n    real, dimension(rows,cols) :: getTable\n\n    open(unit=10, file=filename, status='old', action='read', iostat=stat)\n    if (stat>0) then\n      print*, 'ERROR: '//trim(filename)//' file not found'\n      error stop \n    endif\n    do i=1,rows\n      read(10,*) (getTable(i,j),j=1,cols)\n    enddo\n    close(10)\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a letter and returns true if it is and false if it is not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_letter(ch) result(res)\n\n! Returns .true. if ch is a letter and .false. otherwise\n\ncharacter :: ch\nlogical :: res\n\nselect case(ch)\ncase('A':'Z','a':'z')\n  res=.true.\ncase default\n  res=.false.\nend select\nreturn\n\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a digit and false otherwise.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_digit(ch) result(res)\n\n! Returns .true. if ch is a digit (0,1,...,9) and .false. otherwise\n\ncharacter :: ch\nlogical :: res\n\nselect case(ch)\ncase('0':'9')\n  res=.true.\ncase default\n  res=.false.\nend select\nreturn\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates the true solution for the porous medium equation given inputs x and t.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,0.0]", "case2": "[1.0,0.5]", "case3": "[2.0,1.0]", "case4": "[3.0,2.0]", "case5": "[4.0,3.0]", "result": ["1.49380159", "0.973050654", "0.659850061", "0.431485295", "0.267638981"]}, "code": "function true_solution(x, t)\n\n! True solution for the porous medium equation,\n!     q_t = (q**2)_xx.\n\n    double precision :: x, t\n    double precision :: mass, tau, t0\n    parameter(mass = 1.d0)\n    parameter(t0 = .3d0)\n\n    tau = t + t0\n    true_solution = (mass - 1.d0/12.d0 * x**2 / tau**(2.d0/3.d0)) / tau**(1.d0/3.d0)\n    if (true_solution < 0.d0) true_solution = 0.d0\nend function"}
{"instruction": "Use Fortran to create a function that calculates the rest mass of a nucleus given its A/Z combination.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[56,26]", "case2": "[238,92]", "case3": "[14,7]", "case4": "[208,82]", "case5": "[235,92]", "result": ["52.582047768940733", "223.49762904884489", "13.144865292752838", "195.32359406955106", "220.67893225195081"]}, "code": "function determineRestMass(nuclA, nuclZ ) result(restMass)\n\n! ====================================================================\n!\n! Determines the rest mass of a nucleus given its A/Z combination\n!\n!\n! Written by CMJ, XCP-3 (04/2019)\n!\n! ====================================================================\n\n    use, intrinsic:: iso_fortran_env, only: int32, real64\n\n    implicit none\n    integer(int32), intent(in   ) :: nuclA\n    integer(int32), intent(in   ) :: nuclZ\n    real(real64) :: restMass\n\n! ====================================================================\n\n    restMass = dble(nuclZ) * 0.9382723d0 + &\n         & dble(nuclA - nuclZ) * 0.9395656\n\n    return\n! ====================================================================\n  end function"}
{"instruction": "Use Fortran to create a function that returns a pointer to the second element of an input array.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.5,1.5,2.5,3.5]", "case3": "[1.0,2.0]", "case4": "[1.0]", "case5": "[0.0,0.0,0.0]", "result": ["13728948", "16547364", "7044276", "14843428", "7503028"]}, "code": "function point(x)\n    use iso_c_binding\n    real, intent(in), target :: x(:)\n    type(c_ptr) point\n    real, pointer :: p\n\n    p => x(2)\n    point = c_loc(p)\n  end function"}
{"instruction": "Use Fortran to create a function that takes a character tag and a double precision scalar t as input and returns an integer y as output.", "test_case": {"param_num": 2, "param_type": "character,real*8", "case1": "['tag1',1.0]", "case2": "['tag2',2.5]", "case3": "['tag3',-3.0]", "case4": "['tag4',0.0]", "case5": "['tag5',4.2]", "result": ["6618568", "6618568", "6618568", "6618568", "6618568"]}, "code": "function set_state_scalar_py(tag, t) result(y)&\n            bind(c, name='set_state_scalar')\n         use iso_c_binding\n         character(c_char) :: tag\n         real(c_double) t\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to create a function that takes two character inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'tag1','c'", "case2": "'tag2','d'", "case3": "'tag3','e'", "case4": "'tag4','f'", "case5": "'tag5','g'", "result": ["16742912", "16742912", "17136128", "7436800", "17070592"]}, "code": "function set_state_char_py(tag, chr) result(y)&\n            bind(c, name='set_state_char')\n         use iso_c_binding\n         implicit none\n         character(c_char) :: tag\n         character(c_char) :: chr\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to give me a function that calculates the first difference of an integer array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[10,20,30,40,50,60]", "case3": "[5,4,3,2,1]", "case4": "[100,200,300,400,500]", "case5": "[0,1,0,1,0,1,0,1]", "result": ["1.00000000       1.00000000       1.00000000       1.00000000       7.00649232E-45", "10.0000000       10.0000000       10.0000000       10.0000000       10.0000000       8.40779079E-44", "-1.00000000      -1.00000000      -1.00000000      -1.00000000       1.40129846E-45", "100.000000       100.000000       100.000000       100.000000       7.00649232E-43", "1.00000000      -1.00000000       1.00000000      -1.00000000       1.00000000      -1.00000000       1.00000000       1.40129846E-45"]}, "code": "function diff(A)\n! first difference\ninteger, intent(in) :: A(:)\ndimension :: diff(size(A))\n\ndiff = A(2:) - A(:size(A)-1)\nend function"}
{"instruction": "Use Fortran to create a function that calculates the Julian day from input date and time.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,real*8", "case1": "[1,1,2000,12.0]", "case2": "[2,29,2020,6.5]", "case3": "[12,31,2021,0.0]", "case4": "[2,29,2021,18.0]", "case5": "[4,15,2022,23.5]", "result": ["2451545.0000000000", "2458908.7708333335", "2459579.5000000000", "2459275.2500000000", "2459685.4791666665"]}, "code": "function JulianDay(month,day,year,hour) ! calculates Julian day from input date\n\tinteger :: month,day,year,year_r,month_r\n\tdouble precision :: hour,JulianDay\n\tyear_r = year+4800-floor((14-month)/12.0)\n\tmonth_r = month+12*floor((14-month)/12.0)-3\n\tJulianDay = day + floor((153*month_r+2)/5.0) + 365*year_r &\n\t\t\t\t+ floor(year_r/4.0) -floor(year_r/100.0) &\n\t\t\t\t+ floor(year_r/400.0) - 32045 + (hour-12.0)/24.0\nend function"}
{"instruction": "Use Fortran to create a function that hashes a given key into a code using the Bob Jenkins algorithm.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 16", "case2": "'world', 32", "case3": "'fortran', 64", "case4": "'programming', 128", "case5": "'language', 256", "result": ["4.00000000", "1.00000000", "33.0000000", "79.0000000", "89.0000000"]}, "code": "function hash_value(key, range)\n    character(len=*), intent(in) :: key\n    integer,          intent(in) :: range\n\n    integer :: len_key, a, b, c, k\n\n    ! Hash the key into a code, using the algorithm\n    ! described by Bob Jenkins at:\n    !  http://burtleburtle.net/bob/hash/doobs.html\n    !\n    ! Note that range should be a power of 2, and\n    ! that the 32-bit algorithm is used\n\n    len_key = len(key)\n\n    a = -1640531527 ! 0x9E3779B9\n    b = a\n    c = 305419896   ! 0x12345678\n\n    k = 1\n\n    do\n       if (len_key < 12) exit\n\n       ! Pack the key into 32 bits\n       a = a + ichar(key(k:k)) + ishft(ichar(key(k+1:k+1)), 8) +  &\n            ishft(ichar(key(k+2:k+2)), 16) + ishft(ichar(key(k+3:k+3)), 24)\n       b = b + ichar(key(k+4:k+4)) + ishft(ichar(key(k+5:k+5)), 8) +  &\n            ishft(ichar(key(k+6:k+6)), 16) + ishft(ichar(key(k+7:k+7)), 24)\n       c = c + ichar(key(k+8:k+8)) + ishft(ichar(key(k+9:k+9)), 8) +  &\n            ishft(ichar(key(k+10:k+10)), 16) + ishft(ichar(key(k+11:k+11)), 24)\n\n       ! Mix it up\n       call hash_mix()\n       k = k + 12\n       len_key = len_key - 12\n    end do\n\n    c = c + len_key\n\n    ! Process remaining bits\n    select case(len_key)\n    case(11)\n       c = c + ishft(ichar(key(k+10:k+10)),24)  &\n            + ishft(ichar(key(k+9:k+9)),16) + ishft(ichar(key(k+8:k+8)),8)\n       b = b + ishft(ichar(key(k+7:k+7)),24) + ishft(ichar(key(k+6:k+6)),16)  &\n            + ishft(ichar(key(k+5:k+5)),8) + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(10)\n       c = c + ishft(ichar(key(k+9:k+9)),16) + ishft(ichar(key(k+8:k+8)),8)\n       b = b + ishft(ichar(key(k+7:k+7)),24) + ishft(ichar(key(k+6:k+6)),16)  &\n            + ishft(ichar(key(k+5:k+5)),8) + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(9)\n       c = c + ishft(ichar(key(k+8:k+8)),8)\n       b = b + ishft(ichar(key(k+7:k+7)),24) + ishft(ichar(key(k+6:k+6)),16)  &\n            + ishft(ichar(key(k+5:k+5)),8) + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(8)\n       b = b + ishft(ichar(key(k+7:k+7)),24) + ishft(ichar(key(k+6:k+6)),16)  &\n            + ishft(ichar(key(k+5:k+5)),8) + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(7)\n       b = b + ishft(ichar(key(k+6:k+6)),16) + ishft(ichar(key(k+5:k+5)),8)  &\n            + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(6)\n       b = b + ishft(ichar(key(k+5:k+5)),8) + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(5)\n       b = b + ichar(key(k+4:k+4))\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(4)\n       a = a + ishft(ichar(key(k+3:k+3)),24) + ishft(ichar(key(k+2:k+2)),16)  &\n            + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(3)\n       a = a + ishft(ichar(key(k+2:k+2)),16) + ishft(ichar(key(k+1:k+1)),8)  &\n            + ichar(key(k:k))\n    case(2)\n       a = a + ishft(ichar(key(k+1:k+1)),8) + ichar(key(k:k))\n    case(1)\n       a = a + ichar(key(k:k))\n    end select\n\n    call hash_mix()\n\n    hash_value = iand(c, range - 1) + 1\n\n  contains\n\n    subroutine hash_mix\n      ! Mix a, b and c\n      a = ieor(a - b - c, ishft(c, -13))\n      b = ieor(b - c - a, ishft(a, 8))\n      c = ieor(c - a - b, ishft(b, -13))\n\n      a = ieor(a - b - c, ishft(c, -12))\n      b = ieor(b - c - a, ishft(a, 16))\n      c = ieor(c - a - b, ishft(b, -5))\n\n      a = ieor(a - b - c, ishft(c, -3))\n      b = ieor(b - c - a, ishft(a, 10))\n      c = ieor(c - a - b, ishft(b, -15))\n    end subroutine hash_mix\n  end function"}
{"instruction": "Use Fortran to define a function that calculates nu(M,N,K) based on a specific equation in Johnson 1980, which involves factorials and a conditional statement.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[3,5,2]", "case3": "[7,3,4]", "case4": "[9,11,6]", "case5": "[2,8,5]", "result": ["-1.00000000", "3.00000000", "15.0000000", "99225.0000", "0.00000000"]}, "code": "function nu_M_N_K(M, N, K) result(nu)\n        ! Calculates nu(M,N,K) based on Eq. (D.51) in Johnson 1980\n\n        implicit none\n\n        integer,intent(in) :: M, N, K\n        real :: nu\n\n        integer :: mm, nn, kk, i\n\n        ! Check for even M or N\n        if (mod(M, 2) .eq. 0 .or. mod(N, 2) .eq. 0) then\n            nu = 0\n        else\n             \n            ! Initialize\n            mm = 1\n            nn = 1\n            kk = 1\n\n            ! Run factorials (ish. not sure what you'd call these...)\n            if (.not. M .eq. 1) then\n                do i=1,M-2,2\n                    mm = mm*i\n                end do\n            end if\n\n            if (.not. N .eq. 1) then\n                do i=1,N-2,2\n                    nn = nn*i\n                end do\n            end if\n\n            do i=K-2,K-M-N,2\n                kk = kk*i\n            end do\n\n            ! Calculate nu\n            nu = mm*nn/kk\n\n        end if\n\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,3]", "case3": "[21,7]", "case4": "[100,25]", "case5": "[144,12]", "result": ["5.00000000", "3.00000000", "7.00000000", "25.0000000", "12.0000000"]}, "code": "function gcd(a,b)\n    integer :: a,b,t\n        do while (b/=0)\n            t = b\n            b = mod(a,b)\n            a = t\n        end do\n        gcd = abs(a)\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between mi and ma.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[-10,10]", "case5": "[100,1000]", "result": ["6", "12", "76", "5", "314"]}, "code": "function randint(mi,ma) result(x)\n        implicit none\n        \n        integer,intent(in)  :: mi,ma\n        integer             :: x\n        real    :: r\n        \n        call random_number(r)\n        x = mi + floor(r*(ma-mi+1))\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the day of the week given a date in the format (day, month, year).", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,2022]", "case2": "[31,12,2021]", "case3": "[29,2,2020]", "case4": "[30,4,2023]", "case5": "[15,6,2024]", "result": ["5", "6", "5", "1", "0"]}, "code": "function Day_of_week(d, m, y)\n  integer :: Day_of_week\n  integer, intent(in) :: d, m, y\n  integer :: j, k\n\n  j = y / 100\n  k = mod(y, 100)\n  Day_of_week = mod(d + (m+1)*26/10 + k + k/4 + j/4 + 5*j, 7)\n\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the combination of n choose k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[0,0]", "case5": "[1,1]", "result": ["10", "120", "35", "1", "1"]}, "code": "function f_combination(n,k) result(nCk)\n    integer, intent(in) :: n, k\n    integer :: i\n    integer ::nCk\n\n    if(n < k)then\n      nCk = 0\n      return\n    end if\n\n    nCk=1\n    do i=1,k\n      nCk=nCk*(n-k+i)\n      nCk=nCk/i\n    end do\n\n  end function"}
{"instruction": "Use Fortran to create a function that generates an array of shifted indices in the x-direction for a 3D grid of size LX x LY x LZ.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2,2,2]", "case2": "[3,3,3]", "case3": "[4,4,4]", "case4": "[5,5,5]", "case5": "[6,6,6]", "result": ["2           1           4           3           6           5           8           7", "2           3           1           5           6           4           8           9           7          11          12          10          14          15          13          17          18          16          20          21          19          23          24          22          26          27          25", "2           3           4           1           6           7           8           5          10          11          12           9          14          15          16          13          18          19          20          17          22          23          24          21          26          27          28          25          30          31          32          29          34          35          36          33          38          39          40          37          42          43          44          41          46          47          48          45          50          51          52          49          54          55          56          53          58          59          60          57          62          63          64          61", "2           3           4           5           1           7           8           9          10           6          12          13          14          15          11          17          18          19          20          16          22          23          24          25          21          27          28          29          30          26          32          33          34          35          31          37          38          39          40          36          42          43          44          45          41          47          48          49          50          46          52          53          54          55          51          57          58          59          60          56          62          63          64          65          61          67          68          69          70          66          72          73          74          75          71          77          78          79          80          76          82          83          84          85          81          87          88          89          90          86          92          93          94          95          91          97          98          99         100          96         102         103         104         105         101         107         108         109         110         106         112         113         114         115         111         117         118         119         120         116         122         123         124         125         121", "2           3           4           5           6           1           8           9          10          11          12           7          14          15          16          17          18          13          20          21          22          23          24          19          26          27          28          29          30          25          32          33          34          35          36          31          38          39          40          41          42          37          44          45          46          47          48          43          50          51          52          53          54          49          56          57          58          59          60          55          62          63          64          65          66          61          68          69          70          71          72          67          74          75          76          77          78          73          80          81          82          83          84          79          86          87          88          89          90          85          92          93          94          95          96          91          98          99         100         101         102          97         104         105         106         107         108         103         110         111         112         113         114         109         116         117         118         119         120         115         122         123         124         125         126         121         128         129         130         131         132         127         134         135         136         137         138         133         140         141         142         143         144         139         146         147         148         149         150         145         152         153         154         155         156         151         158         159         160         161         162         157         164         165         166         167         168         163         170         171         172         173         174         169         176         177         178         179         180         175         182         183         184         185         186         181         188         189         190         191         192         187         194         195         196         197         198         193         200         201         202         203         204         199         206         207         208         209         210         205         212         213         214         215         216         211"]}, "code": "function mk_shift_x_SQ(LX,LY,LZ) result(shift_x_SQ) \n    integer, intent(in) :: LX, LY, LZ\n    integer :: shift_x_SQ(LX*LY*LZ)\n    integer :: x, y, z\n    forall(x=1:LX,y=1:LY,z=1:LZ)\n      shift_x_SQ( x + LX*((y-1) + LY*(z-1)) ) = &\n        (mod(x, LX)+1) + LX*(y-1) + LX*LY*(z-1)\n    end forall\n  end function"}
{"instruction": "Use Fortran to create a function that generates an array of shifted indices in the y-direction for a 3D grid of size LX x LY x LZ.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2,3,4]", "case2": "[5,6,7]", "case3": "[8,9,10]", "case4": "[11,12,13]", "case5": "[14,15,16]", "result": ["3           4           5           6           1           2           9          10          11          12           7           8          15          16          17          18          13          14          21          22          23          24          19          20", "6           7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30           1           2           3           4           5          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          31          32          33          34          35          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          61          62          63          64          65          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120          91          92          93          94          95         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         121         122         123         124         125         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         151         152         153         154         155         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210         181         182         183         184         185", "9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72           1           2           3           4           5           6           7           8          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144          73          74          75          76          77          78          79          80         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210         211         212         213         214         215         216         145         146         147         148         149         150         151         152         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         265         266         267         268         269         270         271         272         273         274         275         276         277         278         279         280         281         282         283         284         285         286         287         288         217         218         219         220         221         222         223         224         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         289         290         291         292         293         294         295         296         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         397         398         399         400         401         402         403         404         405         406         407         408         409         410         411         412         413         414         415         416         417         418         419         420         421         422         423         424         425         426         427         428         429         430         431         432         361         362         363         364         365         366         367         368         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         433         434         435         436         437         438         439         440         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         529         530         531         532         533         534         535         536         537         538         539         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         505         506         507         508         509         510         511         512         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         631         632         633         634         635         636         637         638         639         640         641         642         643         644         645         646         647         648         577         578         579         580         581         582         583         584         657         658         659         660         661         662         663         664         665         666         667         668         669         670         671         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720         649         650         651         652         653         654         655         656", "12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132           1           2           3           4           5           6           7           8           9          10          11         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210         211         212         213         214         215         216         217         218         219         220         221         222         223         224         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         133         134         135         136         137         138         139         140         141         142         143         276         277         278         279         280         281         282         283         284         285         286         287         288         289         290         291         292         293         294         295         296         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         361         362         363         364         365         366         367         368         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         265         266         267         268         269         270         271         272         273         274         275         408         409         410         411         412         413         414         415         416         417         418         419         420         421         422         423         424         425         426         427         428         429         430         431         432         433         434         435         436         437         438         439         440         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         505         506         507         508         509         510         511         512         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         397         398         399         400         401         402         403         404         405         406         407         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         577         578         579         580         581         582         583         584         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         631         632         633         634         635         636         637         638         639         640         641         642         643         644         645         646         647         648         649         650         651         652         653         654         655         656         657         658         659         660         529         530         531         532         533         534         535         536         537         538         539         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720         721         722         723         724         725         726         727         728         729         730         731         732         733         734         735         736         737         738         739         740         741         742         743         744         745         746         747         748         749         750         751         752         753         754         755         756         757         758         759         760         761         762         763         764         765         766         767         768         769         770         771         772         773         774         775         776         777         778         779         780         781         782         783         784         785         786         787         788         789         790         791         792         661         662         663         664         665         666         667         668         669         670         671         804         805         806         807         808         809         810         811         812         813         814         815         816         817         818         819         820         821         822         823         824         825         826         827         828         829         830         831         832         833         834         835         836         837         838         839         840         841         842         843         844         845         846         847         848         849         850         851         852         853         854         855         856         857         858         859         860         861         862         863         864         865         866         867         868         869         870         871         872         873         874         875         876         877         878         879         880         881         882         883         884         885         886         887         888         889         890         891         892         893         894         895         896         897         898         899         900         901         902         903         904         905         906         907         908         909         910         911         912         913         914         915         916         917         918         919         920         921         922         923         924         793         794         795         796         797         798         799         800         801         802         803         936         937         938         939         940         941         942         943         944         945         946         947         948         949         950         951         952         953         954         955         956         957         958         959         960         961         962         963         964         965         966         967         968         969         970         971         972         973         974         975         976         977         978         979         980         981         982         983         984         985         986         987         988         989         990         991         992         993         994         995         996         997         998         999        1000        1001        1002        1003        1004        1005        1006        1007        1008        1009        1010        1011        1012        1013        1014        1015        1016        1017        1018        1019        1020        1021        1022        1023        1024        1025        1026        1027        1028        1029        1030        1031        1032        1033        1034        1035        1036        1037        1038        1039        1040        1041        1042        1043        1044        1045        1046        1047        1048        1049        1050        1051        1052        1053        1054        1055        1056         925         926         927         928         929         930         931         932         933         934         935        1068        1069        1070        1071        1072        1073        1074        1075        1076        1077        1078        1079        1080        1081        1082        1083        1084        1085        1086        1087        1088        1089        1090        1091        1092        1093        1094        1095        1096        1097        1098        1099        1100        1101        1102        1103        1104        1105        1106        1107        1108        1109        1110        1111        1112        1113        1114        1115        1116        1117        1118        1119        1120        1121        1122        1123        1124        1125        1126        1127        1128        1129        1130        1131        1132        1133        1134        1135        1136        1137        1138        1139        1140        1141        1142        1143        1144        1145        1146        1147        1148        1149        1150        1151        1152        1153        1154        1155        1156        1157        1158        1159        1160        1161        1162        1163        1164        1165        1166        1167        1168        1169        1170        1171        1172        1173        1174        1175        1176        1177        1178        1179        1180        1181        1182        1183        1184        1185        1186        1187        1188        1057        1058        1059        1060        1061        1062        1063        1064        1065        1066        1067        1200        1201        1202        1203        1204        1205        1206        1207        1208        1209        1210        1211        1212        1213        1214        1215        1216        1217        1218        1219        1220        1221        1222        1223        1224        1225        1226        1227        1228        1229        1230        1231        1232        1233        1234        1235        1236        1237        1238        1239        1240        1241        1242        1243        1244        1245        1246        1247        1248        1249        1250        1251        1252        1253        1254        1255        1256        1257        1258        1259        1260        1261        1262        1263        1264        1265        1266        1267        1268        1269        1270        1271        1272        1273        1274        1275        1276        1277        1278        1279        1280        1281        1282        1283        1284        1285        1286        1287        1288        1289        1290        1291        1292        1293        1294        1295        1296        1297        1298        1299        1300        1301        1302        1303        1304        1305        1306        1307        1308        1309        1310        1311        1312        1313        1314        1315        1316        1317        1318        1319        1320        1189        1190        1191        1192        1193        1194        1195        1196        1197        1198        1199        1332        1333        1334        1335        1336        1337        1338        1339        1340        1341        1342        1343        1344        1345        1346        1347        1348        1349        1350        1351        1352        1353        1354        1355        1356        1357        1358        1359        1360        1361        1362        1363        1364        1365        1366        1367        1368        1369        1370        1371        1372        1373        1374        1375        1376        1377        1378        1379        1380        1381        1382        1383        1384        1385        1386        1387        1388        1389        1390        1391        1392        1393        1394        1395        1396        1397        1398        1399        1400        1401        1402        1403        1404        1405        1406        1407        1408        1409        1410        1411        1412        1413        1414        1415        1416        1417        1418        1419        1420        1421        1422        1423        1424        1425        1426        1427        1428        1429        1430        1431        1432        1433        1434        1435        1436        1437        1438        1439        1440        1441        1442        1443        1444        1445        1446        1447        1448        1449        1450        1451        1452        1321        1322        1323        1324        1325        1326        1327        1328        1329        1330        1331        1464        1465        1466        1467        1468        1469        1470        1471        1472        1473        1474        1475        1476        1477        1478        1479        1480        1481        1482        1483        1484        1485        1486        1487        1488        1489        1490        1491        1492        1493        1494        1495        1496        1497        1498        1499        1500        1501        1502        1503        1504        1505        1506        1507        1508        1509        1510        1511        1512        1513        1514        1515        1516        1517        1518        1519        1520        1521        1522        1523        1524        1525        1526        1527        1528        1529        1530        1531        1532        1533        1534        1535        1536        1537        1538        1539        1540        1541        1542        1543        1544        1545        1546        1547        1548        1549        1550        1551        1552        1553        1554        1555        1556        1557        1558        1559        1560        1561        1562        1563        1564        1565        1566        1567        1568        1569        1570        1571        1572        1573        1574        1575        1576        1577        1578        1579        1580        1581        1582        1583        1584        1453        1454        1455        1456        1457        1458        1459        1460        1461        1462        1463        1596        1597        1598        1599        1600        1601        1602        1603        1604        1605        1606        1607        1608        1609        1610        1611        1612        1613        1614        1615        1616        1617        1618        1619        1620        1621        1622        1623        1624        1625        1626        1627        1628        1629        1630        1631        1632        1633        1634        1635        1636        1637        1638        1639        1640        1641        1642        1643        1644        1645        1646        1647        1648        1649        1650        1651        1652        1653        1654        1655        1656        1657        1658        1659        1660        1661        1662        1663        1664        1665        1666        1667        1668        1669        1670        1671        1672        1673        1674        1675        1676        1677        1678        1679        1680        1681        1682        1683        1684        1685        1686        1687        1688        1689        1690        1691        1692        1693        1694        1695        1696        1697        1698        1699        1700        1701        1702        1703        1704        1705        1706        1707        1708        1709        1710        1711        1712        1713        1714        1715        1716        1585        1586        1587        1588        1589        1590        1591        1592        1593        1594        1595", "15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210           1           2           3           4           5           6           7           8           9          10          11          12          13          14         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         265         266         267         268         269         270         271         272         273         274         275         276         277         278         279         280         281         282         283         284         285         286         287         288         289         290         291         292         293         294         295         296         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         361         362         363         364         365         366         367         368         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         397         398         399         400         401         402         403         404         405         406         407         408         409         410         411         412         413         414         415         416         417         418         419         420         211         212         213         214         215         216         217         218         219         220         221         222         223         224         435         436         437         438         439         440         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         505         506         507         508         509         510         511         512         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         529         530         531         532         533         534         535         536         537         538         539         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         577         578         579         580         581         582         583         584         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         421         422         423         424         425         426         427         428         429         430         431         432         433         434         645         646         647         648         649         650         651         652         653         654         655         656         657         658         659         660         661         662         663         664         665         666         667         668         669         670         671         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720         721         722         723         724         725         726         727         728         729         730         731         732         733         734         735         736         737         738         739         740         741         742         743         744         745         746         747         748         749         750         751         752         753         754         755         756         757         758         759         760         761         762         763         764         765         766         767         768         769         770         771         772         773         774         775         776         777         778         779         780         781         782         783         784         785         786         787         788         789         790         791         792         793         794         795         796         797         798         799         800         801         802         803         804         805         806         807         808         809         810         811         812         813         814         815         816         817         818         819         820         821         822         823         824         825         826         827         828         829         830         831         832         833         834         835         836         837         838         839         840         631         632         633         634         635         636         637         638         639         640         641         642         643         644         855         856         857         858         859         860         861         862         863         864         865         866         867         868         869         870         871         872         873         874         875         876         877         878         879         880         881         882         883         884         885         886         887         888         889         890         891         892         893         894         895         896         897         898         899         900         901         902         903         904         905         906         907         908         909         910         911         912         913         914         915         916         917         918         919         920         921         922         923         924         925         926         927         928         929         930         931         932         933         934         935         936         937         938         939         940         941         942         943         944         945         946         947         948         949         950         951         952         953         954         955         956         957         958         959         960         961         962         963         964         965         966         967         968         969         970         971         972         973         974         975         976         977         978         979         980         981         982         983         984         985         986         987         988         989         990         991         992         993         994         995         996         997         998         999        1000        1001        1002        1003        1004        1005        1006        1007        1008        1009        1010        1011        1012        1013        1014        1015        1016        1017        1018        1019        1020        1021        1022        1023        1024        1025        1026        1027        1028        1029        1030        1031        1032        1033        1034        1035        1036        1037        1038        1039        1040        1041        1042        1043        1044        1045        1046        1047        1048        1049        1050         841         842         843         844         845         846         847         848         849         850         851         852         853         854        1065        1066        1067        1068        1069        1070        1071        1072        1073        1074        1075        1076        1077        1078        1079        1080        1081        1082        1083        1084        1085        1086        1087        1088        1089        1090        1091        1092        1093        1094        1095        1096        1097        1098        1099        1100        1101        1102        1103        1104        1105        1106        1107        1108        1109        1110        1111        1112        1113        1114        1115        1116        1117        1118        1119        1120        1121        1122        1123        1124        1125        1126        1127        1128        1129        1130        1131        1132        1133        1134        1135        1136        1137        1138        1139        1140        1141        1142        1143        1144        1145        1146        1147        1148        1149        1150        1151        1152        1153        1154        1155        1156        1157        1158        1159        1160        1161        1162        1163        1164        1165        1166        1167        1168        1169        1170        1171        1172        1173        1174        1175        1176        1177        1178        1179        1180        1181        1182        1183        1184        1185        1186        1187        1188        1189        1190        1191        1192        1193        1194        1195        1196        1197        1198        1199        1200        1201        1202        1203        1204        1205        1206        1207        1208        1209        1210        1211        1212        1213        1214        1215        1216        1217        1218        1219        1220        1221        1222        1223        1224        1225        1226        1227        1228        1229        1230        1231        1232        1233        1234        1235        1236        1237        1238        1239        1240        1241        1242        1243        1244        1245        1246        1247        1248        1249        1250        1251        1252        1253        1254        1255        1256        1257        1258        1259        1260        1051        1052        1053        1054        1055        1056        1057        1058        1059        1060        1061        1062        1063        1064        1275        1276        1277        1278        1279        1280        1281        1282        1283        1284        1285        1286        1287        1288        1289        1290        1291        1292        1293        1294        1295        1296        1297        1298        1299        1300        1301        1302        1303        1304        1305        1306        1307        1308        1309        1310        1311        1312        1313        1314        1315        1316        1317        1318        1319        1320        1321        1322        1323        1324        1325        1326        1327        1328        1329        1330        1331        1332        1333        1334        1335        1336        1337        1338        1339        1340        1341        1342        1343        1344        1345        1346        1347        1348        1349        1350        1351        1352        1353        1354        1355        1356        1357        1358        1359        1360        1361        1362        1363        1364        1365        1366        1367        1368        1369        1370        1371        1372        1373        1374        1375        1376        1377        1378        1379        1380        1381        1382        1383        1384        1385        1386        1387        1388        1389        1390        1391        1392        1393        1394        1395        1396        1397        1398        1399        1400        1401        1402        1403        1404        1405        1406        1407        1408        1409        1410        1411        1412        1413        1414        1415        1416        1417        1418        1419        1420        1421        1422        1423        1424        1425        1426        1427        1428        1429        1430        1431        1432        1433        1434        1435        1436        1437        1438        1439        1440        1441        1442        1443        1444        1445        1446        1447        1448        1449        1450        1451        1452        1453        1454        1455        1456        1457        1458        1459        1460        1461        1462        1463        1464        1465        1466        1467        1468        1469        1470        1261        1262        1263        1264        1265        1266        1267        1268        1269        1270        1271        1272        1273        1274        1485        1486        1487        1488        1489        1490        1491        1492        1493        1494        1495        1496        1497        1498        1499        1500        1501        1502        1503        1504        1505        1506        1507        1508        1509        1510        1511        1512        1513        1514        1515        1516        1517        1518        1519        1520        1521        1522        1523        1524        1525        1526        1527        1528        1529        1530        1531        1532        1533        1534        1535        1536        1537        1538        1539        1540        1541        1542        1543        1544        1545        1546        1547        1548        1549        1550        1551        1552        1553        1554        1555        1556        1557        1558        1559        1560        1561        1562        1563        1564        1565        1566        1567        1568        1569        1570        1571        1572        1573        1574        1575        1576        1577        1578        1579        1580        1581        1582        1583        1584        1585        1586        1587        1588        1589        1590        1591        1592        1593        1594        1595        1596        1597        1598        1599        1600        1601        1602        1603        1604        1605        1606        1607        1608        1609        1610        1611        1612        1613        1614        1615        1616        1617        1618        1619        1620        1621        1622        1623        1624        1625        1626        1627        1628        1629        1630        1631        1632        1633        1634        1635        1636        1637        1638        1639        1640        1641        1642        1643        1644        1645        1646        1647        1648        1649        1650        1651        1652        1653        1654        1655        1656        1657        1658        1659        1660        1661        1662        1663        1664        1665        1666        1667        1668        1669        1670        1671        1672        1673        1674        1675        1676        1677        1678        1679        1680        1471        1472        1473        1474        1475        1476        1477        1478        1479        1480        1481        1482        1483        1484        1695        1696        1697        1698        1699        1700        1701        1702        1703        1704        1705        1706        1707        1708        1709        1710        1711        1712        1713        1714        1715        1716        1717        1718        1719        1720        1721        1722        1723        1724        1725        1726        1727        1728        1729        1730        1731        1732        1733        1734        1735        1736        1737        1738        1739        1740        1741        1742        1743        1744        1745        1746        1747        1748        1749        1750        1751        1752        1753        1754        1755        1756        1757        1758        1759        1760        1761        1762        1763        1764        1765        1766        1767        1768        1769        1770        1771        1772        1773        1774        1775        1776        1777        1778        1779        1780        1781        1782        1783        1784        1785        1786        1787        1788        1789        1790        1791        1792        1793        1794        1795        1796        1797        1798        1799        1800        1801        1802        1803        1804        1805        1806        1807        1808        1809        1810        1811        1812        1813        1814        1815        1816        1817        1818        1819        1820        1821        1822        1823        1824        1825        1826        1827        1828        1829        1830        1831        1832        1833        1834        1835        1836        1837        1838        1839        1840        1841        1842        1843        1844        1845        1846        1847        1848        1849        1850        1851        1852        1853        1854        1855        1856        1857        1858        1859        1860        1861        1862        1863        1864        1865        1866        1867        1868        1869        1870        1871        1872        1873        1874        1875        1876        1877        1878        1879        1880        1881        1882        1883        1884        1885        1886        1887        1888        1889        1890        1681        1682        1683        1684        1685        1686        1687        1688        1689        1690        1691        1692        1693        1694        1905        1906        1907        1908        1909        1910        1911        1912        1913        1914        1915        1916        1917        1918        1919        1920        1921        1922        1923        1924        1925        1926        1927        1928        1929        1930        1931        1932        1933        1934        1935        1936        1937        1938        1939        1940        1941        1942        1943        1944        1945        1946        1947        1948        1949        1950        1951        1952        1953        1954        1955        1956        1957        1958        1959        1960        1961        1962        1963        1964        1965        1966        1967        1968        1969        1970        1971        1972        1973        1974        1975        1976        1977        1978        1979        1980        1981        1982        1983        1984        1985        1986        1987        1988        1989        1990        1991        1992        1993        1994        1995        1996        1997        1998        1999        2000        2001        2002        2003        2004        2005        2006        2007        2008        2009        2010        2011        2012        2013        2014        2015        2016        2017        2018        2019        2020        2021        2022        2023        2024        2025        2026        2027        2028        2029        2030        2031        2032        2033        2034        2035        2036        2037        2038        2039        2040        2041        2042        2043        2044        2045        2046        2047        2048        2049        2050        2051        2052        2053        2054        2055        2056        2057        2058        2059        2060        2061        2062        2063        2064        2065        2066        2067        2068        2069        2070        2071        2072        2073        2074        2075        2076        2077        2078        2079        2080        2081        2082        2083        2084        2085        2086        2087        2088        2089        2090        2091        2092        2093        2094        2095        2096        2097        2098        2099        2100        1891        1892        1893        1894        1895        1896        1897        1898        1899        1900        1901        1902        1903        1904        2115        2116        2117        2118        2119        2120        2121        2122        2123        2124        2125        2126        2127        2128        2129        2130        2131        2132        2133        2134        2135        2136        2137        2138        2139        2140        2141        2142        2143        2144        2145        2146        2147        2148        2149        2150        2151        2152        2153        2154        2155        2156        2157        2158        2159        2160        2161        2162        2163        2164        2165        2166        2167        2168        2169        2170        2171        2172        2173        2174        2175        2176        2177        2178        2179        2180        2181        2182        2183        2184        2185        2186        2187        2188        2189        2190        2191        2192        2193        2194        2195        2196        2197        2198        2199        2200        2201        2202        2203        2204        2205        2206        2207        2208        2209        2210        2211        2212        2213        2214        2215        2216        2217        2218        2219        2220        2221        2222        2223        2224        2225        2226        2227        2228        2229        2230        2231        2232        2233        2234        2235        2236        2237        2238        2239        2240        2241        2242        2243        2244        2245        2246        2247        2248        2249        2250        2251        2252        2253        2254        2255        2256        2257        2258        2259        2260        2261        2262        2263        2264        2265        2266        2267        2268        2269        2270        2271        2272        2273        2274        2275        2276        2277        2278        2279        2280        2281        2282        2283        2284        2285        2286        2287        2288        2289        2290        2291        2292        2293        2294        2295        2296        2297        2298        2299        2300        2301        2302        2303        2304        2305        2306        2307        2308        2309        2310        2101        2102        2103        2104        2105        2106        2107        2108        2109        2110        2111        2112        2113        2114        2325        2326        2327        2328        2329        2330        2331        2332        2333        2334        2335        2336        2337        2338        2339        2340        2341        2342        2343        2344        2345        2346        2347        2348        2349        2350        2351        2352        2353        2354        2355        2356        2357        2358        2359        2360        2361        2362        2363        2364        2365        2366        2367        2368        2369        2370        2371        2372        2373        2374        2375        2376        2377        2378        2379        2380        2381        2382        2383        2384        2385        2386        2387        2388        2389        2390        2391        2392        2393        2394        2395        2396        2397        2398        2399        2400        2401        2402        2403        2404        2405        2406        2407        2408        2409        2410        2411        2412        2413        2414        2415        2416        2417        2418        2419        2420        2421        2422        2423        2424        2425        2426        2427        2428        2429        2430        2431        2432        2433        2434        2435        2436        2437        2438        2439        2440        2441        2442        2443        2444        2445        2446        2447        2448        2449        2450        2451        2452        2453        2454        2455        2456        2457        2458        2459        2460        2461        2462        2463        2464        2465        2466        2467        2468        2469        2470        2471        2472        2473        2474        2475        2476        2477        2478        2479        2480        2481        2482        2483        2484        2485        2486        2487        2488        2489        2490        2491        2492        2493        2494        2495        2496        2497        2498        2499        2500        2501        2502        2503        2504        2505        2506        2507        2508        2509        2510        2511        2512        2513        2514        2515        2516        2517        2518        2519        2520        2311        2312        2313        2314        2315        2316        2317        2318        2319        2320        2321        2322        2323        2324        2535        2536        2537        2538        2539        2540        2541        2542        2543        2544        2545        2546        2547        2548        2549        2550        2551        2552        2553        2554        2555        2556        2557        2558        2559        2560        2561        2562        2563        2564        2565        2566        2567        2568        2569        2570        2571        2572        2573        2574        2575        2576        2577        2578        2579        2580        2581        2582        2583        2584        2585        2586        2587        2588        2589        2590        2591        2592        2593        2594        2595        2596        2597        2598        2599        2600        2601        2602        2603        2604        2605        2606        2607        2608        2609        2610        2611        2612        2613        2614        2615        2616        2617        2618        2619        2620        2621        2622        2623        2624        2625        2626        2627        2628        2629        2630        2631        2632        2633        2634        2635        2636        2637        2638        2639        2640        2641        2642        2643        2644        2645        2646        2647        2648        2649        2650        2651        2652        2653        2654        2655        2656        2657        2658        2659        2660        2661        2662        2663        2664        2665        2666        2667        2668        2669        2670        2671        2672        2673        2674        2675        2676        2677        2678        2679        2680        2681        2682        2683        2684        2685        2686        2687        2688        2689        2690        2691        2692        2693        2694        2695        2696        2697        2698        2699        2700        2701        2702        2703        2704        2705        2706        2707        2708        2709        2710        2711        2712        2713        2714        2715        2716        2717        2718        2719        2720        2721        2722        2723        2724        2725        2726        2727        2728        2729        2730        2521        2522        2523        2524        2525        2526        2527        2528        2529        2530        2531        2532        2533        2534        2745        2746        2747        2748        2749        2750        2751        2752        2753        2754        2755        2756        2757        2758        2759        2760        2761        2762        2763        2764        2765        2766        2767        2768        2769        2770        2771        2772        2773        2774        2775        2776        2777        2778        2779        2780        2781        2782        2783        2784        2785        2786        2787        2788        2789        2790        2791        2792        2793        2794        2795        2796        2797        2798        2799        2800        2801        2802        2803        2804        2805        2806        2807        2808        2809        2810        2811        2812        2813        2814        2815        2816        2817        2818        2819        2820        2821        2822        2823        2824        2825        2826        2827        2828        2829        2830        2831        2832        2833        2834        2835        2836        2837        2838        2839        2840        2841        2842        2843        2844        2845        2846        2847        2848        2849        2850        2851        2852        2853        2854        2855        2856        2857        2858        2859        2860        2861        2862        2863        2864        2865        2866        2867        2868        2869        2870        2871        2872        2873        2874        2875        2876        2877        2878        2879        2880        2881        2882        2883        2884        2885        2886        2887        2888        2889        2890        2891        2892        2893        2894        2895        2896        2897        2898        2899        2900        2901        2902        2903        2904        2905        2906        2907        2908        2909        2910        2911        2912        2913        2914        2915        2916        2917        2918        2919        2920        2921        2922        2923        2924        2925        2926        2927        2928        2929        2930        2931        2932        2933        2934        2935        2936        2937        2938        2939        2940        2731        2732        2733        2734        2735        2736        2737        2738        2739        2740        2741        2742        2743        2744        2955        2956        2957        2958        2959        2960        2961        2962        2963        2964        2965        2966        2967        2968        2969        2970        2971        2972        2973        2974        2975        2976        2977        2978        2979        2980        2981        2982        2983        2984        2985        2986        2987        2988        2989        2990        2991        2992        2993        2994        2995        2996        2997        2998        2999        3000        3001        3002        3003        3004        3005        3006        3007        3008        3009        3010        3011        3012        3013        3014        3015        3016        3017        3018        3019        3020        3021        3022        3023        3024        3025        3026        3027        3028        3029        3030        3031        3032        3033        3034        3035        3036        3037        3038        3039        3040        3041        3042        3043        3044        3045        3046        3047        3048        3049        3050        3051        3052        3053        3054        3055        3056        3057        3058        3059        3060        3061        3062        3063        3064        3065        3066        3067        3068        3069        3070        3071        3072        3073        3074        3075        3076        3077        3078        3079        3080        3081        3082        3083        3084        3085        3086        3087        3088        3089        3090        3091        3092        3093        3094        3095        3096        3097        3098        3099        3100        3101        3102        3103        3104        3105        3106        3107        3108        3109        3110        3111        3112        3113        3114        3115        3116        3117        3118        3119        3120        3121        3122        3123        3124        3125        3126        3127        3128        3129        3130        3131        3132        3133        3134        3135        3136        3137        3138        3139        3140        3141        3142        3143        3144        3145        3146        3147        3148        3149        3150        2941        2942        2943        2944        2945        2946        2947        2948        2949        2950        2951        2952        2953        2954        3165        3166        3167        3168        3169        3170        3171        3172        3173        3174        3175        3176        3177        3178        3179        3180        3181        3182        3183        3184        3185        3186        3187        3188        3189        3190        3191        3192        3193        3194        3195        3196        3197        3198        3199        3200        3201        3202        3203        3204        3205        3206        3207        3208        3209        3210        3211        3212        3213        3214        3215        3216        3217        3218        3219        3220        3221        3222        3223        3224        3225        3226        3227        3228        3229        3230        3231        3232        3233        3234        3235        3236        3237        3238        3239        3240        3241        3242        3243        3244        3245        3246        3247        3248        3249        3250        3251        3252        3253        3254        3255        3256        3257        3258        3259        3260        3261        3262        3263        3264        3265        3266        3267        3268        3269        3270        3271        3272        3273        3274        3275        3276        3277        3278        3279        3280        3281        3282        3283        3284        3285        3286        3287        3288        3289        3290        3291        3292        3293        3294        3295        3296        3297        3298        3299        3300        3301        3302        3303        3304        3305        3306        3307        3308        3309        3310        3311        3312        3313        3314        3315        3316        3317        3318        3319        3320        3321        3322        3323        3324        3325        3326        3327        3328        3329        3330        3331        3332        3333        3334        3335        3336        3337        3338        3339        3340        3341        3342        3343        3344        3345        3346        3347        3348        3349        3350        3351        3352        3353        3354        3355        3356        3357        3358        3359        3360        3151        3152        3153        3154        3155        3156        3157        3158        3159        3160        3161        3162        3163        3164"]}, "code": "function mk_shift_y_SQ(LX,LY,LZ) result(shift_y_SQ) \n    integer, intent(in) :: LX, LY, LZ\n    integer :: shift_y_SQ(LX*LY*LZ)\n    integer :: x, y, z\n    forall(x=1:LX,y=1:LY,z=1:LZ)\n      shift_y_SQ( x + LX*((y-1) + LY*(z-1)) ) = &\n        x + LX*mod(y, LY) + LX*LY*(z-1)\n    end forall\n  end function"}
{"instruction": "Use Fortran to create a function that generates an array of shifted indices in the z-direction for a 3D grid of size LX x LY x LZ.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2,3,4]", "case2": "[5,6,7]", "case3": "[8,9,10]", "case4": "[11,12,13]", "case5": "[14,15,16]", "result": ["7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24           1           2           3           4           5           6", "31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210           1           2           3           4           5           6           7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30", "73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210         211         212         213         214         215         216         217         218         219         220         221         222         223         224         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         265         266         267         268         269         270         271         272         273         274         275         276         277         278         279         280         281         282         283         284         285         286         287         288         289         290         291         292         293         294         295         296         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         361         362         363         364         365         366         367         368         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         397         398         399         400         401         402         403         404         405         406         407         408         409         410         411         412         413         414         415         416         417         418         419         420         421         422         423         424         425         426         427         428         429         430         431         432         433         434         435         436         437         438         439         440         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         505         506         507         508         509         510         511         512         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         529         530         531         532         533         534         535         536         537         538         539         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         577         578         579         580         581         582         583         584         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         631         632         633         634         635         636         637         638         639         640         641         642         643         644         645         646         647         648         649         650         651         652         653         654         655         656         657         658         659         660         661         662         663         664         665         666         667         668         669         670         671         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720           1           2           3           4           5           6           7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72", "133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210         211         212         213         214         215         216         217         218         219         220         221         222         223         224         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         265         266         267         268         269         270         271         272         273         274         275         276         277         278         279         280         281         282         283         284         285         286         287         288         289         290         291         292         293         294         295         296         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         361         362         363         364         365         366         367         368         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         397         398         399         400         401         402         403         404         405         406         407         408         409         410         411         412         413         414         415         416         417         418         419         420         421         422         423         424         425         426         427         428         429         430         431         432         433         434         435         436         437         438         439         440         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         505         506         507         508         509         510         511         512         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         529         530         531         532         533         534         535         536         537         538         539         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         577         578         579         580         581         582         583         584         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         631         632         633         634         635         636         637         638         639         640         641         642         643         644         645         646         647         648         649         650         651         652         653         654         655         656         657         658         659         660         661         662         663         664         665         666         667         668         669         670         671         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720         721         722         723         724         725         726         727         728         729         730         731         732         733         734         735         736         737         738         739         740         741         742         743         744         745         746         747         748         749         750         751         752         753         754         755         756         757         758         759         760         761         762         763         764         765         766         767         768         769         770         771         772         773         774         775         776         777         778         779         780         781         782         783         784         785         786         787         788         789         790         791         792         793         794         795         796         797         798         799         800         801         802         803         804         805         806         807         808         809         810         811         812         813         814         815         816         817         818         819         820         821         822         823         824         825         826         827         828         829         830         831         832         833         834         835         836         837         838         839         840         841         842         843         844         845         846         847         848         849         850         851         852         853         854         855         856         857         858         859         860         861         862         863         864         865         866         867         868         869         870         871         872         873         874         875         876         877         878         879         880         881         882         883         884         885         886         887         888         889         890         891         892         893         894         895         896         897         898         899         900         901         902         903         904         905         906         907         908         909         910         911         912         913         914         915         916         917         918         919         920         921         922         923         924         925         926         927         928         929         930         931         932         933         934         935         936         937         938         939         940         941         942         943         944         945         946         947         948         949         950         951         952         953         954         955         956         957         958         959         960         961         962         963         964         965         966         967         968         969         970         971         972         973         974         975         976         977         978         979         980         981         982         983         984         985         986         987         988         989         990         991         992         993         994         995         996         997         998         999        1000        1001        1002        1003        1004        1005        1006        1007        1008        1009        1010        1011        1012        1013        1014        1015        1016        1017        1018        1019        1020        1021        1022        1023        1024        1025        1026        1027        1028        1029        1030        1031        1032        1033        1034        1035        1036        1037        1038        1039        1040        1041        1042        1043        1044        1045        1046        1047        1048        1049        1050        1051        1052        1053        1054        1055        1056        1057        1058        1059        1060        1061        1062        1063        1064        1065        1066        1067        1068        1069        1070        1071        1072        1073        1074        1075        1076        1077        1078        1079        1080        1081        1082        1083        1084        1085        1086        1087        1088        1089        1090        1091        1092        1093        1094        1095        1096        1097        1098        1099        1100        1101        1102        1103        1104        1105        1106        1107        1108        1109        1110        1111        1112        1113        1114        1115        1116        1117        1118        1119        1120        1121        1122        1123        1124        1125        1126        1127        1128        1129        1130        1131        1132        1133        1134        1135        1136        1137        1138        1139        1140        1141        1142        1143        1144        1145        1146        1147        1148        1149        1150        1151        1152        1153        1154        1155        1156        1157        1158        1159        1160        1161        1162        1163        1164        1165        1166        1167        1168        1169        1170        1171        1172        1173        1174        1175        1176        1177        1178        1179        1180        1181        1182        1183        1184        1185        1186        1187        1188        1189        1190        1191        1192        1193        1194        1195        1196        1197        1198        1199        1200        1201        1202        1203        1204        1205        1206        1207        1208        1209        1210        1211        1212        1213        1214        1215        1216        1217        1218        1219        1220        1221        1222        1223        1224        1225        1226        1227        1228        1229        1230        1231        1232        1233        1234        1235        1236        1237        1238        1239        1240        1241        1242        1243        1244        1245        1246        1247        1248        1249        1250        1251        1252        1253        1254        1255        1256        1257        1258        1259        1260        1261        1262        1263        1264        1265        1266        1267        1268        1269        1270        1271        1272        1273        1274        1275        1276        1277        1278        1279        1280        1281        1282        1283        1284        1285        1286        1287        1288        1289        1290        1291        1292        1293        1294        1295        1296        1297        1298        1299        1300        1301        1302        1303        1304        1305        1306        1307        1308        1309        1310        1311        1312        1313        1314        1315        1316        1317        1318        1319        1320        1321        1322        1323        1324        1325        1326        1327        1328        1329        1330        1331        1332        1333        1334        1335        1336        1337        1338        1339        1340        1341        1342        1343        1344        1345        1346        1347        1348        1349        1350        1351        1352        1353        1354        1355        1356        1357        1358        1359        1360        1361        1362        1363        1364        1365        1366        1367        1368        1369        1370        1371        1372        1373        1374        1375        1376        1377        1378        1379        1380        1381        1382        1383        1384        1385        1386        1387        1388        1389        1390        1391        1392        1393        1394        1395        1396        1397        1398        1399        1400        1401        1402        1403        1404        1405        1406        1407        1408        1409        1410        1411        1412        1413        1414        1415        1416        1417        1418        1419        1420        1421        1422        1423        1424        1425        1426        1427        1428        1429        1430        1431        1432        1433        1434        1435        1436        1437        1438        1439        1440        1441        1442        1443        1444        1445        1446        1447        1448        1449        1450        1451        1452        1453        1454        1455        1456        1457        1458        1459        1460        1461        1462        1463        1464        1465        1466        1467        1468        1469        1470        1471        1472        1473        1474        1475        1476        1477        1478        1479        1480        1481        1482        1483        1484        1485        1486        1487        1488        1489        1490        1491        1492        1493        1494        1495        1496        1497        1498        1499        1500        1501        1502        1503        1504        1505        1506        1507        1508        1509        1510        1511        1512        1513        1514        1515        1516        1517        1518        1519        1520        1521        1522        1523        1524        1525        1526        1527        1528        1529        1530        1531        1532        1533        1534        1535        1536        1537        1538        1539        1540        1541        1542        1543        1544        1545        1546        1547        1548        1549        1550        1551        1552        1553        1554        1555        1556        1557        1558        1559        1560        1561        1562        1563        1564        1565        1566        1567        1568        1569        1570        1571        1572        1573        1574        1575        1576        1577        1578        1579        1580        1581        1582        1583        1584        1585        1586        1587        1588        1589        1590        1591        1592        1593        1594        1595        1596        1597        1598        1599        1600        1601        1602        1603        1604        1605        1606        1607        1608        1609        1610        1611        1612        1613        1614        1615        1616        1617        1618        1619        1620        1621        1622        1623        1624        1625        1626        1627        1628        1629        1630        1631        1632        1633        1634        1635        1636        1637        1638        1639        1640        1641        1642        1643        1644        1645        1646        1647        1648        1649        1650        1651        1652        1653        1654        1655        1656        1657        1658        1659        1660        1661        1662        1663        1664        1665        1666        1667        1668        1669        1670        1671        1672        1673        1674        1675        1676        1677        1678        1679        1680        1681        1682        1683        1684        1685        1686        1687        1688        1689        1690        1691        1692        1693        1694        1695        1696        1697        1698        1699        1700        1701        1702        1703        1704        1705        1706        1707        1708        1709        1710        1711        1712        1713        1714        1715        1716           1           2           3           4           5           6           7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132", "211         212         213         214         215         216         217         218         219         220         221         222         223         224         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         265         266         267         268         269         270         271         272         273         274         275         276         277         278         279         280         281         282         283         284         285         286         287         288         289         290         291         292         293         294         295         296         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         361         362         363         364         365         366         367         368         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         397         398         399         400         401         402         403         404         405         406         407         408         409         410         411         412         413         414         415         416         417         418         419         420         421         422         423         424         425         426         427         428         429         430         431         432         433         434         435         436         437         438         439         440         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         505         506         507         508         509         510         511         512         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         529         530         531         532         533         534         535         536         537         538         539         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         577         578         579         580         581         582         583         584         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         631         632         633         634         635         636         637         638         639         640         641         642         643         644         645         646         647         648         649         650         651         652         653         654         655         656         657         658         659         660         661         662         663         664         665         666         667         668         669         670         671         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720         721         722         723         724         725         726         727         728         729         730         731         732         733         734         735         736         737         738         739         740         741         742         743         744         745         746         747         748         749         750         751         752         753         754         755         756         757         758         759         760         761         762         763         764         765         766         767         768         769         770         771         772         773         774         775         776         777         778         779         780         781         782         783         784         785         786         787         788         789         790         791         792         793         794         795         796         797         798         799         800         801         802         803         804         805         806         807         808         809         810         811         812         813         814         815         816         817         818         819         820         821         822         823         824         825         826         827         828         829         830         831         832         833         834         835         836         837         838         839         840         841         842         843         844         845         846         847         848         849         850         851         852         853         854         855         856         857         858         859         860         861         862         863         864         865         866         867         868         869         870         871         872         873         874         875         876         877         878         879         880         881         882         883         884         885         886         887         888         889         890         891         892         893         894         895         896         897         898         899         900         901         902         903         904         905         906         907         908         909         910         911         912         913         914         915         916         917         918         919         920         921         922         923         924         925         926         927         928         929         930         931         932         933         934         935         936         937         938         939         940         941         942         943         944         945         946         947         948         949         950         951         952         953         954         955         956         957         958         959         960         961         962         963         964         965         966         967         968         969         970         971         972         973         974         975         976         977         978         979         980         981         982         983         984         985         986         987         988         989         990         991         992         993         994         995         996         997         998         999        1000        1001        1002        1003        1004        1005        1006        1007        1008        1009        1010        1011        1012        1013        1014        1015        1016        1017        1018        1019        1020        1021        1022        1023        1024        1025        1026        1027        1028        1029        1030        1031        1032        1033        1034        1035        1036        1037        1038        1039        1040        1041        1042        1043        1044        1045        1046        1047        1048        1049        1050        1051        1052        1053        1054        1055        1056        1057        1058        1059        1060        1061        1062        1063        1064        1065        1066        1067        1068        1069        1070        1071        1072        1073        1074        1075        1076        1077        1078        1079        1080        1081        1082        1083        1084        1085        1086        1087        1088        1089        1090        1091        1092        1093        1094        1095        1096        1097        1098        1099        1100        1101        1102        1103        1104        1105        1106        1107        1108        1109        1110        1111        1112        1113        1114        1115        1116        1117        1118        1119        1120        1121        1122        1123        1124        1125        1126        1127        1128        1129        1130        1131        1132        1133        1134        1135        1136        1137        1138        1139        1140        1141        1142        1143        1144        1145        1146        1147        1148        1149        1150        1151        1152        1153        1154        1155        1156        1157        1158        1159        1160        1161        1162        1163        1164        1165        1166        1167        1168        1169        1170        1171        1172        1173        1174        1175        1176        1177        1178        1179        1180        1181        1182        1183        1184        1185        1186        1187        1188        1189        1190        1191        1192        1193        1194        1195        1196        1197        1198        1199        1200        1201        1202        1203        1204        1205        1206        1207        1208        1209        1210        1211        1212        1213        1214        1215        1216        1217        1218        1219        1220        1221        1222        1223        1224        1225        1226        1227        1228        1229        1230        1231        1232        1233        1234        1235        1236        1237        1238        1239        1240        1241        1242        1243        1244        1245        1246        1247        1248        1249        1250        1251        1252        1253        1254        1255        1256        1257        1258        1259        1260        1261        1262        1263        1264        1265        1266        1267        1268        1269        1270        1271        1272        1273        1274        1275        1276        1277        1278        1279        1280        1281        1282        1283        1284        1285        1286        1287        1288        1289        1290        1291        1292        1293        1294        1295        1296        1297        1298        1299        1300        1301        1302        1303        1304        1305        1306        1307        1308        1309        1310        1311        1312        1313        1314        1315        1316        1317        1318        1319        1320        1321        1322        1323        1324        1325        1326        1327        1328        1329        1330        1331        1332        1333        1334        1335        1336        1337        1338        1339        1340        1341        1342        1343        1344        1345        1346        1347        1348        1349        1350        1351        1352        1353        1354        1355        1356        1357        1358        1359        1360        1361        1362        1363        1364        1365        1366        1367        1368        1369        1370        1371        1372        1373        1374        1375        1376        1377        1378        1379        1380        1381        1382        1383        1384        1385        1386        1387        1388        1389        1390        1391        1392        1393        1394        1395        1396        1397        1398        1399        1400        1401        1402        1403        1404        1405        1406        1407        1408        1409        1410        1411        1412        1413        1414        1415        1416        1417        1418        1419        1420        1421        1422        1423        1424        1425        1426        1427        1428        1429        1430        1431        1432        1433        1434        1435        1436        1437        1438        1439        1440        1441        1442        1443        1444        1445        1446        1447        1448        1449        1450        1451        1452        1453        1454        1455        1456        1457        1458        1459        1460        1461        1462        1463        1464        1465        1466        1467        1468        1469        1470        1471        1472        1473        1474        1475        1476        1477        1478        1479        1480        1481        1482        1483        1484        1485        1486        1487        1488        1489        1490        1491        1492        1493        1494        1495        1496        1497        1498        1499        1500        1501        1502        1503        1504        1505        1506        1507        1508        1509        1510        1511        1512        1513        1514        1515        1516        1517        1518        1519        1520        1521        1522        1523        1524        1525        1526        1527        1528        1529        1530        1531        1532        1533        1534        1535        1536        1537        1538        1539        1540        1541        1542        1543        1544        1545        1546        1547        1548        1549        1550        1551        1552        1553        1554        1555        1556        1557        1558        1559        1560        1561        1562        1563        1564        1565        1566        1567        1568        1569        1570        1571        1572        1573        1574        1575        1576        1577        1578        1579        1580        1581        1582        1583        1584        1585        1586        1587        1588        1589        1590        1591        1592        1593        1594        1595        1596        1597        1598        1599        1600        1601        1602        1603        1604        1605        1606        1607        1608        1609        1610        1611        1612        1613        1614        1615        1616        1617        1618        1619        1620        1621        1622        1623        1624        1625        1626        1627        1628        1629        1630        1631        1632        1633        1634        1635        1636        1637        1638        1639        1640        1641        1642        1643        1644        1645        1646        1647        1648        1649        1650        1651        1652        1653        1654        1655        1656        1657        1658        1659        1660        1661        1662        1663        1664        1665        1666        1667        1668        1669        1670        1671        1672        1673        1674        1675        1676        1677        1678        1679        1680        1681        1682        1683        1684        1685        1686        1687        1688        1689        1690        1691        1692        1693        1694        1695        1696        1697        1698        1699        1700        1701        1702        1703        1704        1705        1706        1707        1708        1709        1710        1711        1712        1713        1714        1715        1716        1717        1718        1719        1720        1721        1722        1723        1724        1725        1726        1727        1728        1729        1730        1731        1732        1733        1734        1735        1736        1737        1738        1739        1740        1741        1742        1743        1744        1745        1746        1747        1748        1749        1750        1751        1752        1753        1754        1755        1756        1757        1758        1759        1760        1761        1762        1763        1764        1765        1766        1767        1768        1769        1770        1771        1772        1773        1774        1775        1776        1777        1778        1779        1780        1781        1782        1783        1784        1785        1786        1787        1788        1789        1790        1791        1792        1793        1794        1795        1796        1797        1798        1799        1800        1801        1802        1803        1804        1805        1806        1807        1808        1809        1810        1811        1812        1813        1814        1815        1816        1817        1818        1819        1820        1821        1822        1823        1824        1825        1826        1827        1828        1829        1830        1831        1832        1833        1834        1835        1836        1837        1838        1839        1840        1841        1842        1843        1844        1845        1846        1847        1848        1849        1850        1851        1852        1853        1854        1855        1856        1857        1858        1859        1860        1861        1862        1863        1864        1865        1866        1867        1868        1869        1870        1871        1872        1873        1874        1875        1876        1877        1878        1879        1880        1881        1882        1883        1884        1885        1886        1887        1888        1889        1890        1891        1892        1893        1894        1895        1896        1897        1898        1899        1900        1901        1902        1903        1904        1905        1906        1907        1908        1909        1910        1911        1912        1913        1914        1915        1916        1917        1918        1919        1920        1921        1922        1923        1924        1925        1926        1927        1928        1929        1930        1931        1932        1933        1934        1935        1936        1937        1938        1939        1940        1941        1942        1943        1944        1945        1946        1947        1948        1949        1950        1951        1952        1953        1954        1955        1956        1957        1958        1959        1960        1961        1962        1963        1964        1965        1966        1967        1968        1969        1970        1971        1972        1973        1974        1975        1976        1977        1978        1979        1980        1981        1982        1983        1984        1985        1986        1987        1988        1989        1990        1991        1992        1993        1994        1995        1996        1997        1998        1999        2000        2001        2002        2003        2004        2005        2006        2007        2008        2009        2010        2011        2012        2013        2014        2015        2016        2017        2018        2019        2020        2021        2022        2023        2024        2025        2026        2027        2028        2029        2030        2031        2032        2033        2034        2035        2036        2037        2038        2039        2040        2041        2042        2043        2044        2045        2046        2047        2048        2049        2050        2051        2052        2053        2054        2055        2056        2057        2058        2059        2060        2061        2062        2063        2064        2065        2066        2067        2068        2069        2070        2071        2072        2073        2074        2075        2076        2077        2078        2079        2080        2081        2082        2083        2084        2085        2086        2087        2088        2089        2090        2091        2092        2093        2094        2095        2096        2097        2098        2099        2100        2101        2102        2103        2104        2105        2106        2107        2108        2109        2110        2111        2112        2113        2114        2115        2116        2117        2118        2119        2120        2121        2122        2123        2124        2125        2126        2127        2128        2129        2130        2131        2132        2133        2134        2135        2136        2137        2138        2139        2140        2141        2142        2143        2144        2145        2146        2147        2148        2149        2150        2151        2152        2153        2154        2155        2156        2157        2158        2159        2160        2161        2162        2163        2164        2165        2166        2167        2168        2169        2170        2171        2172        2173        2174        2175        2176        2177        2178        2179        2180        2181        2182        2183        2184        2185        2186        2187        2188        2189        2190        2191        2192        2193        2194        2195        2196        2197        2198        2199        2200        2201        2202        2203        2204        2205        2206        2207        2208        2209        2210        2211        2212        2213        2214        2215        2216        2217        2218        2219        2220        2221        2222        2223        2224        2225        2226        2227        2228        2229        2230        2231        2232        2233        2234        2235        2236        2237        2238        2239        2240        2241        2242        2243        2244        2245        2246        2247        2248        2249        2250        2251        2252        2253        2254        2255        2256        2257        2258        2259        2260        2261        2262        2263        2264        2265        2266        2267        2268        2269        2270        2271        2272        2273        2274        2275        2276        2277        2278        2279        2280        2281        2282        2283        2284        2285        2286        2287        2288        2289        2290        2291        2292        2293        2294        2295        2296        2297        2298        2299        2300        2301        2302        2303        2304        2305        2306        2307        2308        2309        2310        2311        2312        2313        2314        2315        2316        2317        2318        2319        2320        2321        2322        2323        2324        2325        2326        2327        2328        2329        2330        2331        2332        2333        2334        2335        2336        2337        2338        2339        2340        2341        2342        2343        2344        2345        2346        2347        2348        2349        2350        2351        2352        2353        2354        2355        2356        2357        2358        2359        2360        2361        2362        2363        2364        2365        2366        2367        2368        2369        2370        2371        2372        2373        2374        2375        2376        2377        2378        2379        2380        2381        2382        2383        2384        2385        2386        2387        2388        2389        2390        2391        2392        2393        2394        2395        2396        2397        2398        2399        2400        2401        2402        2403        2404        2405        2406        2407        2408        2409        2410        2411        2412        2413        2414        2415        2416        2417        2418        2419        2420        2421        2422        2423        2424        2425        2426        2427        2428        2429        2430        2431        2432        2433        2434        2435        2436        2437        2438        2439        2440        2441        2442        2443        2444        2445        2446        2447        2448        2449        2450        2451        2452        2453        2454        2455        2456        2457        2458        2459        2460        2461        2462        2463        2464        2465        2466        2467        2468        2469        2470        2471        2472        2473        2474        2475        2476        2477        2478        2479        2480        2481        2482        2483        2484        2485        2486        2487        2488        2489        2490        2491        2492        2493        2494        2495        2496        2497        2498        2499        2500        2501        2502        2503        2504        2505        2506        2507        2508        2509        2510        2511        2512        2513        2514        2515        2516        2517        2518        2519        2520        2521        2522        2523        2524        2525        2526        2527        2528        2529        2530        2531        2532        2533        2534        2535        2536        2537        2538        2539        2540        2541        2542        2543        2544        2545        2546        2547        2548        2549        2550        2551        2552        2553        2554        2555        2556        2557        2558        2559        2560        2561        2562        2563        2564        2565        2566        2567        2568        2569        2570        2571        2572        2573        2574        2575        2576        2577        2578        2579        2580        2581        2582        2583        2584        2585        2586        2587        2588        2589        2590        2591        2592        2593        2594        2595        2596        2597        2598        2599        2600        2601        2602        2603        2604        2605        2606        2607        2608        2609        2610        2611        2612        2613        2614        2615        2616        2617        2618        2619        2620        2621        2622        2623        2624        2625        2626        2627        2628        2629        2630        2631        2632        2633        2634        2635        2636        2637        2638        2639        2640        2641        2642        2643        2644        2645        2646        2647        2648        2649        2650        2651        2652        2653        2654        2655        2656        2657        2658        2659        2660        2661        2662        2663        2664        2665        2666        2667        2668        2669        2670        2671        2672        2673        2674        2675        2676        2677        2678        2679        2680        2681        2682        2683        2684        2685        2686        2687        2688        2689        2690        2691        2692        2693        2694        2695        2696        2697        2698        2699        2700        2701        2702        2703        2704        2705        2706        2707        2708        2709        2710        2711        2712        2713        2714        2715        2716        2717        2718        2719        2720        2721        2722        2723        2724        2725        2726        2727        2728        2729        2730        2731        2732        2733        2734        2735        2736        2737        2738        2739        2740        2741        2742        2743        2744        2745        2746        2747        2748        2749        2750        2751        2752        2753        2754        2755        2756        2757        2758        2759        2760        2761        2762        2763        2764        2765        2766        2767        2768        2769        2770        2771        2772        2773        2774        2775        2776        2777        2778        2779        2780        2781        2782        2783        2784        2785        2786        2787        2788        2789        2790        2791        2792        2793        2794        2795        2796        2797        2798        2799        2800        2801        2802        2803        2804        2805        2806        2807        2808        2809        2810        2811        2812        2813        2814        2815        2816        2817        2818        2819        2820        2821        2822        2823        2824        2825        2826        2827        2828        2829        2830        2831        2832        2833        2834        2835        2836        2837        2838        2839        2840        2841        2842        2843        2844        2845        2846        2847        2848        2849        2850        2851        2852        2853        2854        2855        2856        2857        2858        2859        2860        2861        2862        2863        2864        2865        2866        2867        2868        2869        2870        2871        2872        2873        2874        2875        2876        2877        2878        2879        2880        2881        2882        2883        2884        2885        2886        2887        2888        2889        2890        2891        2892        2893        2894        2895        2896        2897        2898        2899        2900        2901        2902        2903        2904        2905        2906        2907        2908        2909        2910        2911        2912        2913        2914        2915        2916        2917        2918        2919        2920        2921        2922        2923        2924        2925        2926        2927        2928        2929        2930        2931        2932        2933        2934        2935        2936        2937        2938        2939        2940        2941        2942        2943        2944        2945        2946        2947        2948        2949        2950        2951        2952        2953        2954        2955        2956        2957        2958        2959        2960        2961        2962        2963        2964        2965        2966        2967        2968        2969        2970        2971        2972        2973        2974        2975        2976        2977        2978        2979        2980        2981        2982        2983        2984        2985        2986        2987        2988        2989        2990        2991        2992        2993        2994        2995        2996        2997        2998        2999        3000        3001        3002        3003        3004        3005        3006        3007        3008        3009        3010        3011        3012        3013        3014        3015        3016        3017        3018        3019        3020        3021        3022        3023        3024        3025        3026        3027        3028        3029        3030        3031        3032        3033        3034        3035        3036        3037        3038        3039        3040        3041        3042        3043        3044        3045        3046        3047        3048        3049        3050        3051        3052        3053        3054        3055        3056        3057        3058        3059        3060        3061        3062        3063        3064        3065        3066        3067        3068        3069        3070        3071        3072        3073        3074        3075        3076        3077        3078        3079        3080        3081        3082        3083        3084        3085        3086        3087        3088        3089        3090        3091        3092        3093        3094        3095        3096        3097        3098        3099        3100        3101        3102        3103        3104        3105        3106        3107        3108        3109        3110        3111        3112        3113        3114        3115        3116        3117        3118        3119        3120        3121        3122        3123        3124        3125        3126        3127        3128        3129        3130        3131        3132        3133        3134        3135        3136        3137        3138        3139        3140        3141        3142        3143        3144        3145        3146        3147        3148        3149        3150        3151        3152        3153        3154        3155        3156        3157        3158        3159        3160        3161        3162        3163        3164        3165        3166        3167        3168        3169        3170        3171        3172        3173        3174        3175        3176        3177        3178        3179        3180        3181        3182        3183        3184        3185        3186        3187        3188        3189        3190        3191        3192        3193        3194        3195        3196        3197        3198        3199        3200        3201        3202        3203        3204        3205        3206        3207        3208        3209        3210        3211        3212        3213        3214        3215        3216        3217        3218        3219        3220        3221        3222        3223        3224        3225        3226        3227        3228        3229        3230        3231        3232        3233        3234        3235        3236        3237        3238        3239        3240        3241        3242        3243        3244        3245        3246        3247        3248        3249        3250        3251        3252        3253        3254        3255        3256        3257        3258        3259        3260        3261        3262        3263        3264        3265        3266        3267        3268        3269        3270        3271        3272        3273        3274        3275        3276        3277        3278        3279        3280        3281        3282        3283        3284        3285        3286        3287        3288        3289        3290        3291        3292        3293        3294        3295        3296        3297        3298        3299        3300        3301        3302        3303        3304        3305        3306        3307        3308        3309        3310        3311        3312        3313        3314        3315        3316        3317        3318        3319        3320        3321        3322        3323        3324        3325        3326        3327        3328        3329        3330        3331        3332        3333        3334        3335        3336        3337        3338        3339        3340        3341        3342        3343        3344        3345        3346        3347        3348        3349        3350        3351        3352        3353        3354        3355        3356        3357        3358        3359        3360           1           2           3           4           5           6           7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210"]}, "code": "function mk_shift_z_SQ(LX,LY,LZ) result(shift_z_SQ) \n    integer, intent(in) :: LX, LY, LZ\n    integer :: shift_z_SQ(LX*LY*LZ)\n    integer :: x, y, z\n    forall(x=1:LX,y=1:LY,z=1:LZ)\n      shift_z_SQ( x + LX*((y-1) + LY*(z-1)) ) = &\n        x + LX*(y-1) + LX*LY*mod(z, LZ)\n    end forall\n  end function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function add1(a, b)\n    integer a, b, add1\n    add1 = a + b\n    return\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.00000000", "7.00000000", "5.00000000", "6.00000000", "6.00000000"]}, "code": "function add2(a, b)\n    integer a, b\n    add2 = a + b\n    return\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the Legendre polynomial of degree n at point x.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[0,0.5]", "case2": "[1,0.5]", "case3": "[2,0.5]", "case4": "[3,0.5]", "case5": "[4,0.5]", "result": ["1.0000000000000000", "0.50000000000000000", "-0.12500000000000000", "-0.43750000000000000", "-0.28906250000000000"]}, "code": "function legendre_p(n, x)\n\n      integer, intent(in) :: n\n      double precision, intent(in) :: x\n      integer :: k\n      double precision :: p, p1, p2, legendre_p\n\n      select case (n)\n      case (0)\n         legendre_p = dble(1.0)\n      case (1)\n         legendre_p = x\n      case default\n         p1 = x\n         p2 = dble(1.0)\n         do k = 2, n\n            p = ((2 * k - 1) * x * p1 - (k - 1) * p2) / k\n            p2 = p1\n            p1 = p\n         end do\n         legendre_p = p\n      end select\n\n   end function"}
{"instruction": "Use Fortran to create a function that takes up to nine generic arguments and returns a string containing their values separated by a specified separator.", "test_case": {"param_num": 9, "param_type": "real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]", "case2": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]", "case3": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,0.0]", "case4": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,0.0,0.0]", "case5": "[1.0,2.0,3.0,4.0,5.0,6.0,0.0,0.0,0.0]", "result": ["1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 8.0000000000000000 9.0000000000000000", "0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000", "1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 8.0000000000000000 0.0000000000000000", "1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 0.0000000000000000 0.0000000000000000", "1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000"]}, "code": "function msg(generic1, generic2, generic3, generic4, generic5, generic6, generic7, generic8, generic9,sep)\nimplicit none\n\nclass(*),intent(in),optional  :: generic1 ,generic2 ,generic3 ,generic4 ,generic5\nclass(*),intent(in),optional  :: generic6 ,generic7 ,generic8 ,generic9\ncharacter(len=*),intent(in),optional :: sep\ncharacter(len=:),allocatable  :: sep_local\ncharacter(len=:), allocatable :: msg\ncharacter(len=4096)           :: line\ninteger                       :: istart\ninteger                       :: increment\n   if(present(sep))then\n      sep_local=sep\n      increment=1+len(sep_local)\n   else\n      sep_local=' '\n      increment=2\n   endif\n\n   istart=1\n   line=' '\n   if(present(generic1))call print_generic(generic1)\n   if(present(generic2))call print_generic(generic2)\n   if(present(generic3))call print_generic(generic3)\n   if(present(generic4))call print_generic(generic4)\n   if(present(generic5))call print_generic(generic5)\n   if(present(generic6))call print_generic(generic6)\n   if(present(generic7))call print_generic(generic7)\n   if(present(generic8))call print_generic(generic8)\n   if(present(generic9))call print_generic(generic9)\n   msg=trim(line)\ncontains\n!===================================================================================================================================\nsubroutine print_generic(generic)\n!use, intrinsic :: iso_fortran_env, only : int8, int16, int32, biggest=>int64, real32, real64, dp=>real128\nuse,intrinsic :: iso_fortran_env, only : int8, int16, int32, int64, real32, real64, real128\nclass(*),intent(in) :: generic\n   select type(generic)\n      type is (integer(kind=int8));     write(line(istart:),'(i0)') generic\n      type is (integer(kind=int16));    write(line(istart:),'(i0)') generic\n      type is (integer(kind=int32));    write(line(istart:),'(i0)') generic\n      type is (integer(kind=int64));    write(line(istart:),'(i0)') generic\n      type is (real(kind=real32));      write(line(istart:),'(1pg0)') generic\n      type is (real(kind=real64));      write(line(istart:),'(1pg0)') generic\n      type is (real(kind=real128));     write(line(istart:),'(1pg0)') generic\n      type is (logical);                write(line(istart:),'(1l)') generic\n      type is (character(len=*));       write(line(istart:),'(a)') trim(generic)\n      type is (complex);                write(line(istart:),'(\"(\",1pg0,\",\",1pg0,\")\")') generic\n   end select\n   istart=len_trim(line)+increment\n   line=trim(line)//sep_local\nend subroutine print_generic\n!===================================================================================================================================\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given integer is in a given integer array.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[4,[1,2,3,4]]", "case3": "[3,[5,6,7]]", "case4": "[2,[1,2,3,4,5]]", "case5": "[6,[]]", "result": ["T", "T", "F", "T", "F"]}, "code": "function st_idx_in_array(idx, array) result(exists)\n!===============================================================================\n!  Return .true. if idx is in array\n   integer, intent(in) :: idx\n   integer, intent(in), dimension(:) :: array\n   logical :: exists\n   integer :: ii\n\n   exists = .false.\n   do ii = 1, size(array)\n      if (idx == array(ii)) then\n         exists = .true.\n         return\n      endif\n   enddo\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers x and y and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function add(x,y) result(z)\n  integer :: x,y\n  z = x+y\nend function"}
{"instruction": "Use Fortran to define a function that calculates the mixing ratio of water vapor in air given the relative humidity, temperature, and pressure.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[50.0, 273.0, 1000.0]", "case2": "[80.0, 293.0, 900.0]", "case3": "[100.0, 283.0, 800.0]", "case4": "[20.0, 263.0, 1100.0]", "case5": "[70.0, 303.0, 950.0]", "result": ["1.91396022", "13.1221914", "9.67647362", "0.323769301", "19.8074512"]}, "code": "function get_W(RH, T, P)\n\n! After Rogers and Yau. \n\n\treal*8, intent(in) :: RH, T, P\n\n\treal, parameter :: c = 4187.\n\treal, parameter :: cpv = 1870.\n\treal, parameter :: L0 = 2.501e6\n\treal, parameter :: T0 = 273.\n\t\n\treal :: L\n\treal :: esat\n\treal :: ws\n\treal :: W\n\t\n\tif (T < 235.) then \n\t\tL = 2.83e6   ! latent heat of ice, doesn't change very much\n\telse\n\t\tL = L0 - (c - cpv) * (T - T0) ! latent heat of water\n\tendif\n\t\n\tesat = 6.11657*exp((L/461.51)*(1/273. - 1/T) ) ! saturation vapor pressure in mb\n\n\tws = esat * 0.622 / (P - esat) ! saturation mixing ratio in kg/kg\n\n\tW = RH / 100. * ws ! mixing ratio in kg/kg\n\t\n\tget_W = W * 1000. ! mixing ratio in g/kg\n\t\n\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates the mixing ratio in g/kg given the dew point temperature, temperature, and pressure.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[273.15, 293.15, 1013.25]", "case2": "[283.15, 293.15, 1013.25]", "case3": "[273.15, 283.15, 1000.00]", "case4": "[273.15, 293.15, 900.00]", "case5": "[283.15, 293.15, 1000.00]", "result": ["55.3439865", "27.8261375", "15.6052341", "62.4934731", "28.2036438"]}, "code": "function get_W_from_Td( Td, T, P)\n\n\treal*8, intent(in) :: Td, T, P\n\n\treal, parameter :: c = 4187.\n\treal, parameter :: cpv = 1870.\n\treal, parameter :: L0 = 2.501e6\n\treal, parameter :: T0 = 273.\n\t\n\treal :: L\n\treal :: esat, esatW, RH\n\treal :: ws\n\treal :: W\n\t\n\tif (T < 235.) then \n\t\tL = 2.83e6   ! latent heat of ice, doesn't change very much\n\telse\n\t\tL = L0 - (c - cpv) * (T - T0) ! latent heat of water\n\tendif\n\t\n\tesat = 6.11657*exp((L/461.51)*(1/273. - 1/T) ) ! saturation vapor pressure in mb\n\tesatW = 6.11657*exp((L/461.51)*(1/273. - 1/Td) ) ! saturation vapor pressure in mb\n\n\tRH = esat / esatW * 100.\n\n\tws = esat * 0.622 / (P - esat) ! saturation mixing ratio in kg/kg\n\n\tW = RH / 100. * ws ! mixing ratio in kg/kg\n\t\n\tget_W_from_Td = W * 1000. ! mixing ratio in g/kg\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the number of days between a given date and January 1, 1900.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,1,1]", "case2": "[2021,2,28]", "case3": "[2020,2,29]", "case4": "[2000,12,31]", "case5": "[1900,1,1]", "result": ["737791", "737849", "737484", "730485", "693595"]}, "code": "function fairfield(y, m, d) result(nd)\n    integer, intent(in) :: y, m, d\n    integer :: y0, m0\n\n    if( m==1 .or. m==2 ) then\n      y0 = y - 1\n      m0 = m + 12\n    else  \n      y0 = y\n      m0 = m\n    end if\n\n    nd = 365*y0 + floor(y0/4.) - floor(y/100.) + floor(y/400.) + floor(306*(m0+1)/10.) + d - 428\n\n  end function"}
{"instruction": "Use Fortran to give me a function that takes in three integers and returns a 3D vector with components equal to the input integers divided by a variable \"len\"", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[10,-5,2]", "case5": "[2,4,6]", "result": ["Infinity                  Infinity                  Infinity", "NaN                       NaN                       NaN", "Infinity                  Infinity                  Infinity", "Infinity                 -Infinity                  Infinity", "Infinity                  Infinity                  Infinity"]}, "code": "function kvec(l,m,n)\n      double precision :: kvec(3)\n      integer, intent(in) :: l,m,n\n      kvec = real([l,m,n])/len\n    end function"}
{"instruction": "Use Fortran to give me a function that returns the value of i/j multiplied by j/i.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function eye(i,j)\n    integer, intent(in) :: i,j\n    eye = (i/j)*(j/i)\n  end function"}
{"instruction": "Use Fortran to create a function that calculates associated Legendre polynomials.", "test_case": {"param_num": 3, "param_type": "integer,integer,real*8", "case1": "[2,1,0.5]", "case2": "[3,2,0.8]", "case3": "[4,3,0.2]", "case4": "[5,4,0.9]", "case5": "[6,2,0.1]", "result": ["-1.2990381056766580", "4.3199999999999994", "-19.752685285803548", "30.703049999999980", "10.697754375000001"]}, "code": "function plm(l,m,x)\n!----------------------------------------------------\n! Subroutine:\n!   plm\n!\n! Purpose:\n!  Calculate assiociated Legendre polynomials      \n!----------------------------------------------------\n  implicit none\n  integer,parameter::dp=selected_real_kind(8) !double precision\n  integer::l,m\n  integer::i,ll\n  real(kind=dp)::x,fact,pll,pmm,pmmp1,somx2\n  real(kind=dp)::plm\n  IF((m.lt.0).or.(m.gt.l).or.(abs(x).gt.1.D0))THEN\n      WRITE(*,*) 'bad arguments in plm'\n  ENDIF\n  pmm=1.D0\n  if(m.gt.0)then\n     somx2=sqrt((1.D0-x)*(1.D0+x))\n     fact=1.D0\n     do 11 i=1,m\n        pmm=-pmm*fact*somx2\n        fact=fact+2.D0\n11   continue\n  endif\n  if(l.eq.m)then\n     plm=pmm\n  else\n     pmmp1=x*dble(2*m+1)*pmm\n     if(l.eq.m+1)then\n        plm=pmmp1\n     else\n        do 12 ll=m+2,l\n           pll=(x*dble(2*ll-1)*pmmp1-dble(ll+m-1)*pmm)/dble(ll-m)\n           pmm=pmmp1\n           pmmp1=pll\n12      continue\n        plm=pll\n     endif\n  endif\n  return\nend function"}
{"instruction": "Use Fortran to give me a function for adding two single-precision floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "6.00000000", "7.00000000"]}, "code": "function add_floats_lower(a,b) result(y)\n    real(kind=4), intent(in) :: a,b\n    real :: y\n    y = a+b\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an optional integer and returns the next copy number, updating the original copy number if an optional number is given.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "6", "4", "5", "5"]}, "code": "function next_copy_number(cnum, ncopies)\ninteger, intent(inout)        :: cnum\ninteger, intent(in), optional :: ncopies\ninteger :: next_copy_number\n\nif (present(ncopies)) then\n   next_copy_number = cnum + ncopies - 1\nelse\n   next_copy_number = cnum + 1\nendif\n\ncnum = next_copy_number\n\nend function"}
{"instruction": "Use Fortran to create a function that encodes the time given in hours, minutes, and seconds into a real number representing the fraction of a day.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,30,0]", "case2": "[12,0,0]", "case3": "[23,59,59]", "case4": "[0,0,0]", "case5": "[24,0,0]", "result": ["Infinity", "Infinity", "Infinity", "NaN", "Infinity"]}, "code": "function util_datetime_encodetime(hour, minute, second)\n        integer, intent(in) :: hour, minute, second\n        real(8) :: util_datetime_encodetime, s\n        if ((hour >= 0) .and. (minute >= 0) .and. (second >= 0)) then\n            s = (hour * 3600 + minute * 60 + second)\n            util_datetime_encodetime = s/real(secsperday)\n            return\n        end if\n        util_datetime_encodetime = 0\n    end function"}
{"instruction": "Use Fortran to create a function that takes a lowercase character as input and returns the uppercase version of that character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'z'", "case4": "'1'", "case5": "' '", "result": ["'", "'", "'", "'", "'"]}, "code": "function uppercase(str) result (strup)\n  character(len=1), intent(in) :: str\n  character(len=1) :: strup\n  strup=str\n  if ((ichar(str) >= ichar(\"a\")) .and. (ichar(str) <= ichar(\"z\"))) then \n     strup = char(ichar(\"A\")+ichar(str)-ichar(\"a\"))\n  end if\nend function"}
{"instruction": "Use Fortran to give me a function that converts a Roman numeral to an Arabic numeral.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'I'", "case2": "'IV'", "case3": "'IX'", "case4": "'XL'", "case5": "'MCMXCIV'", "result": ["1", "4", "9", "40", "1994"]}, "code": "function decode(roman) result(arabic)\n  character(*), intent(in) :: roman\n  integer :: i, n, lastval, arabic\n\n  arabic = 0\n  lastval = 0\n  do i = len(roman), 1, -1\n    select case(roman(i:i))\n      case ('M','m')\n        n = 1000\n      case ('D','d')\n        n = 500\n      case ('C','c')\n        n = 100\n      case ('L','l')\n        n = 50\n      case ('X','x')\n        n = 10\n      case ('V','v')\n        n = 5\n      case ('I','i')\n        n = 1\n      case default\n        n = 0\n    end select\n    if (n < lastval) then\n      arabic = arabic - n\n    else\n      arabic = arabic + n\n    end if\n    lastval = n\n  end do\nend function"}
{"instruction": "Use Fortran to create a function that takes in a year, month, and day and returns the Julian day.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,8,9]", "case2": "[2022,1,1]", "case3": "[2020,12,31]", "case4": "[2021,2,28]", "case5": "[2020,2,29]", "result": ["221", "1", "366", "59", "60"]}, "code": "function julian(iyr,mon,iday)\n!**********************************************************************\n! given year, month, and day, function returns Julian day\n! version Aug 08, 2021, by D.-J. Seo at UTA/HWRL\n!\n  dimension isumn(12),isuml(12)\n  data isumn/0,31,59,90,120,151,181,212,243,273,304,334/\n  data isuml/0,31,60,91,121,152,182,213,244,274,305,335/\n  yr=iyr\n  if(iyr/4-yr/4..eq.0.) then\n  julian=isuml(mon)+iday\n  else\n  julian=isumn(mon)+iday\n  endif\n\n  return\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the number of electrons per element based on the number of elements and the number of theta points.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[20,10]", "case3": "[30,15]", "case4": "[40,20]", "case5": "[50,25]", "result": ["1", "1", "1", "1", "1"]}, "code": "function get_npelec(ntheta, nel)\n  integer, intent(in) :: ntheta, nel\n  integer :: get_npelec\n\n  get_npelec = 2*ntheta/nel/3\n  return\nend function"}
{"instruction": "Use Fortran to create a function that counts the number of occurrences of a substring within a string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello world', 'l']", "case2": "['banana', 'a']", "case3": "['racecar', 'r']", "case4": "['programming', 'g']", "case5": "['fortran', 'z']", "result": ["4.00000000", "4.00000000", "3.00000000", "3.00000000", "0.00000000"]}, "code": "function occurrences(a,b)\n    character(len=*), intent(in) :: a, b\n    integer :: i, j, n\n    n = 0\n    i = 0\n    j = index(a, b)\n    do while (0 .lt. j)\n      n = n+1\n      i = i+len(b)+j-1\n      j = index(a(i:), b)\n    end do\n    occurrences = n\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns 1.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "1", "1", "1", "1"]}, "code": "function real_add(a,b)\n         integer :: real_add\n         integer, intent(in) :: a,b\n         real_add = 1\n      end function"}
{"instruction": "Use Fortran to give me a function that combines two strings by removing any trailing spaces from the first string and adding the second string to it.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','programming'", "case3": "'','fortran'", "case4": "'python','is fun'", "case5": "'',''", "result": ["helloworld", "fortranprogramming", "fortran", "pythonis fun", ""]}, "code": "function combine_strings(a,b) result(c)\n    implicit none\n    character(len=*), intent(in) :: a\n    character(len=*), intent(in) :: b\n    character(len=len_trim(a)+len_trim(b)) :: c\n    c=trim(a)//trim(adjustl(b))\n  end function"}
{"instruction": "Use Fortran to create a function that pads a given string with spaces to a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',10", "case2": "'world',5", "case3": "'fortran',7", "case4": "'test',3", "case5": "'pad',4", "result": ["hello", "world", "fortran", "test", "pad"]}, "code": "function pad(line,length) result(strout)\ncharacter(len=*),intent(in)                :: line\ninteger,intent(in)                         :: length\ncharacter(len=max(length,len(trim(line)))) :: strout ! do not truncate\n   strout=line\nend function"}
{"instruction": "Use Fortran to create a function that adds an extension to a filename, taking into account whether or not the filename already has a dot in it.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['file.txt','.dat']", "case2": "['file','.txt']", "case3": "['file.txt','']", "case4": "['file.txt','.']", "case5": "['file.txt','_new']", "result": ["file.txt.dat", "file.txt", "file.txt", "file.txt.", "file.txt_new"]}, "code": "function filedir_add_extension ( filename , extension ) result (newname)\r\n    character(len=*), intent(in)             :: filename\r\n    character(len=*), intent(in)             :: extension\r\n    ! Caution !\r\n    ! The length of the new file is greater that the length of the original file !\r\n    ! This is why the logic must be kept simple :\r\n    ! if one takes into account that the extension may or may not include\r\n    ! 1 dot, the length of the new file is not predictible, that is\r\n    ! may be len(filename)+len(extension) or len(filename)+len(extension) + 1,\r\n    ! which would lead to memory errors if the file names have just the right size.\r\n    character(len=len(filename)+len(extension)) :: newname\r\n    integer :: kdot\r\n    integer :: length_trimmed\r\n    kdot    = index( filename , '.', .true. )\r\n    length_trimmed = len_trim(filename)\r\n    if ( kdot == length_trimmed ) then\r\n       ! The file name ends with a dot, so we do not add one.\r\n       newname = trim(filename(1:kdot-1))//trim(extension)\r\n    else\r\n       newname = trim(filename)//trim(extension)\r\n    endif\r\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the carbon respired per second by a tissue, given its carbon and nitrogen content, and several parameters, and convert it to grams of carbon per day.", "test_case": {"param_num": 6, "param_type": "real*8,real*8,real*8,real*8,real*8,real*8", "case1": "[0.5,0.07,0.5,0.5,0.5,0.5]", "case2": "[0.0,0.0,0.5,0.5,0.5,0.5]", "case3": "[0.5,0.07,0.5,0.5,0.5,0.0]", "case4": "[0.5,0.07,0.5,0.5,0.5,0.5]", "case5": "[0.5,0.07,0.5,0.5,0.5,0.5]", "result": ["0", "0", "0", "0", "0"]}, "code": "function  mass_resp(tissueC,tissueN,resp_parm1,resp_parm2,resp_parm3,twq) \n  \tdouble precision, intent(in) ::   tissueC,tissueN,resp_parm1,resp_parm2,twq,resp_parm3 \n  \tdouble precision :: total_biomass,mmolesN_per_biomass,nmolesC_per_biomass_per_sec, &\n  \t\t\t\t\t\tgC_per_biomass_per_sec,gC_per_sec\n  \t\t\t\t\t\t\n    if(tissueC > 0.0 .AND. tissueN > 0.0) then\n      total_biomass = tissueC/0.5\n      mmolesN_per_biomass = ((tissueN/14.)*1000)/total_biomass\n      \n      !nmolesC_per_biomass_per_sec =exp(mass_param1+mass_param2*log(mmolesN_per_biomass))\n      nmolesC_per_biomass_per_sec = resp_parm1 + log10(mmolesN_per_biomass)*resp_parm2\n      gC_per_biomass_per_sec =((10**nmolesC_per_biomass_per_sec)/10**9)*12.\n      gC_per_sec = gC_per_biomass_per_sec * total_biomass\n      mass_resp = gC_per_sec * (60.*60.*24.) \n      !print *, mmolesN_per_biomass,10**nmolesC_per_biomass_per_sec\n      !nmolesC_per_biomass_per_sec = resp_parm1 * (mmolesN_per_biomass ** resp_parm2)\n      !gC_per_biomass_per_sec =(nmolesC_per_biomass_per_sec/10**9)*12.\n      !gC_per_sec = gC_per_biomass_per_sec * total_biomass\n      !mass_resp = gC_per_sec * (60.*60.*24.) \n      !print *, mmolesN_per_biomass,nmolesC_per_biomass_per_sec\n    else\n      mass_resp = 0.0\n    endif\nend function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns a corresponding integer based on the values of the inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[3,2]", "case4": "[1,3]", "case5": "[2,2]", "result": ["1", "4", "4", "5", "2"]}, "code": "function strain_index(i, j)\n    integer, intent(in) :: i, j\n    integer :: strain_index\n\n    if (i == j) strain_index = i\n    if ((i == 2 .and. j == 3) .or. (i == 3 .and. j == 2)) strain_index = 4\n    if ((i == 3 .and. j == 1) .or. (i == 1 .and. j == 3)) strain_index = 5\n    if ((i == 1 .and. j == 2) .or. (i == 2 .and. j == 1)) strain_index = 6\n  end function"}
{"instruction": "Use Fortran to define a function that takes a string as input, creates a new string with half the length of the input string, and returns an empty string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world!','world!'", "case2": "'fortran is fun','is fun'", "case3": "'testing',''", "case4": "'1234567890','67890'", "case5": "'abcdefg','cde'", "result": ["", "", "", "", ""]}, "code": "function f2 (string1, string2)\n  character (len = *) :: string1\n  character (len = len (string1) - 20) :: string2\n  character (len = len (string1) + len (string2) / 2) :: f2\n  f2 = ''\nend function"}
{"instruction": "Use Fortran to create a function that returns the remainder of i divided by j, or -1 if j is equal to 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[0,5]", "case3": "[7,0]", "case4": "[15,4]", "case5": "[20,6]", "result": ["1", "0", "-1", "3", "2"]}, "code": "function mymod(i,j)\n  integer mymod,i,j\n  if(j .eq. 0)then\n      mymod=-1\n  else\n      mymod=mod(i,j)\n  endif\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given string starts with a given substring.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world','hello'", "case2": "'fortran programming','fortran'", "case3": "'python programming','fortran'", "case4": "'','fortran'", "case5": "'fortran programming',''", "result": ["T", "T", "F", "F", "T"]}, "code": "function string_starts_with(str, substring) result(result)\n    character(len=*), intent(in) :: str, substring\n    logical :: result\n\n    result = index(str, substring) == 1\nend function"}
{"instruction": "Use Fortran to define a function that converts t/phi from Boyer-Lindquist coordinates to Kerr-Schild coordinates.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[1.0,2.0,0.5]", "case2": "[3.0,4.0,0.8]", "case3": "[3.5,2.5,0.2]", "case4": "[5.0,1.0,0.9]", "case5": "[2.5,4.5,0.1]", "result": ["NaN", "3.5873071943958510", "2.4154794340134678", "0.77410297496970015", "4.4197248323251230"]}, "code": "function bl2ks_phi_single(r,x,a) result(xtilde)\n        real(kind=8), intent(in) :: r,x\n        real(kind=8), intent(in) :: a\n        real(kind=8) :: xtilde\n        ! Function to convert t/phi from Boyer-Lindquist coordinates to Kerr-Schild coordinates as shown in PF98 and FIP99\n        xtilde=x+a/(2d0*sqrt(1.-a**2))*log((r-1.-sqrt(1.-a**2))/(r-1.+sqrt(1.-a**2)))\n        end function"}
{"instruction": "Use Fortran to give me a function that performs a 64-bit left rotation of an integer x by r bits.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["4.00000000", "48.0000000", "12.0000000", "10.0000000", "32.0000000"]}, "code": "function rotl_64(x,r)\n!==========================================================\n   integer, intent(in) :: x, r\n   rotl_64 = ior(shiftl(x,r),shiftr(x,64-r))\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the coagulation rate of particles given their size, radius of gyration, and flag value.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,0]", "case2": "[3.0,4.0,1]", "case3": "[3.0,2.0,1]", "case4": "[5.0,1.0,0]", "case5": "[2.0,4.0,1]", "result": ["0.0000000000000000        0.0000000000000000", "NaN                       NaN", "NaN                       NaN", "0.0000000000000000        0.0000000000000000", "NaN                       NaN"]}, "code": "function coag(sd,rg,flag)\n\t\t\n\t\tdouble precision :: sd,rg,M0\n\t\tinteger :: flag\n        double precision :: b0, b2, c1, c2, lnsig, b5, com0fm, com0cn, com2fm, com2cn, com0, com2\n\t\tdouble precision, dimension(2) :: coag\n\t\t\n\t\tif ((flag == 0) .OR. (sd <= 1e-5) .OR. (rg <= 1e-15)) then\n\t\t\tcoag(1) = 0.0\n\t\t\tcoag(2) = 0.0\n  \n\t\t\n\t\telse\n\t\t\tb0 = 0.633 + 0.092*sd*sd - 0.022*sd*sd*sd\n\t\t\tb2 = 0.39 + 0.5*sd - 0.214*sd*sd + 0.029*sd*sd*sd\n\t\t\tc1 = (6.0*kb*T*rg/rho)**(1.0/2)\n\t\t\tc2 = 2.0*kb*T/(3.0*mu)\n\t\t\t\n\t\t\tlnsig = log(sd)*log(sd)\n\t\t\tb5 = 1.257\n\t\t\t\n\t\t\tcom0fm = c1 * b0 * ( exp(25.0/8* lnsig) + 2.0*exp(5.0/8*lnsig) + exp(1.0/8*lnsig) ) \n\t\t\tcom0cn = c2 * ( 1.0 + exp(lnsig) + b5 * (lam/rg) * exp(1.0/2 * lnsig) * (1.0 + exp(2.0*lnsig)) )\n\t\t\t\n\t\t\tcom2fm = 2.0 * c1 * b2 * exp(3.0/2*lnsig) * ( exp(25.0/8* lnsig) + 2.0*exp(5.0/8*lnsig) + exp(1.0/8*lnsig) )\n\t\t\tcom2cn = 2.0 * c2 * ( 1.0 + exp(lnsig) + b5 * (lam/rg) * exp(-1.0/2 * lnsig) * (1.0 + exp(-2.0*lnsig)))\n\t\t\t\n\t\t\tcom0 = (com0fm * com0cn) / (com0fm + com0cn) \n\t\t\tcom2 = (com2fm * com2cn) / (com2fm + com2cn)\n\t\t\tcoag(1) = com0\n\t\t\tcoag(2) = com2\n\t\tend if\n    end function"}
{"instruction": "Use Fortran to give me a function for a+b that takes in two real numbers of kind 4 and returns their sum.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.5,1.5]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "7.00000000", "7.00000000"]}, "code": "function add_r4(a,b)\n          real(KIND=4), intent (in) :: a, b\n          add_r4=a+b\n      end function"}
{"instruction": "Use Fortran to give me a function that returns true if a is greater than b, and false otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["F", "F", "T", "T", "F"]}, "code": "function greater_i(a,b) result(r)\n    logical :: r\n    integer, intent(in) :: a, b\n    r = a > b\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the binomial coefficient C(N,K) as an R8.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[0,0]", "case4": "[7,7]", "case5": "[15,5]", "result": ["10.000000000000000", "120.00000000000000", "1.0000000000000000", "1.0000000000000000", "3003.0000000000000"]}, "code": "function r8_choose ( n, k )\n\n!*****************************************************************************80\n!\n!! R8_CHOOSE computes the binomial coefficient C(N,K) as an R8.\n!\n!  Discussion:\n!\n!    The value is calculated in such a way as to avoid overflow and\n!    roundoff.  The calculation is done in R8 arithmetic.\n!\n!    The formula used is:\n!\n!      C(N,K) = N! / ( K! * (N-K)! )\n!\n!  Licensing:\n!\n!    This code is distributed under the GNU LGPL license.\n!\n!  Modified:\n!\n!    24 March 2008\n!\n!  Author:\n!\n!    John Burkardt\n!\n!  Reference:\n!\n!    ML Wolfson, HV Wright,\n!    Algorithm 160:\n!    Combinatorial of M Things Taken N at a Time,\n!    Communications of the ACM,\n!    Volume 6, Number 4, April 1963, page 161.\n!\n!  Parameters:\n!\n!    Input, integer ( kind = 4 ) N, K, are the values of N and K.\n!\n!    Output, real ( kind = 8 ) R8_CHOOSE, the number of combinations of N\n!    things taken K at a time.\n!\n  implicit none\n\n  integer ( kind = 4 ) i\n  integer ( kind = 4 ) k\n  integer ( kind = 4 ) mn\n  integer ( kind = 4 ) mx\n  integer ( kind = 4 ) n\n  real ( kind = 8 ) r8_choose\n  real ( kind = 8 ) value\n\n  mn = min ( k, n - k )\n\n  if ( mn < 0 ) then\n\n    value = 0.0D+00\n\n  else if ( mn == 0 ) then\n\n    value = 1.0D+00\n\n  else\n\n    mx = max ( k, n - k )\n    value = real ( mx + 1, kind = 8 )\n\n    do i = 2, mn\n      value = ( value * real ( mx + i, kind = 8 ) ) / real ( i, kind = 8 )\n    end do\n\n  end if\n\n  r8_choose = value\n\n  return\nend function"}
{"instruction": "Use Fortran to define a function that takes two single precision real numbers as input and returns their product as a double precision real number.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["2.0000000000000000", "15.750000000000000", "6.0000000000000000", "5.0000000000000000", "11.250000000000000"]}, "code": "function specific__dprod_r8 (p1, p2)\n   real (kind=4), intent (in) :: p1, p2\n   real (kind=8) :: specific__dprod_r8\n\n   specific__dprod_r8 = dprod (p1, p2)\nend function"}
{"instruction": "Use Fortran to create a function that replaces all occurrences of a target substring with a new substring in a given string.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'good morning','morning','afternoon'", "case3": "'apple','p','q'", "case4": "'banana','a','b'", "case5": "'fortran is fun','is','is not'", "result": ["", "", "", "", ""]}, "code": "function replace(str, tarstr, substr) result(res)\n        character(len=*),intent(in) :: str\n        character(len=*),intent(in) :: tarstr\n        character(len=*),intent(in) :: substr\n        character(len=:),allocatable :: res\n    end function"}
{"instruction": "Use Fortran to create a function that replaces all occurrences of a target string with a new substring in a given string.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'this is a test','is','was'", "case3": "'testing','ing','ed'", "case4": "'123456789','5','0'", "case5": "'testing','ing','ing and more ing'", "result": ["", "", "", "", ""]}, "code": "function replace_all(str, tarstr, substr) result(res)\n        character(len=*),intent(in) :: str\n        character(len=*),intent(in) :: tarstr\n        character(len=*),intent(in) :: substr\n        character(len=:),allocatable :: res\n    end function"}
{"instruction": "Use Fortran to define a function that calculates the HPA (Height of Peak Above the local background) given two input parameters a and e.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.5]", "case4": "[5.5,1.5]", "case5": "[2.5,4.0]", "result": ["0.39526386966470051", "0.33891455761562583", "0.37739067808837690", "0.41249181962653791", "0.34691496364570740"]}, "code": "function hpa (a, e)\n\n! ======================================================================\n!\n!    \"Last\" change: 13-AUG-2003 by NVMokhov\n!    Edited by A. J. Sierk, LANL T-16, October, 2003.\n!    Edited by AJS, LANL T-2, December, 2011.\n!\n! ======================================================================\n\n    use, intrinsic:: iso_fortran_env, only: int32, real64\n\n    implicit none\n    real(real64),   intent(in   ) :: a\n    real(real64),   intent(in   ) :: e\n    real(real64)                  :: hpa\n\n    real(real64) :: aln, sha, z\n\n! ======================================================================\n\n    aln = log(a)\n    sha = 1.0663d0 - 0.0023d0*aln\n    z = log(e)\n    hpa = 0.0375d0*(z - 16.5d0) + sha*exp(-0.11d0*z)\n    return\n\n! ======================================================================\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns the result of a mathematical expression involving those inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[-2,5]", "case4": "[0,0]", "case5": "[100,-100]", "result": ["5.00000000", "7.00000000", "12.0000000", "3.00000000", "-97.0000000"]}, "code": "function bar(i,j)\n    integer, intent(in) :: i,j\n    bar = 3 - i + 1 * abs(i) + j\n  end function"}
{"instruction": "Use Fortran to create a function that converts a specified range of characters in a string to lowercase.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "'Hello World',1,5", "case2": "'Fortran is Fun',7,9", "case3": "'Testing',2,6", "case4": "'123456789',3,8", "case5": "'Testing',1,7", "result": ["hello World", "Fortran is Fun", "Testing", "123456789", "testing"]}, "code": "function lower(str,begin,end) result (string)\n    ! Changes a string to lowercase over specified range\n    ! Author: John S. Urban\n    ! License: Public Domain\n\n    character(*), intent(In)     :: str\n    character(len(str))          :: string\n    integer,intent(in),optional  :: begin, end\n    integer                      :: i\n    integer                      :: ibegin, iend\n    string = str\n\n    ibegin = 1\n    if (present(begin))then\n        ibegin = max(ibegin,begin)\n    endif\n\n    iend = len_trim(str)\n    if (present(end))then\n        iend= min(iend,end)\n    endif\n\n    do i = ibegin, iend                               ! step thru each letter in the string in specified range\n        select case (str(i:i))\n        case ('A':'Z')\n            string(i:i) = char(iachar(str(i:i))+32)     ! change letter to miniscule\n        case default\n        end select\n    end do\n\nend function"}
{"instruction": "Use Fortran to create a function that counts the number of times a substring appears in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'world','o'", "case3": "'fortran','fort'", "case4": "'','a'", "case5": "'hello','world'", "result": ["1", "1", "1", "0", "0"]}, "code": "function countsubstring(s1, s2) result(c)\n  character(*), intent(in) :: s1, s2\n  integer :: c, p, posn\n\n  c = 0\n  if(len(s2) == 0) return\n  p = 1\n  do\n    posn = index(s1(p:), s2)\n    if(posn == 0) return\n    c = c + 1\n    p = p + posn + len(s2)\n  end do\nend function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[5,5]", "case4": "[0,0]", "case5": "[10,10]", "result": ["1", "0", "1", "1", "1"]}, "code": "function krondelta(i,j) result(k)\n\n    integer, intent(in) :: i,j\n    integer :: k\n\n    if (i == j) then\n        k = 1\n    else\n        k = 0\n    end if\n\nend function"}
{"instruction": "Use Fortran to create a function that checks if a is divisible by b and returns 1 if it is and 0 if it is not.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,2]", "case2": "[15,3]", "case3": "[20,7]", "case4": "[100,5]", "case5": "[50,10]", "result": ["1", "1", "0", "1", "1"]}, "code": "function isintegerdivisible(a,b) result(c)\n\n    integer, intent(in) :: a,b\n    integer :: c\n\n    if (mod(a,b) == 0) then\n        c = 1\n    else\n        c = 0\n    end if\n\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is alphanumeric.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'A'", "case5": "'&'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_alphanum(c)\n      character(len=1), intent(in) :: c !! The character to test.\n      is_alphanum = (c >= '0' .and. c <= '9') .or. (c >= 'a' .and. c <= 'z') &\n          .or. (c >= 'A' .and. c <= 'Z')\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an ASCII character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'A'", "case3": "'1'", "case4": "'!'", "case5": "' '", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_ascii(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    is_ascii = iachar(c) <= z'7F'\n  end function"}
{"instruction": "Use Fortran to create a function that tests whether a given character is a control character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_control(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    integer :: ic\n    ic = iachar(c)\n    is_control = ic < z'20' .or. ic == z'7F'\n  end function"}
{"instruction": "Use Fortran to give me a function that tests if a given character is a digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_digit(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    is_digit = ('0' <= c) .and. (c <= '9')\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an octal digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'0'", "case2": "'1'", "case3": "'2'", "case4": "'3'", "case5": "'8'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_octal_digit(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    is_octal_digit = (c >= '0') .and. (c <= '7');\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a hexadecimal digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'0'", "case2": "'9'", "case3": "'a'", "case4": "'F'", "case5": "'g'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_hex_digit(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    is_hex_digit = (c >= '0' .and. c <= '9') .or. (c >= 'a' .and. c <= 'f') &\n        .or. (c >= 'A' .and. c <= 'F')\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a graphical character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "' '", "case3": "'/'", "case4": "'0'", "case5": "'z'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_graphical(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    integer :: ic\n    ic = iachar(c) !  '!'                     '~'\n    is_graphical = (z'21' <= ic) .and. (ic <= z'7E')\n  end function"}
{"instruction": "Use Fortran to create a function that tests whether a given character is printable or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'?'", "case4": "'/'", "case5": "'9'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_printable(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    integer :: ic\n    ic = iachar(c)                    ! '~'\n    is_printable = c >= ' ' .and. ic <= z'7E'\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a lowercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_lower(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    is_lower = (c >= 'a') .and. (c <= 'z')\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an uppercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'a'", "case3": "'Z'", "case4": "'z'", "case5": "'1'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_upper(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    ! is_upper = (c >= 'A') .and. (c <= 'Z')\n    is_upper = (c <= 'Z') .and. (c >= 'A')\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a whitespace character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_white(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    integer :: ic\n    ic = iachar(c)             ! TAB, LF, VT, FF, CR\n    is_white = (c == ' ') .or. (ic >= z'09' .and. ic <= z'0D');\n  end function"}
{"instruction": "Use Fortran to give me a function that tests if a character is a blank space or a tab.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'\\t'", "case4": "'\\n'", "case5": "'\\r'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_blank(c)\n    character(len=1), intent(in) :: c !! The character to test.        \n    is_blank = (c == ' ') .or. (iachar(c) == 9);\n  end function"}
{"instruction": "Use Fortran to give me a function that returns a if a is positive, and b+a if a is negative.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[-1,2]", "case4": "[5,1]", "case5": "[0,4]", "result": ["1.00000000", "3.00000000", "1.00000000", "5.00000000", "0.00000000"]}, "code": "function wrap(a,b)\n\tinteger a,b\n\t\t\n\twrap = a\t\n\tif (a.lt.0) wrap = b+a\n\t\t\n\tend function"}
{"instruction": "Use Fortran to give me a function that calculates the square root of the sum of the squares of a/2 and b-(ny/2).", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[10,20,30]", "case5": "[1000,2000,3000]", "result": ["1.00000000", "0.00000000", "70.7106781", "7.07106781", "707.106812"]}, "code": "function radft(a,b,ny)\n\tinteger a,b\n\treal r\n\t\n\ta=a/2\n\tb=b-(ny/2)\n\tr=(a*a + b*b) \t\n\t\t\n\tradft = sqrt(r)\n\t\n\t\t\n\tend function"}
{"instruction": "Use Fortran to create a function that maps beta coefficients for a linear mixed effects model with categorical and continuous predictors.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer(:)", "case1": "[2,3,4,[1,2,3]]", "case2": "[5,2,3,[4,5,6]]", "case3": "[1,1,1,[0]]", "case4": "[3,4,2,[1,2,3,4]]", "case5": "[2,2,1,[5]]", "result": ["1           1           0           0           0           2           2           0           0           0           2           3           0           0           0           3           4           0           0           0           3           5           0           0           0           3           6           0           0           0           1           1           1           0           0           1           1           2           0           0           1           1           3           0           0           2           2           1           0           0           2           2           2           0           0           2           2           3           0           0           2           3           1           0           0           2           3           2           0           0           2           3           3           0           0           3           4           1           0           0           3           4           2           0           0           3           4           3           0           0           3           5           1           0           0           3           5           2           0           0           3           5           3           0           0           3           6           1           0           0           3           6           2           0           0           3           6           3           0           0           0           0           1           0           1           0           0           2           0           1           0           0           1           0           2           0           0           2           0           2           0           0           1           0           3           0           0           2           0           3           0           0           1           0           4           0           0           2           0           4           0           0           1           1           1           0           0           2           1           1           0           0           2           2           1           0           0           1           1           2           0           0           2           1           2           0           0           2           2           2           0           0           1           1           3           0           0           2           1           3           0           0           2           2           3           0           0           1           1           4           0           0           2           1           4           0           0           2           2           4", "1           1           0           0           0           1           2           0           0           0           1           3           0           0           0           1           4           0           0           0           2           5           0           0           0           2           6           0           0           0           2           7           0           0           0           2           8           0           0           0           2           9           0           0           0           3          10           0           0           0           3          11           0           0           0           3          12           0           0           0           3          13           0           0           0           3          14           0           0           0           3          15           0           0           0           1           1           1           0           0           1           1           2           0           0           1           2           1           0           0           1           2           2           0           0           1           3           1           0           0           1           3           2           0           0           1           4           1           0           0           1           4           2           0           0           2           5           1           0           0           2           5           2           0           0           2           6           1           0           0           2           6           2           0           0           2           7           1           0           0           2           7           2           0           0           2           8           1           0           0           2           8           2           0           0           2           9           1           0           0           2           9           2           0           0           3          10           1           0           0           3          10           2           0           0           3          11           1           0           0           3          11           2           0           0           3          12           1           0           0           3          12           2           0           0           3          13           1           0           0           3          13           2           0           0           3          14           1           0           0           3          14           2           0           0           3          15           1           0           0           3          15           2           0           0           0           0           1           0           1           0           0           2           0           1           0           0           3           0           1           0           0           4           0           1           0           0           5           0           1           0           0           1           0           2           0           0           2           0           2           0           0           3           0           2           0           0           4           0           2           0           0           5           0           2           0           0           1           0           3           0           0           2           0           3           0           0           3           0           3           0           0           4           0           3           0           0           5           0           3           0           0           1           1           1           0           0           2           1           1           0           0           2           2           1           0           0           3           1           1           0           0           3           2           1           0           0           3           3           1           0           0           4           1           1           0           0           4           2           1           0           0           4           3           1           0           0           4           4           1           0           0           5           1           1           0           0           5           2           1           0           0           5           3           1           0           0           5           4           1           0           0           5           5           1           0           0           1           1           2           0           0           2           1           2           0           0           2           2           2           0           0           3           1           2           0           0           3           2           2           0           0           3           3           2           0           0           4           1           2           0           0           4           2           2           0           0           4           3           2           0           0           4           4           2           0           0           5           1           2           0           0           5           2           2           0           0           5           3           2           0           0           5           4           2           0           0           5           5           2           0           0           1           1           3           0           0           2           1           3           0           0           2           2           3           0           0           3           1           3           0           0           3           2           3           0           0           3           3           3           0           0           4           1           3           0           0           4           2           3           0           0           4           3           3           0           0           4           4           3           0           0           5           1           3           0           0           5           2           3           0           0           5           3           3           0           0           5           4           3           0           0           5           5           3", "0           0           1           0           1           0           0           1           1           1", "1           1           0           0           0           2           2           0           0           0           2           3           0           0           0           3           4           0           0           0           3           5           0           0           0           3           6           0           0           0           4           7           0           0           0           4           8           0           0           0           4           9           0           0           0           4          10           0           0           0           1           1           1           0           0           1           1           2           0           0           1           1           3           0           0           1           1           4           0           0           2           2           1           0           0           2           2           2           0           0           2           2           3           0           0           2           2           4           0           0           2           3           1           0           0           2           3           2           0           0           2           3           3           0           0           2           3           4           0           0           3           4           1           0           0           3           4           2           0           0           3           4           3           0           0           3           4           4           0           0           3           5           1           0           0           3           5           2           0           0           3           5           3           0           0           3           5           4           0           0           3           6           1           0           0           3           6           2           0           0           3           6           3           0           0           3           6           4           0           0           4           7           1           0           0           4           7           2           0           0           4           7           3           0           0           4           7           4           0           0           4           8           1           0           0           4           8           2           0           0           4           8           3           0           0           4           8           4           0           0           4           9           1           0           0           4           9           2           0           0           4           9           3           0           0           4           9           4           0           0           4          10           1           0           0           4          10           2           0           0           4          10           3           0           0           4          10           4           0           0           0           0           1           0           1           0           0           2           0           1           0           0           3           0           1           0           0           1           0           2           0           0           2           0           2           0           0           3           0           2           0           0           1           1           1           0           0           2           1           1           0           0           2           2           1           0           0           3           1           1           0           0           3           2           1           0           0           3           3           1           0           0           1           1           2           0           0           2           1           2           0           0           2           2           2           0           0           3           1           2           0           0           3           2           2           0           0           3           3           2", "1           1           0           0           0           1           2           0           0           0           1           3           0           0           0           1           4           0           0           0           1           5           0           0           0           1           1           1           0           0           1           1           2           0           0           1           2           1           0           0           1           2           2           0           0           1           3           1           0           0           1           3           2           0           0           1           4           1           0           0           1           4           2           0           0           1           5           1           0           0           1           5           2           0           0           0           0           1           0           1           0           0           2           0           1           0           0           1           1           1           0           0           2           1           1           0           0           2           2           1"]}, "code": "function mapbeta(dimlatin,dimlatout, npred,numcat)\r\nimplicit none\r\ninteger,intent(in)::dimlatin,dimlatout,npred,numcat(:)\r\ninteger::mapbeta(5,sum(numcat)*(dimlatout+1)+npred*dimlatin*(dimlatin+3)/2)\r\n!\tposition, position1, cat, item, dimno, dim1, and pred are used as counters.\r\ninteger::cat,dimno,dim1,item,position,position1, pred\r\n\r\nposition=1\r\nmapbeta=0\r\n!\tIntercepts.\r\ndo item=1,size(numcat)\r\n\tdo cat=1,numcat(item)\r\n\t\tmapbeta(1,position)=item\r\n\t\tmapbeta(2,position)=position\r\n\t\tposition=position+1\r\n\tend do\r\nend do\r\n!\tSlopes.\r\nposition1=1\r\ndo item=1,size(numcat)\r\n\tdo cat=1,numcat(item)\r\n\t\tdo dimno=1,dimlatout\r\n\t\t\tmapbeta(1,position)=item\r\n\t\t\tmapbeta(2,position)=position1\t\r\n\t\t\tmapbeta(3,position)=dimno\r\n\t\t\tposition=position+1\r\n\t\tend do\r\n\t\tposition1=position1+1\r\n\tend do\r\nend do\r\n!\tLinear components\r\ndo pred=1,npred\r\n\tdo dimno=1,dimlatin\r\n\t\tmapbeta(3,position)=dimno\r\n\t\tmapbeta(5,position)=pred\r\n\t\tposition=position+1\r\n\tend do\r\nend do\r\n!\tQuadratic components\r\ndo pred=1,npred\r\n\tdo dimno=1,dimlatin\r\n\t\tdo dim1=1,dimno\r\n\t\t\tmapbeta(3,position)=dimno\r\n\t\t\tmapbeta(4,position)=dim1\r\n\t\t\tmapbeta(5,position)=pred\r\n\t\t\tposition=position+1\r\n\t\tend do\r\n\tend do\r\nend do\r\nreturn\r\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the hypotenuse of a right triangle given the lengths of its two legs.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[3.0,4.0]", "case2": "[5.0,12.0]", "case3": "[8.0,15.0]", "case4": "[7.0,24.0]", "case5": "[9.0,40.0]", "result": ["5.0000000000000000", "13.000000000000000", "17.000000000000000", "25.000000000000000", "41.000000000000000"]}, "code": "function pythag(a,b)\n   real(kind=8) :: a,b,pythag\n   real(kind=8) :: absa,absb\n      absa=dabs(a)\n      absb=dabs(b)\n      if(absa.gt.absb)then\n        pythag=absa*dsqrt(1.+(absb/absa)**2)\n      else\n        if(absb.eq.0.d0)then\n          pythag=0.d0\n        else\n          pythag=absb*sqrt(1.d0+(absa/absb)**2)\n        endif\n      endif\n      return\n\tend function"}
{"instruction": "Use Fortran to define a function that takes in two integer arguments l and m and returns an integer value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,0]", "case2": "[2,1]", "case3": "[3,3]", "case4": "[4,-2]", "case5": "[5,5]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function PlmIndex(l,m)\n            use iso_fortran_env, only: int32, dp=>real64\n            integer(int32) :: PlmIndex\n            integer(int32), intent(in) :: l, m\n        end function"}
{"instruction": "Use Fortran to define a function that takes in two integer inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function NGLQSHN(degree, n)\n            use iso_fortran_env, only: int32, dp=>real64\n            integer(int32) :: NGLQSHN\n            integer(int32), intent(in) :: degree, n\n        end function"}
{"instruction": "Use Fortran to define a function that takes in three integer inputs and returns an integer output.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[10,5,2]", "case4": "[100,50,25]", "case5": "[3,1,0]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function YilmIndexVector(i, l, m)\n            use iso_fortran_env, only: int32, dp=>real64\n            integer(int32) :: YilmIndexVector\n            integer(int32), intent(in) :: i, l, m\n        end function"}
{"instruction": "Use Fortran to give me a function that calculates the eigenvector of a 2x2 matrix given its elements a2, B11, B12, and B22.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0]", "case4": "[1.0,2.0,3.0,0.0]", "case5": "[0.0,1.0,0.0,1.0]", "result": ["-0.70710678118654746       0.70710678118654746", "0.0000000000000000        1.0000000000000000", "0.0000000000000000        1.0000000000000000", "0.31622776601683794       0.94868329805051377", "-1.0000000000000000        0.0000000000000000"]}, "code": "function get_eigenvector(a2, B11, B12, B22) result(evec)\n            double precision, intent(in) :: a2\n            double precision, intent(in) :: B11\n            double precision, intent(in) :: B12\n            double precision, intent(in) :: B22\n            double precision             :: evec(2)\n\n            evec(1) = a2 - B22\n            evec(2) = B12\n\n            if (dabs(evec(1)) + dabs(evec(2)) == zero) then\n                if (B11 > B22) then\n                    evec(1) = evec(1) + epsilon(evec(1))\n                else\n                    evec(2) = evec(2) + epsilon(evec(2))\n                endif\n            endif\n\n            evec = evec / norm2(evec)\n\n        end function"}
{"instruction": "Use Fortran to create a function that checks if a line is a comment or a null line.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'','world'", "case3": "'hello',''", "case4": "'',''", "case5": "'hello world','world hello'", "result": ["F", "F", "T", "F", "F"]}, "code": "function comment_or_nullline(linebuf,comment) result(tf)\n      character(len=*),intent(in) :: linebuf,comment\n      character(len=:),allocatable :: line\n      logical :: tf\n      allocate(line,source=trim(adjustl(linebuf))) !\u5de6\u5bc4\u305b\n      tf=scan(line,comment)==0.and.len(line).ne.0\n    end function"}
{"instruction": "Use Fortran to define a function that takes integer start and end points, integer base, and integer n and returns an integer array of length n or 0.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,10,5,2]", "case2": "[0,100,10,3]", "case3": "[1,1,1,10]", "case4": "[10,1,1,2]", "case5": "[1,100,100,10]", "result": ["7143760           0     7143760           0           0", "7012688           0     7012688           0           0           0           0           0           0           0", "7995728", "16646480", "16318800           0    16318800           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -100663046       41195    16318800           0    16318800           0           0           0           0           0"]}, "code": "function logspace_1_iint32_n_ibase(start, end, n, base) result(res)\n      integer, intent(in) :: start\n      integer, intent(in) :: end\n      integer, intent(in) :: n\n      integer, intent(in) :: base\n      ! integer endpoints + integer base = integer result\n      integer :: res(max(n, 0))\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns a real array of size y-x.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.4483252463612302E-317", "3.6102206771904898E-317", "", "", "3.9016324526831572E-317   3.8856563459592347E-317"]}, "code": "function bar (x, y)\n      integer, intent(in) :: x, y\n      real(kind=8), dimension((y-x)) :: bar\n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer array as input and returns a new array with each element multiplied by 2.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[0,-1,2,5]", "case3": "[100,200,300,400,500]", "case4": "[10,20,30,40,50,60,70]", "case5": "[1,2,3,4,5,6,7,8,9,10]", "result": ["2           4           6", "0          -2           4          10", "200         400         600         800        1000", "20          40          60          80         100         120         140", "2           4           6           8          10          12          14          16          18          20"]}, "code": "function twice(vec) result(vec2)\r\n! result size depends on argument size\r\ninteger, intent(in) :: vec(:)\r\ninteger             :: vec2(size(vec))\r\nvec2 = 2*vec\r\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer array as input and returns an integer array with the square of each element.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[0,-1,2,5]", "case3": "[100,200,300,400]", "case4": "[10,-20,30,-40,50]", "case5": "[0,0,0,0,0,0,0,0,0,0]", "result": ["16743632           0    16712016", "17006144           0    16974160           0", "7110208           0     7078224           0", "7765568           0     7733584           0          50", "14515808           0    14483792           0           0           0           0           0           0           0"]}, "code": "function square_v(x)\t\t!\"vector\" version\n    integer, dimension(:), intent(in) :: x\n    integer, dimension(size(x)) :: square_v\n    end function"}
{"instruction": "Use Fortran to create a function that checks if an integer is in a list of integers.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[4,[5,6,7,8]]", "case3": "[2,[1,3]]", "case4": "[5,[5,5,5,5,5]]", "case5": "[3,[0]]", "result": ["T", "F", "F", "T", "F"]}, "code": "function inlist(item,ilist)\n!!! dummy arguments\n    integer :: item,ilist(:)\n! local variables\n    integer :: n\n    logical :: inlist\n\n    inlist = .false.\n    do n=1,size(ilist)\n       if(item == ilist(n)) inlist = .true.\n    enddo\n\n  end function"}
{"instruction": "Use Fortran to create a function that compares two strings and returns an integer indicating which string is \"better\" based on length and alphabetical order.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'John','Doe'", "case2": "'Doe','John'", "case3": "'John','John'", "case4": "'Doe','Doe'", "case5": "'',''", "result": ["2", "1", "1", "1", "1"]}, "code": "function better_name(name1,name2)\ninteger better_name\ncharacter(len=*) name1,name2\n if(len_trim(name1)<len_trim(name2) .or. &\n   (len_trim(name1)==len_trim(name2) .and. trim(name1)<=trim(name2) ) ) then\n    better_name=1\n else\n    better_name=2\n end if\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the combination of n choose k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[0,0]", "case5": "[1,1]", "result": ["10", "120", "35", "1", "1"]}, "code": "function f_combination(n,k) result(nCk)\n    integer, intent(in) :: n, k\n    integer :: i\n    integer ::nCk\n\n    if(n < k)then\n      nCk = 0\n      return\n    end if\n\n    nCk=1\n    do i=1,k\n      nCk=nCk*(n-k+i)\n      nCk=nCk/i\n    end do\n\n  end function"}
{"instruction": "Use Fortran to create a function that returns the index of a 1D array that represents the (row, column) value of an N^2 symmetric array.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,3]", "case2": "[2,2,4]", "case3": "[3,3,5]", "case4": "[4,4,2]", "case5": "[5,5,1]", "result": ["1", "5", "10", "4", "-1"]}, "code": "function algor_symmetric_matrix_index(row,column,n)\n  ! symmetric so it doesn't actually matter which is row and which is column\n  ! these are just named to make things easier to compare with rest of code...\n  implicit none\n  integer,  intent(in)  ::  row, column, n\n  integer               ::  i, j\n  integer               ::  algor_symmetric_matrix_index\n\n  ! function gives index of a 1D array that represents\n  ! the (row, column) value of an N^2 symmetric array\n\n  ! need to use right i and j\n  if (row .le. column) then\n    ! upper triangle\n    i = row\n    j = column\n  else\n    ! lower triangle\n    i = column\n    j = row\n  end if\n\n  ! for upper triangle: index = row*N - row(row-1)/2 - N + col\n  algor_symmetric_matrix_index = i*n - (i*(i-1))/2 - n + j\nend function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["1", "1", "1", "1", "1"]}, "code": "function algor_kronecker_delta(i,j)\n    implicit none\n    integer,  intent(in)  ::  i, j\n    integer               ::  algor_kronecker_delta\n\n    if (i .ne. j) then\n      algor_kronecker_delta = 0\n    else\n      algor_kronecker_delta = 1\n    end if\nend function"}
{"instruction": "Use Fortran to give me a function that counts the number of times a substring appears in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'world','o'", "case3": "'fortran','z'", "case4": "'','a'", "case5": "'hello',''", "result": ["1", "1", "0", "0", "0"]}, "code": "function countsubstring(s1, s2) result(c)\n      character(*), intent(in) :: s1, s2\n      integer :: c, p, posn\n\n      c = 0\n      if(len(s2) == 0) return\n      p = 1\n      do\n        posn = index(s1(p:), s2)\n        if(posn == 0) return\n        c = c + 1\n        p = p + posn + len(s2)\n      end do\n    end function"}
{"instruction": "Use Fortran to give me a function that returns the position of the first non-blank character in a string.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'  a'", "case4": "'a  '", "case5": "'   '", "result": ["1", "1", "1", "1", "1"]}, "code": "function FirstNonBlank(string) result(firstChar)\n  implicit none\n  character*(*) string\n  integer :: firstChar,length,n\n  \n  firstChar = 0\n  length = len_trim(string)\n  if(length .gt. 0) then\n      do n = 1, length\n          if(string(n:n) .ne. ' ') then\n              firstChar = n\n              return\n          end if\n      end do\n  end if\n  \n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the projection of a onto b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[-5,1]", "case5": "[0,4]", "result": ["0", "0", "-2", "-5", "0"]}, "code": "function ix_proj(a,b) result(r)\n    integer :: r\n    integer, intent(in) :: a, b\n    r = (a+b*abs(a))/b-abs(a)\n  end function"}
{"instruction": "Use Fortran to create a function that compares two integer arguments and returns -1 if the first argument is less than the second, 1 if the first argument is greater than the second, and 0 if they are equal.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,2]", "result": ["-1", "-1", "0", "1", "0"]}, "code": "function compar (arg1, arg2)\n    integer(2) :: compar\n    integer(4) :: arg1,arg2\n    if (arg1 < arg2) then\n        compar = -1\n    else if (arg1 > arg2) then\n        compar = 1\n    else\n        compar = 0\n    end if\n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer and a character string as input and returns a new string with the integer appended to the end of the character string and a \".h5\" extension.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'file']", "case2": "[3,'data']", "case3": "[0,'output']", "case4": "[10,'results']", "case5": "[2,'test']", "result": ["file_1.h5", "data_3.h5", "output_0.h5", "results_10.h5", "test_2.h5"]}, "code": "function file_name(i,fname)\n    integer i\n    character(*) fname\n    character*77 file_name\n      \n    character*7 str\n      \n    write(str,'(i7)')i\n    file_name=fname//'_'//trim(adjustl(str))//'.h5'\n    return\n      \n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given key exists in a given line of characters.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world', 'world'", "case2": "'hello world', 'hi'", "case3": "'hello world', 'o w'", "case4": "'hello world', 'Hello'", "case5": "'hello world', 'd!'", "result": ["T", "F", "T", "F", "F"]}, "code": "function lkey_exist(line, key)\n    character(*) line, key\n    logical lkey_exist\n      \n    lkey_exist=.false.\n    if(index(line, key)>0.and.(index(line,'#')<=0.or. &\n                &index(line,'#')>index(line, key)))then\n        lkey_exist=.true.\n    endif\n    return\n      \n    end function"}
{"instruction": "Use Fortran to create a function that takes a character array as input and returns an integer value.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'c'", "case4": "'d'", "case5": "'e'", "result": ["16808368", "16284080", "15825328", "15366576", "7436720"]}, "code": "function gdk_keyval_from_name(keyval_name) bind(c) \n  use iso_c_binding, only: c_int, c_char\n  integer(c_int) :: gdk_keyval_from_name\n  character(kind=c_char), dimension(*) :: keyval_name\nend function"}
{"instruction": "Use Fortran to create a function that returns a pointer to the best visual for a given depth and visual type.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function gdk_visual_get_best_with_both(depth, visual_type) bind(c) \n  use iso_c_binding, only: c_ptr, c_int\n  type(c_ptr) :: gdk_visual_get_best_with_both\n  integer(c_int), value :: depth\n  integer(c_int), value :: visual_type\nend function"}
{"instruction": "Use Fortran to define a function that calculates the associated Legendre polynomial of degree l and order m at a given value of x.", "test_case": {"param_num": 3, "param_type": "integer,integer,real*8", "case1": "[0,0,0.5]", "case2": "[1,0,0.5]", "case3": "[2,1,0.5]", "case4": "[3,2,0.5]", "case5": "[4,3,0.5]", "result": ["1.0000000000000000", "0.50000004169196766", "-1.2990382139955672", "5.6250002168222419", "-34.099751588427260"]}, "code": "function associated_legendre(l, m, x)\n\n      integer, intent(in) :: l, m\n      double precision, intent(in) :: x\n      integer :: k\n      double precision :: associated_legendre, p, p1, p2, fac\n      double precision :: pi\n\n      pi = 3.14159265359\n\n      ! to start the recursion, use that P_l^m = 0 for l < abs(m)\n      ! and P_l^l = (-1)^l*(2l-1)!!(1-x^2)^(l/2)\n      ! where (2l-1)!! = 2**l * Gamma(l+0.5) / sqrt(pi)\n      p1 = 0.\n      p2 = (-1)**abs(m) * 2**abs(m) * gamma(abs(m) + 0.5) / sqrt(pi) * (1.-x**2)**(abs(m) / 2.)\n\n      if (abs(m) > l) then\n         associated_legendre = 0.\n         return\n      end if\n\n      if (l == 0) then\n         associated_legendre = 1.\n         return\n      end if\n\n      if (l == m) then\n         associated_legendre = p2\n         return\n      end if\n\n      if (l == -m) then\n         fac = (-1)**abs(m) * gamma(l - abs(m) + 1.) / gamma(l + abs(m) + 1.)\n         associated_legendre = p2 * fac\n         return\n      end if\n\n      do k = abs(m) + 1, l\n         p = ((dble(2.0) * k - dble(1.0)) * x * p2 - (k - dble(1.0) + abs(m)) * p1) / (k - abs(m))\n         p1 = p2\n         p2 = p\n      end do\n\n      if (m < 0) then\n         fac = (-1)**abs(m) * gamma(l - abs(m) + 1.) / gamma(l + abs(m) + 1.)\n         p = p * fac\n      end if\n\n      associated_legendre = p\n\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the binomial coefficient of n and k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,5]", "case3": "[7,3]", "case4": "[15,7]", "case5": "[20,10]", "result": ["10", "252", "35", "6435", "184756"]}, "code": "function Bin(n,k) result (C)\n    implicit none\n    integer(kind=4), intent(in) :: n, k\n    integer(kind=4) :: i, C\n    C = 1\n    do i = 0, min(k,n-k) - 1\n       C = C * (n - i)\n       C = C / (i + 1)\n    end do\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a given range.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[1,1]", "result": ["2", "9", "41", "107", "1"]}, "code": "function randint(a, b)\n\n    integer, intent(in)::a\n    integer, intent(in), optional::b\n    integer::rangemin\n    integer::rangemax\n    real::r\n    integer::randint\n\n    if (present(b)) then\n      rangemin = a\n      rangemax = b\n    else\n      rangemin = 1\n      rangemax = a\n    end if\n\n    call random_number(r)\n\n    randint = int(r*(rangemax - rangemin - 1)) + rangemin\n\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a given minimum and maximum value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["5", "9", "68", "103", "-37"]}, "code": "function randi(min,max) result(rnum)\n    ! Gives a random integer between min and max\n    implicit none\n\n    integer :: min, max, rnum\n    real(4) :: rand_num\n\n    call random_number(rand_num)\n\n    rnum = floor(rand_num * (max+1 - min) + min)\n\n  end function"}
{"instruction": "Use Fortran to create a function that checks if two integers have the same digits in any order.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1234, 4321]", "case2": "[5678, 8765]", "case3": "[1111, 1111]", "case4": "[1234, 1243]", "case5": "[1234, 4322]", "result": ["T", "T", "T", "T", "F"]}, "code": "function permutations(a,b)\n    implicit none\n    integer, intent(in)    :: a,b\n    integer, dimension(10) :: a_ar, b_ar\n    integer                :: i,temp,a_curr,b_curr\n    logical                :: permutations\n\n    do i=1,10\n       a_ar(i)=0\n       b_ar(i)=0\n    end do\n\n    a_curr=a\n    b_curr=b\n\n    do i=1,4\n       temp=mod(a_curr,10)+1\n       a_ar(temp)=a_ar(temp)+1\n\n       temp=mod(b_curr,10)+1\n       b_ar(temp)=b_ar(temp)+1\n\n       a_curr=a_curr/10\n       b_curr=b_curr/10\n    end do\n\n    permutations=all(a_ar == b_ar,1)\n\n  end function"}
{"instruction": "Use Fortran to define a function that calculates a wave based on input parameters.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[10,5,3,1]", "case2": "[20,10,5,0]", "case3": "[30,15,7,1]", "case4": "[40,20,10,0]", "case5": "[50,25,12,1]", "result": ["(3.014534153E-02,-9.277783334E-02)", "(3.014534153E-02,9.277783334E-02)", "(3.014534153E-02,-9.277783334E-02)", "(0.101521514,0.640981555)", "(0.102690838,-0.538324118)"]}, "code": "function wave(nlen,kmax,iw,ic)\n implicit NONE\n integer, parameter :: double=kind(0.0d0)\n real(kind=double), parameter :: pi=3.1415926535897d0, &\n                   p23=2.0d0*pi/3.0d0,p43=4.0d0*pi/3.0d0\n integer, intent(IN) :: nlen,kmax,iw,ic\n real(kind=double), dimension(2):: g,p\n real(kind=double):: w,hw,ww,wd,wf,wg,wp,fw\n real:: r1,r2\n integer:: i,j,k\n complex:: wave\n wd=0.0d0\n w=2.0d0*pi*real(iw-1,double)/real(kmax,double)\n hw=w*0.5d0\n ww=dabs(w)\n wave=cmplx(0.0,0.0)\n if(ww >(2.0d0*p43).or.ww < p23) return\n do i=1,2\n   wp=hw*i\n   fw=1.0d0\n   do j=1,2\n     if(j == 1)then\n       wf=-wp\n     else\n       wf=wp\n     end if\n     do k=1,2\n       if(k == 1) wd=p43-wf\n       if(k == 2) wd=wf-p23\n       if(wd <= 0.0d0)then\n         g(k)=0.0d0\n       else\n        g(k)=exp(-1.0/wd/wd)\n       end if\n     enddo\n     wg=g(1)/(g(1)+g(2))\n     fw=fw*wg\n   enddo\n   p(i)=fw\n enddo\n r1=real(hw)\n r2=real(p(1)-p(2))*float(nlen)/float(kmax)\n wave = cmplx(cos(r1),-sin(r1))*csqrt(cmplx(r2, 0.0))\n if(ic == 1) then\n!   w= 2.d0*pi*real(iw-1,double)/real(nlen*dt,double)\n!   wave=wave*cmplx(-sngl(w*w),0.0)\n else\n   wave = conjg(wave)\n endif\n return\nend function"}
{"instruction": "Use Fortran to give me a function that checks if a given prefix is present in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello world'", "case2": "'','hello'", "case3": "'hello',''", "case4": "'world','hello world'", "case5": "'hello','hola'", "result": ["T", "T", "F", "F", "F"]}, "code": "function prefix(pre, str) result(out)\n\tcharacter(len=*), intent(in) :: pre\n\tcharacter(len=*), intent(in) :: str\n\tlogical :: out\n\n\tinteger :: length\n\tinteger :: i\n\n\tlength = len(pre)\n\tout = .TRUE.\n\n\tif (length > len(str)) then\n\t\tout = .FALSE.\n\t\treturn\n\tend if\n\n\tdo i = 1, length\n\t\tif (pre(i:i) /= str(i:i)) then\n\t\t\tout = .FALSE.\n\t\t\texit\n\t\tend if\n\tend do\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is alphanumeric.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isalnum(c) result(out)\n\tcharacter(len=1), intent(in) :: c\n\tlogical :: out\n\n\tselect case (ichar(c))\n\t\tcase (48:57) ! numeric\n\t\t\tout = .TRUE.\n\t\tcase (65:90) ! capital letters\n\t\t\tout = .TRUE.\n\t\tcase (97:122) ! lowercase letters\n\t\t\tout = .TRUE.\n\t\tcase default\n\t\t\tout = .FALSE.\n\tend select\nend function"}
{"instruction": "Use Fortran to create a function that counts the number of space-separated items in a line.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a b c'", "case3": "'a b c d e'", "case4": "'a'", "case5": "'a b c d e f g h i j k l m n o p q r s t u v w x y z'", "result": ["2", "3", "5", "0", "26"]}, "code": "function nitems(line)\n    ! ##########################################################################\n    ! Compute the number of space-separated items in a line\n    ! ##########################################################################\n\n    character line*(*)\n    logical back\n    integer length, k\n\n    back = .true.\n    length = len_trim(line)\n    k = index(line(1:length), ' ', back)\n    if (k == 0) then\n      nitems = 0\n      return\n    end if\n\n    nitems = 1\n    do\n      ! starting with the right most blank space,\n      ! look for the next non-space character down\n      ! indicating there is another item in the line\n      do\n        if (k <= 0) exit\n        if (line(k:k) == ' ') then\n          k = k - 1\n          cycle\n        else\n          nitems = nitems + 1\n          exit\n        end if\n      end do\n\n      ! once a non-space character is found,\n      ! skip all adjacent non-space character\n      do\n        if ( k<=0 ) exit\n        if (line(k:k) /= ' ') then\n          k = k - 1\n          cycle\n        end if\n        exit\n      end do\n      if (k <= 0) exit\n    end do\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the modulo of idx and numFeatures and returns the result as kf.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,5]", "case2": "[3,10]", "case3": "[7,3]", "case4": "[15,8]", "case5": "[20,4]", "result": ["1", "3", "1", "7", "0"]}, "code": "function featureIndex(idx, numFeatures) result(kf)\n    integer, intent(in) :: idx, numFeatures\n        \n    kf = mod(idx, numFeatures)\n\nend function"}
{"instruction": "Use Fortran to define a function that takes an integer array and its length as input and returns an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2]]", "case2": "[3,[3,4,5]]", "case3": "[2,[1,2]]", "case4": "[4,[5,4,3,2]]", "case5": "[1,[10]]", "result": ["6618572", "6618572", "6618572", "6618572", "6618572"]}, "code": "function OPS_GetIntInput(numData, iData)\n         integer       :: OPS_GetIntInput\n         integer       :: numData\n         integer       :: iData(*)\n        end function"}
{"instruction": "Use Fortran to give me a function that takes an integer value and returns it if it is within a given range, otherwise returns the closest limit of the range.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,3,2]", "case3": "[0,1,2]", "case4": "[-5,-3,-2]", "case5": "[10,20,30]", "result": ["2.00000000", "2.00000000", "1.00000000", "-3.00000000", "20.0000000"]}, "code": "function clampInt(val, lo, hi)\n\n      integer, intent(IN) :: lo, hi, val\n\n      if(val < lo)then\n         clampInt = lo\n      elseif(val > hi)then\n         clampInt = hi\n      else\n         clampInt = val\n      end if\n\n   end function"}
{"instruction": "Use Fortran to create a function that takes a character input and returns an integer based on a select case statement.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'M'", "case2": "'F'", "case3": "'U'", "case4": "'T'", "case5": "'S'", "result": ["", "", "", "", ""]}, "code": "function ij_code(industry)\n\n        implicit none\n        character(len=1), intent(in) :: industry\n        integer :: ij_code\n\n        select case (industry)\n            case('M')\n                ij_code = 1\n            case('F')\n                ij_code = 2\n            case('U')\n                ij_code = 3\n            case('T')\n                ij_code = 4\n            case('S')\n                ij_code = 5\n            case default\n                stop 'Industry does not exists'\n        end select\n\n    end function"}
{"instruction": "Use Fortran to calculate optical model reaction cross sections using empirical parameterization of Narasimha Murthy, Chaterjee, and Gupta going over to the geometrical limit at high energy.", "test_case": {"param_num": 6, "param_type": "integer,real*8,real*8,real*8,real*8,real*8", "case1": "[1, 2.0, 3.0, 4.0, 5.0, 6.0]", "case2": "[20, 1.0, 2.0, 3.0, 4.0, 5.0]", "case3": "[2, 0.0, 0.0, 0.0, 0.0, 0.0]", "case4": "[1, 1.0, 1.0, 1.0, 1.0, 1.0]", "case5": "[3, 2.0, 2.0, 2.0, 2.0, 2.0]", "result": ["559.92622141674678", "2.5270176968239467E+304", "Infinity", "1051.2617013003592", "636.15031293875950"]}, "code": "function kalbach(kp, zp, ap, zt, at, elab)\n\n! ==============================================================================\n!\n!     written in 1982; revised 1990 by K.K. Gudima\n!\n!     calculate optical model reaction cross sections\n!     using empirical parameterization\n!     of Narasimha Murthy, Chaterjee, and Gupta\n!     going over to the geometrical limit at high energy\n!\n!           proton cross sections scaled down with signor for a<100\n!           (appropriate for Becchetti-Greenlees potential)\n!           neutron cross sections scaled down sith signor for a<40\n!           (appropriate for Mani et al potential)\n!\n!     parameter values set in subroutine sigpar\n! \n! ==============================================================================\n\n    use, intrinsic :: iso_fortran_env, only: int32, real64\n\n    implicit none\n    integer(int32), intent(in)   :: kp\n    real(real64),   intent(in)   :: zp\n    real(real64),   intent(in)   :: ap\n    real(real64),   intent(in)   :: zt\n    real(real64),   intent(in)   :: at\n    real(real64),   intent(in)   :: elab\n    real (real64)                :: kalbach\n\n    integer(int32) :: jout\n    real(real64)   :: a, ares, athrd, b, c, cut, ec, ecsq, ecut2, etest, flow, &\n         & geom, p, ra, sig, signor, signor2, spill, w, xlamb, xmu, xnu, xnulam\n    real(real64)   :: ecut\n\n! ==============================================================================\n\n    real(real64), parameter, dimension(6) :: xl0 = &\n         & [ 12.10, 0.00437, 0.00619, 0.0186, 0.00459, 0.0643 ]\n    real(real64), parameter, dimension(6) :: xl1 = &\n         & [ -11.27,  -16.58,   -7.54,  -8.90,   -8.93, -13.96 ]\n    real(real64), parameter, dimension(6) :: xm0 = &\n         & [ 234.1,   244.7,   583.5,  686.3,   611.2,  781.2 ]\n    real(real64), parameter, dimension(6) :: xm1 = &\n         & [ 38.26,   0.503,   0.337,  0.325,    0.35,   0.29 ]\n    real(real64), parameter, dimension(6) :: xn0 = &\n         & [ 1.55,   273.1,   421.8,  368.9,   473.8, -304.7 ]\n    real(real64), parameter, dimension(6) :: xn1 = &\n         & [ -106.1,  -182.4,  -474.5, -522.2,  -468.2,  -470. ]\n    real(real64), parameter, dimension(6) :: xn2 = &\n         & [ 1280.8,  -1.872,  -3.592, -4.998,  -2.225, -8.580 ]\n    real(real64), parameter, dimension(6) :: xp0 = &\n         & [ -312.,   15.72,   0.798, -21.45,   -2.88,  10.95 ]\n    real(real64), parameter, dimension(6) :: xp1 = &\n         & [ 0.,    9.65,   420.3,  484.7,   205.6, -85.21 ]\n    real(real64), parameter, dimension(6) :: xp2 = &\n         & [ 0.,   -300.,  -1651., -1608.,  -1487.,  1146. ]\n\n! ==============================================================================\n    \n    flow = 1.e-18\n    spill = 1.e+18\n    jout = nint(ap)\n    ares = at+ap\n    athrd =ares**0.3333\n    signor = 1.\n! signor reduces p and n result for light targs as per expt.\n    if (kp == 1) then\n       if (ares < 40.) signor=0.7+ares*0.0075\n       xlamb = xl0(1)/athrd + xl1(1)\n       xmu = xm0(1)*athrd + xm1(1)*athrd*athrd\n       xnu = xn0(1)*athrd*ares + xn1(1)*athrd*athrd + xn2(1)\n!       ec = 2.4\n!       ecsq = 5.76\n       ec = 0.5\n       ecsq = 0.25\n!       ec = 1.\n!       ecsq = 1.\n       p = xp0(1)\n       xnulam = 1.\n       etest = 32.\n! etest is the energy above which the rxn cross section is\n!    compared with the geometrical limit and the max taken.\n!    xnulam here is a dummy value to be used later.\n       ra = 0.\n    else\n       ra = 1.20\n       if (kp == 2) then\n          ra = 0.\n          if (ares < 60.) then\n             signor = 0.92\n          else if (ares < 100.) then\n             signor = 0.8 + ares*0.002\n          end if\n       end if\n       ec = 1.44*zp*zt/(1.5*athrd+ra)\n       ecsq = ec * ec\n       p = xp0(kp) + xp1(kp)/ec + xp2(kp)/ecsq\n       xlamb = xl0(kp)*ares + xl1(kp)\n       a = ares**xm1(kp)\n       xmu = xm0(kp) * a\n       xnu = a* (xn0(kp)+xn1(kp)*ec+xn2(kp)*ecsq)\n       if (jout == 2) ra=0.8\n       if (jout == 3) ra=0.8\n! new values of ra are for calculating the geometrical limit\n!    to the cross section.\n       if (kp == 2) then\n          c = min(3.15_real64,ec*0.5)\n          w = 0.7 * c / 3.15\n! c and w are for the global corr'n factor for elab<ec\n!    for light targs they are scaled down from global values\n       end if\n       xnulam = xnu / xlamb\n       if (xnulam > spill) xnulam=0.\n       if (xnulam < flow) go to 20\n       if (kp == 2) then\n          etest = sqrt(xnulam) + 7\n       else\n          etest = 1.2 * sqrt(xnulam)\n       end if\n       ! for xnulam > 0, sig reaches a maximum at sqrt(xnulam).\n    end if\n20  a = -2.*p*ec + xlamb - xnu/ecsq\n    b = p*ecsq + xmu + 2.*xnu/ec\n    ecut = 0.\n    cut = a*a - 4.*p*b\n    if (cut > 0.) ecut = sqrt(cut)\n    ecut = (ecut-a) / (p+p)\n    ecut2 = ecut\n\n!    if (ecut < -0.05) then\n!       c = -ecut * 0.5\n!       w = -ecut * 0.1\n!    else if (cut < 0) then\n!       ecut2 = ecut * 0.25\n!    end if\n\n    if (cut < 0) ecut2 = ecut - 2.\n\n!    sigmin = b - 0.25*a*a/p\n! ecut is the energy where sigma=0 (if cut>0).  below ecut2\n!    sigma is set identically to zero to avoid unphysical values.\n    sig = 0.\n    if (elab <= ec) then\n       if (elab > ecut2) then\n          sig = (p*elab*elab+a*elab+b) * signor\n          if (kp == 2) then\n             signor2 = (ec - elab - c) / w\n             signor2 = 1 + exp(signor2)\n             sig = sig / signor2\n\n!             if (ecut < -0.05) then\n!                if (elab < -ecut) then\n!                   signor2 = (c - elab) / w\n!                   signor2 = 1 + exp(signor2)\n!                   sig = sig / signor2\n!                end if\n!             end if\n          end if\n\n! first signor gives empirical global corr'ns at low elab\n!    second signor corrects values near elab=0; light nuclei\n       end if\n    else\n       sig = (xlamb*elab+xmu+xnu/elab) * signor\n       geom = 0.0_real64\n       if (xnulam < flow) go to 36\n       if (elab < etest) go to 36\n       geom = sqrt(ap*elab)\n       geom = 1.23*athrd + ra + 4.573/geom\n       geom = 31.416 * geom * geom\n       sig = max(geom,sig)\n    end if\n36  kalbach=sig\n    return\n\n  end function"}
{"instruction": "Use Fortran to create a function that searches for a given index in a vector of indices and returns the index of the given value.", "test_case": {"param_num": 2, "param_type": "integer(:),integer", "case1": "[[1,2,3,4,5], 3]", "case2": "[[1,2,3,4,5], 6]", "case3": "[[1,2,3,4,5], 1]", "case4": "[[1,2,3,4,5], 5]", "case5": "[[1,2,3,4,5], 2]", "result": ["3", "24", "1", "5", "2"]}, "code": "function search_key(keys, i) result(k)\n    !> \\brief Search for a given index `i` in a vector `keys`\n    !> \\param keys Vector of index\n    !> \\param i Index to search for\n    !> \\return index of i inside keys\n\n    integer, dimension(:), intent(in) :: keys\n    integer, intent(in) :: i\n    integer :: j, k\n    \n    do j=1,size(keys)\n       if (keys(j) == i) then\n          k = j\n          exit\n       end if\n    end do\n\n  end function"}
{"instruction": "Use Fortran to create a function that allocates a logical array of size rows x cols and fills it with random boolean values.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,5]", "case2": "[10,10]", "case3": "[3,7]", "case4": "[1,1]", "case5": "[8,2]", "result": ["T T F T F T T F F F T F F T T F F T T T T F F F F", "T T F T F T T F F F T F F T T F F T T T T F F F F F T F T F F F T T F T F F F T T F F F F T F F T T F T T T T T T F F T F F F T F T T T F T F T T F F T F T F F F T T F F F F F F F T T T F F F T F T T", "T T F T F T T F F F T F F T T F F T T T T", "T", "T T F T F T T F F F T F F T T F"]}, "code": "function createBoard(rows, cols)\n\n        logical, dimension(:,:), allocatable :: createBoard\n        integer, intent(in) :: rows, cols\n        integer :: r,c\n\n        allocate( createBoard(rows, cols) )\n\n        do c = 1,cols\n            do r = 1,rows\n                createBoard(r,c) = (nint(rand(0)) .eq. 0)\n            end do\n        end do\n\n    end function"}
{"instruction": "Use Fortran to create a function that wraps around a 1-based periodic index that may be larger or smaller than the period.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "1", "2"]}, "code": "function wrap_idx(index, period) result(wrapped_index)\n    ! wrap around the 1-based periodic index which may be larger or smaller than the period\n    integer, intent(in) :: index\n    integer, intent(in) :: period\n    integer :: wrapped_index\n    wrapped_index = modulo(index - 1, period) + 1\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the modulo of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[5,2]", "case3": "[100,7]", "case4": "[0,5]", "case5": "[15,15]", "result": ["1.00000000", "1.00000000", "2.00000000", "0.00000000", "0.00000000"]}, "code": "function imodulo(x, y) result(r)\ninteger, intent(in) :: x, y\nr = x-floor(real(x)/y)*y\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the remainder of x divided by y.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[0,5]", "case3": "[-10,3]", "case4": "[10,-3]", "case5": "[-10,-3]", "result": ["1.00000000", "0.00000000", "-1.00000000", "1.00000000", "-1.00000000"]}, "code": "function imod(x, y) result(r)\ninteger, intent(in) :: x, y\nr = x-floor(real(x)/y)*y\nif (x < 0 .and. y < 0) return\nif (x < 0) r = r - y\nif (y < 0) r = r - y\nend function"}
{"instruction": "Use Fortran to give me a function that returns the minimum value between two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,2]", "result": ["1.00000000", "3.00000000", "3.00000000", "1.00000000", "2.00000000"]}, "code": "function imin(x, y) result(r)\ninteger, intent(in) :: x, y\nif (x < y) then\n    r = x\nelse\n    r = y\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that returns the maximum of two integer inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-4]", "result": ["2.00000000", "4.00000000", "3.00000000", "5.00000000", "-2.00000000"]}, "code": "function imax(x, y) result(r)\ninteger, intent(in) :: x, y\nif (x > y) then\n    r = x\nelse\n    r = y\nend if\nend function"}
{"instruction": "Use Fortran to create a function that converts an integer to a string with an optional format.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'(I5)']", "case2": "[3,'(I10)']", "case3": "[0,'(I3)']", "case4": "[100,'(I2)']", "case5": "[-5,'(I5)']", "result": ["1", "3", "0", "**", "-5"]}, "code": "function FString_fromInteger( val, format ) result( output )\n\t\tinteger, intent(in) :: val\n\t\tcharacter(*), optional, intent(in) :: format\n\t\tcharacter(1000) :: output\n\t\t\n\t\tcharacter(1000) :: strBuffer\n\t\t\n\t\tif( present(format) ) then\n\t\t\twrite( strBuffer, format ) val\n\t\t\toutput = strBuffer\n\t\telse\n\t\t\twrite( strBuffer, * ) val\n\t\t\toutput = trim(adjustl(strBuffer))\n\t\tend if\n\tend function"}
{"instruction": "Use Fortran to create a function that removes the file extension from a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','.txt'", "case2": "'file.doc','.doc'", "case3": "'file.pdf','.pdf'", "case4": "'file','.txt'", "case5": "'file.txt',''", "result": ["file", "file", "file", "", "file"]}, "code": "function FString_removeFileExtension( str, extension ) result( output )\n\t\tcharacter(*), intent(in) :: str\n\t\tcharacter(:), optional, allocatable :: extension\n\t\tcharacter(:), allocatable :: output\n\t\t\n\t\tinteger :: idPos\n\t\t\n\t\tidPos = scan( str, \".\", back=.true. )\n\t\t\n\t\toutput = str(1:idPos-1)\n\t\t\n\t\tif( present(extension) ) extension = str(idPos:len(str))\n\tend function"}
{"instruction": "Use Fortran to create a function that opens a pipe to a command and returns a pointer to the stream.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'ls -l','r'", "case2": "'pwd','w'", "case3": "'echo hello','r'", "case4": "'cat file.txt','r'", "case5": "'grep keyword file.txt','r'", "result": ["7240192", "13990368", "14383616", "6978048", "6912512"]}, "code": "function system_popen(path, mode) bind(C, name='popen')\n      use, intrinsic :: ISO_C_BINDING\n      character(kind=c_char), dimension(*) :: path, mode\n      type (c_ptr) :: system_popen\n   end function"}
{"instruction": "Use Fortran to create a function that takes an integer and a double as input and returns nothing.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[5, 3.14]", "case2": "[10, 2.718]", "case3": "[0, 0.0]", "case4": "[100, 1.0]", "case5": "[-1, -1.0]", "result": ["5", "10", "0", "100", "-1"]}, "code": "function NumEvaluator(length, aDouble) &\n            bind(C, name='NumEvaluator')\n            use, intrinsic :: ISO_C_BINDING\n            integer(C_INT), intent(in), value :: length\n            real(C_DOUBLE), intent(in), value :: aDouble\n        end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on the values of i, j, and nmax.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,5]", "case3": "[10,20,30]", "case4": "[100,200,300]", "case5": "[0,1,2]", "result": ["2.00000000", "-5.00000000", "290.000000", "29900.0000", "-1.00000000"]}, "code": "function func(i, j, nmax) \n    integer i, j, nmax\n    func = j + (i-1)*nmax\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between two given integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["9", "7", "98", "173", "8"]}, "code": "function randbetween(a, b) result(res) ! suppose a < b\n    integer, intent(in) :: a, b\n    integer :: res\n\n    real :: r\n\n    call random_number(r)\n\n    res = a + int((b-a)*r + 0.5)\n\n  end function"}
{"instruction": "Use Fortran to give me a function that checks if an integer is within a given range.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[5,5,5]", "case4": "[2,1,3]", "case5": "[10,5,15]", "result": ["F", "T", "T", "T", "T"]}, "code": "function bounded(v, ll, ul) result(res)\n    integer, intent(in) :: v, ll, ul\n    logical res\n\n    res = ( v >= ll ) .and. ( v <= ul )\n  end function"}
{"instruction": "Use Fortran to give me a function that takes an integer array as input and returns the average of its elements as a real number.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[10,20,30,40,50]", "case3": "[0,0,0,0,0]", "case4": "[1,2,3,4,5,6,7,8,9,10]", "case5": "[100,200,300,400,500]", "result": ["3.00000000", "30.0000000", "0.00000000", "5.50000000", "300.000000"]}, "code": "function average_int(x) result(res)\n    integer, intent(in) :: x(:)\n    res = real(sum(x), kind=kind(res)) / size(x)\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the average of an array of real numbers.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0,1.0]", "case4": "[2.0,4.0,6.0,8.0]", "case5": "[0.5,1.5,2.5,3.5,4.5]", "result": ["2.00000000", "0.00000000", "1.00000000", "5.00000000", "2.50000000"]}, "code": "function average_real(x) result(res)\n    real, intent(in) :: x(:)\n    res = sum(x) / size(x)\n  end function"}
{"instruction": "Use Fortran to give me a function that takes an array of logical values and returns the average as a real number.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.true.,.false.]", "case4": "[.false.]", "case5": "[.true.,.true.,.false.,.false.,.true.]", "result": ["0.666666687", "0.00000000", "0.800000012", "0.00000000", "0.600000024"]}, "code": "function average_logical(x) result(res)\n    logical, intent(in) :: x(:)\n    res = real(count(x), kind=kind(res)) / size(x)\n  end function"}
{"instruction": "Use Fortran to give me a function that computes the thin factor of two integers, which is their product if both are positive and 1 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,-4]", "result": ["2", "12", "1", "5", "1"]}, "code": "function compute_thin_factor(along, across)\n!----------------------------------------------------------------------\ninteger, intent(in) :: along\ninteger, intent(in) :: across\ninteger :: compute_thin_factor\n\nif (along > 0 .and. across > 0) then\n   compute_thin_factor = along * across\nelse\n   compute_thin_factor = 1\nendif\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates the value of ybar using the input parameters percent and beta according to the formula provided.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[0.5,0.5]", "case2": "[1.0,2.0]", "case3": "[0.0,0.0]", "case4": "[2.0,1.0]", "case5": "[0.75,0.25]", "result": ["NaN", "1.00000000", "NaN", "2.00000000", "NaN"]}, "code": "function grid_get_ybar(percent,beta)\r\n    real :: percent,beta,A\r\n\r\n    !Alley, p. 38\r\n    A = ((beta+1.0)/(beta-1.0))**(1.0 - percent)\r\n    grid_get_ybar = 1.0 - beta*(A-1.0)/(A+1.0)\r\n        \r\nend function"}
{"instruction": "Use Fortran to create a function that generates an array of n evenly spaced values between my_start and my_stop.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,5]", "case2": "[0.0,10.0,3]", "case3": "[0.0,1.0,1]", "case4": "[1.0,2.0,2]", "case5": "[0.0,1.0,3]", "result": ["1.0000000000000000        1.2500000000000000        1.5000000000000000        1.7500000000000000        2.0000000000000000", "0.0000000000000000        5.0000000000000000        10.000000000000000", "0.50000000000000000", "1.0000000000000000        2.0000000000000000", "0.0000000000000000       0.50000000000000000        1.0000000000000000"]}, "code": "function linspace(my_start, my_stop, n)\n    implicit none\n    integer :: n, i\n    real(8) :: my_start, my_stop, step\n    real(8), dimension(n) :: grid, linspace\n\n    if (n.eq.1) then\n      grid(n) = (my_start+my_stop)/2.d0\n    elseif (n.ge.2) then\n      grid(1) = my_start\n      if (n.gt.2) then\n        step = (my_stop-my_start)/(real(n-1))\n        do i = 2, n-1\n          grid(i) = grid(i-1) + step\n        end do\n      end if\n      grid(n) = my_stop\n    endif\n    linspace = grid\n  end function"}
{"instruction": "Use Fortran to give me a function that takes in two integer inputs and returns a logical value of false.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["F", "F", "F", "F", "F"]}, "code": "function do_clamp_or_fail(var, dom)\n\ninteger, intent(in) :: var ! variable index\ninteger, intent(in) :: dom ! domain index\nlogical             :: do_clamp_or_fail\n\ndo_clamp_or_fail = .false.\n\nend function"}
{"instruction": "Use Fortran to create a function that generates a linearly spaced array of nx points between x0 and x1 using OpenMP parallelization.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[0.0,1.0,5]", "case2": "[0.0,1.0,10]", "case3": "[-1.0,1.0,5]", "case4": "[0.0,0.0,1]", "case5": "[1.0,2.0,3]", "result": ["0.0000000000000000       0.25000000000000000       0.50000000000000000       0.75000000000000000        1.0000000000000000", "0.0000000000000000       0.11111111111111110       0.22222222222222221       0.33333333333333331       0.44444444444444442       0.55555555555555558       0.66666666666666663       0.77777777777777768       0.88888888888888884        1.0000000000000000", "-1.0000000000000000      -0.50000000000000000        0.0000000000000000       0.50000000000000000        1.0000000000000000", "NaN", "1.0000000000000000        1.5000000000000000        2.0000000000000000"]}, "code": "function linspace(x0, x1, nx) result(xs)\n\n    implicit none\n\n    double precision, intent(in) :: x0\n    double precision, intent(in) :: x1\n    integer, intent(in) :: nx\n\n    double precision, dimension(nx) :: xs\n\n    integer :: i\n    double precision :: step\n\n    step = (x1 - x0) / (nx - 1)\n\n    !$OMP PARALLEL DO\n    do i = 1, nx\n        xs(i) = x0 + (i - 1) * step\n    enddo\n    !$OMP END PARALLEL DO\n\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a letter or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_letter(ch) result(res)\n\n    ! Returns .true. if ch is a letter and .false. otherwise\n\n    character :: ch\n    logical :: res\n\n    select case(ch)\n    case('A':'Z','a':'z')\n      res=.true.\n    case default\n      res=.false.\n    end select\n    return\n\n  end function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a digit and false otherwise.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_digit(ch) result(res)\n\n    ! Returns .true. if ch is a digit (0,1,...,9) and .false. otherwise\n\n    character :: ch\n    logical :: res\n\n    select case(ch)\n    case('0':'9')\n      res=.true.\n    case default\n      res=.false.\n    end select\n    return\n\n  end function"}
{"instruction": "Use Fortran to create a function that counts the number of occurrences of a substring within a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world', 'world'", "case2": "'hello world', 'o'", "case3": "'hello world', ' '", "case4": "'hello world', 'Hello'", "case5": "'hello world', 'd'", "result": ["1", "2", "0", "0", "1"]}, "code": "function count_substr(str, substr) result(c)\n    character(*), intent(in) :: str !< Main string to search\n    character(*), intent(in) :: substr !< Substring to search for\n    integer :: c, p, posn\n\n    c = 0\n    if(len(substr) == 0) return\n    p = 1\n    do\n       posn = index(str(p:), substr)\n       if(posn == 0) return\n       c = c + 1\n       p = p + posn + len(substr)\n    end do\n  end function"}
{"instruction": "Use Fortran to define a function that takes two real numbers as input and returns a two-element array of real numbers as output, where the first element is calculated using a series of mathematical operations involving the input numbers and the second element is calculated using a different series of mathematical operations involving the input numbers.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,0.0]", "case2": "[1.0,1.0]", "case3": "[2.0,3.0]", "case4": "[-1.0,1.0]", "case5": "[0.5,-0.5]", "result": ["NaN                       NaN", "NaN                       NaN", "8.8969015350977898E-002   3.7503778673438681E-002", "-3.5951377451913791E-002  0.21404862254808621", "2.2642932493954548E-002  0.23867853375302239"]}, "code": "function libtetrabz_polimg_1221(g1,g2) result(w)\n  !\n  real(8),intent(in) :: g1, g2\n  real(8) :: w(2)\n  !\n  ! Real\n  !\n  w(1) = -2d0*(-1d0 + 2d0*g1*g2 + g2**2)*(atan(g2) -  &\n  &      atan(g1)) + (g1 + 2d0*g2 - g1*g2**2)* &\n  &    log((1d0 + g2**2)/(1d0 + g1**2))\n  w(1) = 2d0*(-1d0 + g1**2) + w(1)/(g2 - g1)\n  w(1) = 3d0*g1 + w(1)/(g2 - g1)\n  w(1) = 2d0 + (3d0*w(1))/(g2 - g1)\n  w(1) = w(1)/(2d0*(g2 - g1))\n  !\n  ! Imaginal\n  !\n  w(2) = 2d0*(g1 + 2d0*g2 - g1*g2**2)*(atan(g2) -  &\n  &      atan(g1)) + (-1d0 + 2d0*g1*g2 + g2**2)* &\n  &    log((1 + g2**2)/(1 + g1**2))\n  w(2) = -4d0*g1 + w(2)/(g2 - g1)\n  w(2) = -3d0 + w(2)/(g2 - g1)\n  w(2) = (3d0*w(2))/(2d0*(g2 - g1)**2)\n  !\nend function"}
{"instruction": "This is a Fortran function generated by Automatic Differentiation that returns a value from a common block based on the input arguments.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0", "8191", "0", "68", "68"]}, "code": "function   adsubcl( itape, isub )\n!******************************************************************\n!******************************************************************\n!** This routine was generated by Automatic differentiation.     **\n!** FastOpt: Transformation of Algorithm in Fortran, TAF 1.9.22  **\n!******************************************************************\n!******************************************************************\n!==============================================\n! all entries are defined explicitly\n!==============================================\nimplicit none\n\n!==============================================\n! declare common blocks\n!==============================================\ninteger :: adcomm1(1,4)\ncommon /adcomm/ adcomm1\n\n!==============================================\n! declare arguments\n!==============================================\ninteger :: adsubcl\ninteger :: isub\ninteger :: itape\n\nadsubcl = adcomm1(itape,isub)\nend function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on input integers and variables.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[100,200,300,400,500]", "case4": "[-1,-2,-3,-4,-5]", "case5": "[2147483647,-2147483648,0,1,-1]", "result": ["4", "-1", "499", "-6", "2147483647"]}, "code": "function iadd(ivar,i,j,loc,mitot)\n        integer, intent(in) :: i, j, ivar, loc, mitot\n        iadd = loc + ivar-1 + nvar*((j-1)*mitot+i-1)\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on input integers and variables.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[100,200,300,400,500]", "case4": "[-1,-2,-3,-4,-5]", "case5": "[2147483647,-2147483648,0,1,-1]", "result": ["4", "-1", "499", "-6", "2147483647"]}, "code": "function iaddf(ivar,i,j,locf,mi)\n        integer, intent(in) :: i, j, ivar, locf, mi\n        iaddf = locf   + ivar-1 + nvar*((j-1)*mi+i-1)\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates a value based on the input integers i, j, locfaux, mcapa, and mi.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[-1,-2,-3,-4,-5]", "case4": "[100,200,300,400,500]", "case5": "[-100,-200,-300,-400,-500]", "result": ["6", "-1", "-8", "699", "-701"]}, "code": "function iaddfaux(i,j,locfaux,mcapa,mi)\n        integer, intent(in) :: i, j, locfaux, mcapa, mi\n        iaddfaux = locfaux + mcapa-1 + naux*((j-1)*mi + (i-1))\n    end function"}
{"instruction": "Use Fortran to give me a function that compares two text strings, one of which can have wildcards ('*' or '?').", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','hello']", "case2": "['hello','world']", "case3": "['hello*','hello']", "case4": "['*world','hello world']", "case5": "['h?llo','hello']", "result": ["T", "F", "F", "F", "F"]}, "code": "function glob(tame,wild)\n\n! ident_6=\"@(#)M_strings::glob(3f): function compares text strings, one of which can have wildcards ('*' or '?').\"\n\nlogical                    :: glob\ncharacter(len=*)           :: tame       ! A string without wildcards\ncharacter(len=*)           :: wild       ! A (potentially) corresponding string with wildcards\ncharacter(len=len(tame)+1) :: tametext\ncharacter(len=len(wild)+1) :: wildtext\ncharacter(len=1),parameter :: NULL=char(0)\ninteger                    :: wlen\ninteger                    :: ti, wi\ninteger                    :: i\ncharacter(len=:),allocatable :: tbookmark, wbookmark\n! These two values are set when we observe a wildcard character. They\n! represent the locations, in the two strings, from which we start once we've observed it.\n   tametext=tame//NULL\n   wildtext=wild//NULL\n   tbookmark = NULL\n   wbookmark = NULL\n   wlen=len(wild)\n   wi=1\n   ti=1\n   do                                            ! Walk the text strings one character at a time.\n      if(wildtext(wi:wi) == '*')then             ! How do you match a unique text string?\n         do i=wi,wlen                            ! Easy: unique up on it!\n            if(wildtext(wi:wi).eq.'*')then\n               wi=wi+1\n            else\n               exit\n            endif\n         enddo\n         if(wildtext(wi:wi).eq.NULL) then        ! \"x\" matches \"*\"\n            glob=.true.\n            return\n         endif\n         if(wildtext(wi:wi) .ne. '?') then\n            ! Fast-forward to next possible match.\n            do while (tametext(ti:ti) .ne. wildtext(wi:wi))\n               ti=ti+1\n               if (tametext(ti:ti).eq.NULL)then\n                  glob=.false.\n                  return                         ! \"x\" doesn't match \"*y*\"\n               endif\n            enddo\n         endif\n         wbookmark = wildtext(wi:)\n         tbookmark = tametext(ti:)\n      elseif(tametext(ti:ti) .ne. wildtext(wi:wi) .and. wildtext(wi:wi) .ne. '?') then\n         ! Got a non-match. If we've set our bookmarks, back up to one or both of them and retry.\n         if(wbookmark.ne.NULL) then\n            if(wildtext(wi:).ne. wbookmark) then\n               wildtext = wbookmark;\n               wlen=len_trim(wbookmark)\n               wi=1\n               ! Don't go this far back again.\n               if (tametext(ti:ti) .ne. wildtext(wi:wi)) then\n                  tbookmark=tbookmark(2:)\n                  tametext = tbookmark\n                  ti=1\n                  cycle                          ! \"xy\" matches \"*y\"\n               else\n                  wi=wi+1\n               endif\n            endif\n            if (tametext(ti:ti).ne.NULL) then\n               ti=ti+1\n               cycle                             ! \"mississippi\" matches \"*sip*\"\n            endif\n         endif\n         glob=.false.\n         return                                  ! \"xy\" doesn't match \"x\"\n      endif\n      ti=ti+1\n      wi=wi+1\n      if (tametext(ti:ti).eq.NULL) then          ! How do you match a tame text string?\n         if(wildtext(wi:wi).ne.NULL)then\n            do while (wildtext(wi:wi) == '*')    ! The tame way: unique up on it!\n               wi=wi+1                           ! \"x\" matches \"x*\"\n               if(wildtext(wi:wi).eq.NULL)exit\n            enddo\n         endif\n         if (wildtext(wi:wi).eq.NULL)then\n            glob=.true.\n            return                               ! \"x\" matches \"x\"\n         endif\n         glob=.false.\n         return                                  ! \"x\" doesn't match \"xy\"\n      endif\n   enddo\nend function"}
{"instruction": "Use Fortran to create a function that converts a given integer to a string representation in a given base.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,10]", "case2": "[16,255]", "case3": "[8,63]", "case4": "[2,0]", "case5": "[3,100]", "result": ["1010", "ff", "77", "0", "10201"]}, "code": "function tobase(base, number)\n\n! ident_76=\"@(#)M_strings::todecimal(3f): given integer and base return string\"\n\n! based on an example at rosetta code.\ncharacter(len=36),parameter  :: alphanum = \"0123456789abcdefghijklmnopqrstuvwxyz\"\ninteger,intent(in)           :: base\ninteger,intent(in)           :: number\ncharacter(len=:),allocatable :: tobase\ncharacter(len=31)            :: holdit\ninteger                      :: number_local, i, rem\n   number_local=number\n\n   holdit = \"                               \"\n   do i = 31, 1, -1\n      if(number_local < base) then\n         holdit(i:i) = alphanum(number_local+1:number_local+1)\n         exit\n      endif\n      rem = mod(number_local, base)\n      holdit(i:i) = alphanum(rem+1:rem+1)\n      number_local = number_local / base\n   enddo\n   tobase = adjustl(holdit)\nend function"}
{"instruction": "Use Fortran to create a function that takes in up to 20 optional arguments of any type and returns a string representation of them separated by a specified separator.", "test_case": {"param_num": 20, "param_type": "real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0]", "case2": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]", "case3": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,0.0]", "case4": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0]", "case5": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0]", "result": ["1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 8.0000000000000000 9.0000000000000000 10.000000000000000 11.000000000000000 12.000000000000000 13.000000000000000 14.000000000000000 15.000000000000000 16.000000000000000 17.000000000000000 18.000000000000000 19.000000000000000 20.000000000000000", "0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000 0.0000000000000000", "1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 8.0000000000000000 9.0000000000000000 10.000000000000000 11.000000000000000 12.000000000000000 13.000000000000000 14.000000000000000 15.000000000000000 16.000000000000000 17.000000000000000 18.000000000000000 19.000000000000000 0.0000000000000000", "1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 8.0000000000000000 9.0000000000000000 10.000000000000000 11.000000000000000 12.000000000000000 13.000000000000000 14.000000000000000 15.000000000000000 16.000000000000000 17.000000000000000 18.000000000000000 19.000000000000000 20.000000000000000", "1.0000000000000000 2.0000000000000000 3.0000000000000000 4.0000000000000000 5.0000000000000000 6.0000000000000000 7.0000000000000000 8.0000000000000000 9.0000000000000000 10.000000000000000 11.000000000000000 12.000000000000000 13.000000000000000 14.000000000000000 15.000000000000000 16.000000000000000 17.000000000000000 18.000000000000000 19.000000000000000 20.000000000000000"]}, "code": "function str_scalar(generic0, generic1, generic2, generic3, generic4, generic5, generic6, generic7, generic8, generic9, &\n                  & generica, genericb, genericc, genericd, generice, genericf, genericg, generich, generici, genericj, &\n                  & sep)\nimplicit none\nclass(*),intent(in),optional  :: generic0, generic1, generic2, generic3, generic4\nclass(*),intent(in),optional  :: generic5, generic6, generic7, generic8, generic9\nclass(*),intent(in),optional  :: generica, genericb, genericc, genericd, generice\nclass(*),intent(in),optional  :: genericf, genericg, generich, generici, genericj\ncharacter(len=*),intent(in),optional :: sep\ncharacter(len=:), allocatable :: str_scalar\ncharacter(len=4096)           :: line\ninteger                       :: istart\ninteger                       :: increment\ncharacter(len=:),allocatable  :: sep_local\n   if(present(sep))then\n      sep_local=sep\n      increment=len(sep)+1\n   else\n      sep_local=' '\n      increment=2\n   endif\n\n   istart=1\n   line=''\n   if(present(generic0))call print_generic(generic0)\n   if(present(generic1))call print_generic(generic1)\n   if(present(generic2))call print_generic(generic2)\n   if(present(generic3))call print_generic(generic3)\n   if(present(generic4))call print_generic(generic4)\n   if(present(generic5))call print_generic(generic5)\n   if(present(generic6))call print_generic(generic6)\n   if(present(generic7))call print_generic(generic7)\n   if(present(generic8))call print_generic(generic8)\n   if(present(generic9))call print_generic(generic9)\n   if(present(generica))call print_generic(generica)\n   if(present(genericb))call print_generic(genericb)\n   if(present(genericc))call print_generic(genericc)\n   if(present(genericd))call print_generic(genericd)\n   if(present(generice))call print_generic(generice)\n   if(present(genericf))call print_generic(genericf)\n   if(present(genericg))call print_generic(genericg)\n   if(present(generich))call print_generic(generich)\n   if(present(generici))call print_generic(generici)\n   if(present(genericj))call print_generic(genericj)\n   str_scalar=trim(line)\ncontains\n!===================================================================================================================================\nsubroutine print_generic(generic)\n!use, intrinsic :: iso_fortran_env, only : int8, int16, int32, biggest=>int64, real32, real64, dp=>real128\nuse,intrinsic :: iso_fortran_env, only : int8, int16, int32, int64, real32, real64, real128\nclass(*),intent(in) :: generic\n   select type(generic)\n      type is (integer(kind=int8));     write(line(istart:),'(i0)') generic\n      type is (integer(kind=int16));    write(line(istart:),'(i0)') generic\n      type is (integer(kind=int32));    write(line(istart:),'(i0)') generic\n      type is (integer(kind=int64));    write(line(istart:),'(i0)') generic\n      type is (real(kind=real32));      write(line(istart:),'(1pg0)') generic\n      type is (real(kind=real64));      write(line(istart:),'(1pg0)') generic\n      type is (real(kind=real128));     write(line(istart:),'(1pg0)') generic\n      type is (logical);                write(line(istart:),'(l1)') generic\n      type is (character(len=*));       write(line(istart:),'(a)') trim(generic)\n      type is (complex);                write(line(istart:),'(\"(\",1pg0,\",\",1pg0,\")\")') generic\n   end select\n   istart=len_trim(line)+increment\n   line=trim(line)//sep_local\nend subroutine print_generic\n\nend function"}
{"instruction": "Use Fortran to define a function that takes a character string as input and returns an integer.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'B'", "case3": "'C'", "case4": "'D'", "case5": "'E'", "result": ["3", "3", "3", "3", "3"]}, "code": "function init_indices_lzlo_c (layout)\n         integer :: init_indices_lzlo_c\n         character(*) :: layout\n       end function"}
{"instruction": "Use Fortran to create a function that returns the minimum value between two integers a and b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "3.00000000", "2.00000000", "1.00000000", "2.00000000"]}, "code": "function ab_min(a,b)\n             integer a,b\n             if (a .LE. b) then ! TEST COMMENT\n                 ab_min = a\n             else ! TEST COMMENT\n                 ab_min = b\n             end if ! TEST COMMENT\n             return\n         end function"}
{"instruction": "Use Fortran to create a function that takes a single character as input and returns its ASCII code as an integer.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'c'", "case4": "'d'", "case5": "'e'", "result": ["39", "39", "39", "39", "39"]}, "code": "function icharl(letter) ! @(#) wrapper around ICHAR(3f) that returns integer type C_LONG\n   use iso_c_binding\n   implicit none\n   character(len=1),intent(in)  :: letter\n   integer(C_LONG)              :: icharl\n   icharl=ichar(letter)\nend function"}
{"instruction": "Use Fortran to create a function that checks if the first character of a string is a negative sign.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'5'", "case2": "'0'", "case3": "'-'", "case4": "'+'", "case5": "'abc'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_negative(s)\n          character*(*) s\n\n          if (s(1:1) .eq. '-') then\n            is_negative = 1\n          else\n            is_negative = 0\n          endif\n\n          return\n        end function"}
{"instruction": "Use Fortran to give me a function that multiplies two integers together.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,5]", "case3": "[-1,4]", "case4": "[10,10]", "case5": "[7,-2]", "result": ["6", "0", "-4", "100", "-14"]}, "code": "function testfunc(a,b) result(x)\n            integer, intent(in) :: a,b\n            integer :: x\n            x = a*b\n        end function"}
{"instruction": "Use Fortran to create a function that initializes a one-dimensional Fast Fourier Transform with inputs for the size of the transform and the sign of the transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[100,1]", "case3": "[1000,-1]", "case4": "[10000,-1]", "case5": "[100000,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function ffts_init_1df ( n, sign ) result(ptr) bind ( c )\n\t\t\tuse, intrinsic :: iso_c_binding\n\t\t\timplicit none\n\t\t\tTYPE(C_PTR) \t:: ptr\n\t\t\tinteger ( c_long ) :: n\n\t\t\tinteger ( c_int ) :: sign\n\t\tend function"}
{"instruction": "Use Fortran to create a function that initializes a one-dimensional Fast Fourier Transform with inputs for the size of the transform and the sign of the transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[100,1]", "case3": "[1000,-1]", "case4": "[10000,-1]", "case5": "[100000,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function ffts_init_1df ( n, sign ) result(ptr) bind ( c )\n\t\t\tuse, intrinsic :: iso_c_binding\n\t\t\timplicit none\n\t\t\tTYPE(C_PTR) \t:: ptr\n\t\t\tinteger ( c_long ) :: n\n\t\t\tinteger ( c_int ) :: sign\n\t\tend function"}
{"instruction": "Use Fortran to create a function that initializes a one-dimensional Fast Fourier Transform with inputs for the size of the transform and the sign of the transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[100,1]", "case3": "[1000,-1]", "case4": "[10000,-1]", "case5": "[100000,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function ffts_init_1df ( n, sign ) result(ptr) bind ( c )\n\t\t\tuse, intrinsic :: iso_c_binding\n\t\t\timplicit none\n\t\t\tTYPE(C_PTR) \t:: ptr\n\t\t\tinteger ( c_long ) :: n\n\t\t\tinteger ( c_int ) :: sign\n\t\tend function"}
{"instruction": "Use Fortran to create a function that returns the smallest power of a given base that is greater than or equal to a given number.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[5,2]", "case3": "[10,5]", "case4": "[1,10]", "case5": "[0,2]", "result": ["3", "8", "25", "1", "1"]}, "code": "function nextpow(n,base) bind(c)\n! \u4e0d\u5c0f\u4e8en\u7684base\u7684\u6574\u6570\u6b21\u5e42\n    integer, intent(in) :: n, base\n    integer :: nextpow\n\n    nextpow = 1\n\n    do while ( nextpow<n )\n        nextpow = nextpow*base\n    end do\n    return\n\nend function"}
{"instruction": "Use Fortran to give me a function that performs floor division of two real numbers.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[10.0,3.0]", "case2": "[5.0,2.0]", "case3": "[0.0,5.0]", "case4": "[1.0,0.5]", "case5": "[2.5,1.5]", "result": ["3.0000000000000000", "2.0000000000000000", "0.0000000000000000", "2.0000000000000000", "1.0000000000000000"]}, "code": "function Math_rFloorDivision( x, y ) result( output )\n\t\treal(8), intent(in) :: x\n\t\treal(8), intent(in) :: y\n\t\treal(8) :: output\n\t\t\n\t\toutput = floor( x/y )\n\tend function"}
{"instruction": "Use Fortran to give me a function that performs integer floor division of x by y and returns the result as a real number.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[15,4]", "case3": "[20,5]", "case4": "[25,6]", "case5": "[30,7]", "result": ["3.0000000000000000", "3.0000000000000000", "4.0000000000000000", "4.0000000000000000", "4.0000000000000000"]}, "code": "function Math_iFloorDivision( x, y ) result( output )\n\t\tinteger, intent(in) :: x\n\t\tinteger, intent(in) :: y\n\t\treal(8) :: output\n\t\t\n\t\toutput = floor( real(x,8)/real(y,8) )\n\tend function"}
{"instruction": "Use Fortran to create a function that extracts the prefix of a file name given its extension.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','txt'", "case2": "'file.doc','doc'", "case3": "'file','txt'", "case4": "'file.txt','doc'", "case5": "'file',''", "result": ["file.", "file.", "file", "file.txt", ""]}, "code": "function get_file_prefix(file,extension) result(prefix)\n        character(*),       intent(in)  :: file\n        character(*),       intent(in)  :: extension\n\n        character(len=:), allocatable   :: prefix\n        integer                         :: iext, extloc\n        \n        ! Check if the file name has already the extension\n        extloc = index(file, trim(extension))\n\n        if ( extloc == 0 ) then\n            prefix = file\n        else\n            prefix = trim(file(1:extloc-1))\n        end if\n\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given file has a specific extension.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','txt'", "case2": "'file.doc','docx'", "case3": "'file.pdf','pdf'", "case4": "'file','txt'", "case5": "'file.txt','pdf'", "result": ["T", "F", "T", "F", "F"]}, "code": "function check_file_extension(file,extension) result(extension_found)\n        character(*),       intent(in)  :: file\n        character(*),       intent(in)  :: extension\n\n        integer     :: iext, extloc\n        logical     :: extension_found\n\n        ! Check for extension in grid file\n        extloc = index(file, trim(extension))\n\n        ! If extloc is nonzero, then the extension was found in the filename\n        if ( extloc /= 0 ) then\n            extension_found = .true.\n        else\n            extension_found = .false.\n        end if\n\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates a 3x3 transformation matrix T_a based on three input angles phi, theta, and psi.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[0.0,0.0,0.0]", "case2": "[1.0,1.0,1.0]", "case3": "[0.0,1.0,0.0]", "case4": "[1.0,0.0,0.0]", "case5": "[0.0,0.0,1.0]", "result": ["1.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        1.0000000000000000       -0.0000000000000000        0.0000000000000000        0.0000000000000000        1.0000000000000000", "0.29192658172642888       0.45464871341284091       0.84147098480789650       0.83722241402998721       0.88774981831738442      -0.45464871341284091       0.46242567005663016       0.83722241402998732       0.29192658172642888", "1.0000000000000000        0.0000000000000000       0.84147098480789650        0.0000000000000000        1.0000000000000000       -0.0000000000000000      -0.84147098480789650        0.0000000000000000       0.54030230586813977", "0.54030230586813977        0.0000000000000000        0.0000000000000000        0.0000000000000000       0.54030230586813977      -0.84147098480789650        0.0000000000000000       0.84147098480789650       0.54030230586813977", "0.54030230586813977       0.84147098480789650        0.0000000000000000       0.84147098480789650       0.54030230586813977       -0.0000000000000000        0.0000000000000000        0.0000000000000000        1.0000000000000000"]}, "code": "function T_a12_IndvAngles(phi, theta, psi) result(T_a)\n      real*8 :: T_a(3,3)\n      real*8, intent(in) :: phi, theta, psi\n      real*8 :: cosphi, costheta, cospsi, &\n                sinphi, sintheta, sinpsi\n      cosphi = cos(phi)\n      costheta = cos(theta)\n      cospsi = cos(psi)\n      sinphi = sin(phi)\n      sintheta = sin(theta)\n      sinpsi = sin(psi)\n\n      T_a(1,1) =  cosphi*cospsi\n      T_a(1,2) =  sinphi*sintheta*cospsi + cosphi*sinpsi\n      T_a(1,3) = -cosphi*sintheta*cospsi + sinphi*sinpsi\n\n      T_a(2,1) =  costheta*sinpsi\n      T_a(2,2) =  sinphi*sintheta*sinpsi + cosphi*cospsi\n      T_a(2,3) =  cosphi*sintheta*sinpsi + sinphi*cospsi\n\n      T_a(3,1) =  sintheta\n      T_a(3,2) = -sinphi*costheta\n      T_a(3,3) =  cosphi*costheta\n    end function"}
{"instruction": "Use Fortran to create a PDF surface with a given filename, width, and height in points.", "test_case": {"param_num": 3, "param_type": "character,real*8,real*8", "case1": "['file.pdf', 8.5, 11.0]", "case2": "['output.pdf', 10.0, 15.0]", "case3": "['test.pdf', 0.0, 0.0]", "case4": "['example.pdf', 3.14159, 2.71828]", "case5": "['sample.pdf', -5.0, 10.0]", "result": ["14907968", "16284224", "7240256", "17988160", "7436864"]}, "code": "function cairo_pdf_surface_create(filename, width_in_points, height_in_points) &\n&bind(c) \n  use iso_c_binding, only: c_ptr, c_char, c_double\n  type(c_ptr) :: cairo_pdf_surface_create\n  character(kind=c_char), dimension(*) :: filename\n  real(c_double), value :: width_in_points\n  real(c_double), value :: height_in_points\nend function"}
{"instruction": "Use Fortran to create a function that calculates the stride of a given format and width for use in Cairo graphics library.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function cairo_format_stride_for_width(format, width) bind(c) \n  use iso_c_binding, only: c_int\n  integer(c_int) :: cairo_format_stride_for_width\n  integer(c_int), value :: format\n  integer(c_int), value :: width\nend function"}
{"instruction": "Use Fortran to give me a function that returns the nonnegative remainder of I4 division.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[107,50]", "case2": "[107,-50]", "case3": "[-107,50]", "case4": "[-107,-50]", "case5": "[0,5]", "result": ["7", "7", "43", "43", "0"]}, "code": "function i4_modp(i, j)\n\n        !*****************************************************************************80\n        !\n    !! I4_MODP returns the nonnegative remainder of I4 division.\n        !\n        !  Discussion:\n        !\n        !    If\n        !      NREM = I4_MODP ( I, J )\n        !      NMULT = ( I - NREM ) / J\n        !    then\n        !      I = J * NMULT + NREM\n        !    where NREM is always nonnegative.\n        !\n        !    The MOD function computes a result with the same sign as the\n        !    quantity being divided.  Thus, suppose you had an angle A,\n        !    and you wanted to ensure that it was between 0 and 360.\n        !    Then mod(A,360) would do, if A was positive, but if A\n        !    was negative, your result would be between -360 and 0.\n        !\n        !    On the other hand, I4_MODP(A,360) is between 0 and 360, always.\n        !\n        !    An I4 is an integer ( kind = 4 ) value.\n        !\n        !  Example:\n        !\n        !        I     J     MOD I4_MODP    Factorization\n        !\n        !      107    50       7       7    107 =  2 *  50 + 7\n        !      107   -50       7       7    107 = -2 * -50 + 7\n        !     -107    50      -7      43   -107 = -3 *  50 + 43\n        !     -107   -50      -7      43   -107 =  3 * -50 + 43\n        !\n        !  Licensing:\n        !\n        !    This code is distributed under the GNU LGPL license.\n        !\n        !  Modified:\n        !\n        !    02 March 1999\n        !\n        !  Author:\n        !\n        !    John Burkardt\n        !\n        !  Parameters:\n        !\n        !    Input, integer ( kind = 4 ) I, the number to be divided.\n        !\n        !    Input, integer ( kind = 4 ) J, the number that divides I.\n        !\n        !    Output, integer ( kind = 4 ) I4_MODP, the nonnegative remainder when I is\n        !    divided by J.\n        !\n        implicit none\n\n        integer(kind=4), intent(in) :: i\n        integer(kind=4) i4_modp\n        integer(kind=4), intent(in) :: j\n        integer(kind=4) value\n\n        if (j == 0) then\n            write (*, '(a)') ' '\n            write (*, '(a)') 'I4_MODP - Fatal error!'\n            write (*, '(a,i8)') '  Illegal divisor J = ', j\n            stop\n        end if\n\n        value = mod(i, j)\n\n        if (value < 0) then\n            value = value + abs(j)\n        end if\n\n        i4_modp = value\n\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that reflects an integer value within a given range.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[5,1,10]", "case2": "[15,10,20]", "case3": "[25,20,30]", "case4": "[35,30,40]", "case5": "[45,40,50]", "result": ["5", "15", "25", "35", "45"]}, "code": "function i4_reflect(ival, ilo, ihi)\n        integer(kind=4) :: i4_reflect\n        integer(kind=4), intent(in) :: ival, ilo, ihi\n        integer(kind=4) :: value\n        integer(kind=4) :: dist\n\n        ! the default return value\n        value = ival\n\n        ! the upper boundary\n        if (ival .gt. ihi) then\n            dist = ival - ihi\n            value = ihi - (dist - 1)\n        end if\n\n        ! the lower boundary\n        if (ival .lt. ilo) then\n            dist = ilo - ival\n            value = ilo + (dist - 1)\n        end if\n\n        i4_reflect = value\n\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that returns a periodic integer value within a given range.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,5]", "case2": "[3,4,10]", "case3": "[3,2,1]", "case4": "[5,1,10]", "case5": "[2,4,7]", "result": ["5", "10", "3", "5", "6"]}, "code": "function i4_periodic(ival, ilo, ihi)\n        integer(kind=4) :: i4_periodic\n        integer(kind=4), intent(in) :: ival, ilo, ihi\n        integer(kind=4) :: value\n        integer(kind=4) :: dist\n\n        ! the default return value\n        value = ival\n\n        ! the upper boundary\n        if (ival .gt. ihi) then\n            dist = ival - ihi\n            value = ilo + (dist - 1)\n        end if\n\n        ! the lower boundary\n        if (ival .lt. ilo) then\n            dist = ilo - ival\n            value = ihi - (dist - 1)\n        end if\n\n        i4_periodic = value\n\n        return\n    end function"}
{"instruction": "Use Fortran to give me a function for the associated Legendre polynomial of degree l and order m evaluated at x.", "test_case": {"param_num": 3, "param_type": "integer,integer,real*8", "case1": "[2,1,0.5]", "case2": "[3,2,0.8]", "case3": "[4,3,0.2]", "case4": "[5,4,0.9]", "case5": "[6,2,0.1]", "result": ["-0.334523261", "0.294331819", "-0.235465452", "4.76860553E-02", "0.265463442"]}, "code": "function plgndr(l, m, x)\n  integer, intent(in) :: l, m\n  real(8), intent(in) :: x\n  integer :: i, ll\n  real(8) :: fact, oldfact, pll, pmm, pmmp1, omx2\n  real(8), parameter :: pi = 3.14159265359d0\n\n  pll = 0.0d0\n  !if(m.lt.0.or.m.gt.l.or.abs(x).gt.1.) pause 'bad arguments in plgndr'\n\n  pmm=1.0d0\n  if (m .gt. 0) then\n    omx2 = (1.d0-x)*(1.d0+x)\n    fact = 1.d0\n    do i = 1, m\n      pmm = pmm*omx2*fact/(fact+1.d0)\n      fact = fact + 2.d0\n    end do\n  end if\n\n  pmm = sqrt((2*m + 1)*pmm/(4.d0*pi))\n  if (mod(m, 2) .eq. 1) pmm = -pmm\n  if (l .eq. m) then\n    plgndr = pmm\n  else\n    pmmp1 = x*sqrt(2.d0*m + 3.d0)*pmm\n    if (l .eq. m+1) then\n      plgndr = pmmp1\n    else\n      oldfact=sqrt(2.d0*m + 3.d0)\n    do ll = m+2, l\n      fact = sqrt((4.d0*ll**2 - 1.d0)/(ll**2-m**2))\n      pll = (x*pmmp1-pmm/oldfact)*fact\n      oldfact = fact\n      pmm = pmmp1\n      pmmp1 = pll\n    end do\n      plgndr = pll\n    end if\n  end if\n\nend function"}
{"instruction": "Use Fortran to create a function that compares two integers and returns 0 if they are equal, 1 if the first is greater than the second, and -1 if the first is less than the second.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,2]", "result": ["-1.00000000", "-1.00000000", "0.00000000", "1.00000000", "0.00000000"]}, "code": "function cmp_(i,j)\n\n  integer, intent(in)       :: i,j\n\n  if (i.eq.j) then\n    cmp_ = 0\n  else if (i.gt.j) then\n    cmp_ = 1\n  else\n    cmp_ = -1\n  endif\n\n  return\nend function"}
{"instruction": "Use Fortran to create a function that calculates the Julian day number given a year, month, and day.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,1,1]", "case2": "[2021,12,31]", "case3": "[2022,2,28]", "case4": "[2022,3,1]", "case5": "[2020,2,29]", "result": ["2459216", "2459580", "2459639", "2459640", "2458909"]}, "code": "function julday(year,month,day) result(jd)\n  ! ...  Returns the JD, Numerical recipes\n  ! ...\n  integer, intent(in)              :: year,month,day\n\n  ! ... Local variables\n  ! ...\n  integer, parameter                      :: IGREG=15+31*(10+12*1582)\n  integer ja,jm,jy\n  \n  jd = -999\n\n  jy = year\n  if (jy.eq.0) return\n  if (jy.lt.0) jy = jy + 1\n  if (month.gt.2) then\n    jm = month + 1\n  else\n    jy = jy - 1\n    jm = month + 13\n  endif\n  jd = int(365.25d0*jy)+int(30.6001d0*jm)+day+1720995\n  if (day+31*(month+12*year).ge.IGREG) then\n    ja = int(0.01d0*jy)\n    jd = jd + 2 - ja + int(0.25d0*ja)\n  endif\n  return \n\nend function"}
{"instruction": "Use Fortran to create a function that returns the kind value of a character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'hello'", "case3": "'fortran'", "case4": "'123'", "case5": "'testing'", "result": ["1.00000000", "1.00000000", "1.00000000", "1.00000000", "1.00000000"]}, "code": "function selected_char_kind(R) result(res)\ncharacter(len=*), intent(in) :: R\nres = 1\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the sum of all integers divisible by i up to j.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "3", "0", "0", "6"]}, "code": "function sum_divisibly_by(i, j) result(ret)\n        integer, intent(in) :: i, j\n        integer :: ret\n\n        ret = i*(j/i*(j/i + 1))/2\n    end function"}
{"instruction": "Use Fortran to create a function that generates an array of nx evenly spaced values between x0 and x1.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,5]", "case2": "[0.0,10.0,11]", "case3": "[-1.0,1.0,3]", "case4": "[2.5,3.5,2]", "case5": "[0.0,1.0,1]", "result": ["1.0000000000000000        1.2500000000000000        1.5000000000000000        1.7500000000000000        2.0000000000000000", "0.0000000000000000        1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000        10.000000000000000", "-1.0000000000000000        0.0000000000000000        1.0000000000000000", "2.5000000000000000        3.5000000000000000", "NaN"]}, "code": "function linspace(x0, x1, nx) result(xs)\n\n    implicit none\n\n    double precision, intent(in) :: x0,x1\n    integer, intent(in) :: nx\n    double precision, dimension(nx) :: xs\n    integer :: i\n    double precision :: step\n\n    step = (x1 - x0) / (nx - 1)\n    !!$OMP PARALLEL DO\n    do i = 1, nx\n        xs(i) = x0 + (i - 1) * step\n    enddo\n    !!$OMP END PARALLEL DO\nend function"}
{"instruction": "Use Fortran to give me a function that returns the sum of 1, the input position, and the input debut.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[5,1]", "case5": "[2,4]", "result": ["4", "8", "1", "7", "7"]}, "code": "function tab_fe(pos,debut)\n\timplicit none\n\tinteger :: tab_fe, pos, debut\n\ttab_fe = 1 + debut + pos\nend function"}
{"instruction": "Use Fortran to create a function that takes two integers as input and returns a 2D array of ones with dimensions s1 and s2.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[3,2]", "case4": "[5,5]", "case5": "[10,10]", "result": ["1", "1           1           1           1           1           1", "1           1           1           1           1           1", "1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1", "1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1"]}, "code": "function ones2(s1,s2) result(v)\n  implicit none\n  integer :: s1,s2\n  integer, dimension(s1,s2) :: v ! output\n  v = 1\nend function"}
{"instruction": "Use Fortran to create a function that takes two integers a and b, and returns an array of integers from a to b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,5]", "case2": "[3,10]", "case3": "[0,0]", "case4": "[-5,5]", "case5": "[10,20]", "result": ["1           2           3           4           5", "3           4           5           6           7           8           9          10", "0", "-5          -4          -3          -2          -1           0           1           2           3           4           5", "10          11          12          13          14          15          16          17          18          19          20"]}, "code": "function  incr(a,b) result(m)\n    implicit none\n    integer :: a,b,i,N\n    integer, allocatable, dimension(:) :: m ! output\n\n    N = b-a+1\n    allocate( m(N) )  != (/(i, i=a, b, 1)/)\n    m = (/(i, i=a, b, 1)/)\n\n  end function"}
{"instruction": "Use Fortran to create a function that returns an array of integers from a to b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,5]", "case2": "[3,7]", "case3": "[0,0]", "case4": "[10,15]", "case5": "[-5,5]", "result": ["1           2           3           4           5", "3           4           5           6           7", "0", "10          11          12          13          14          15", "-5          -4          -3          -2          -1           0           1           2           3           4           5"]}, "code": "function  incr2(a,b) result(m)\n    implicit none\n    integer :: a,b,i,N\n    integer, allocatable, dimension(:,:) :: m ! output\n\n    N = b-a+1\n    allocate( m(1,N) )  != (/(i, i=a, b, 1)/)\n    m(1,:) = (/(i, i=a, b, 1)/)\n    !DEALLOCATE(m)\n  end function"}
{"instruction": "Use Fortran to give me a function that counts the number of bit flips between two integers a and b with nbits number of bits.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,4]", "case2": "[3,4,8]", "case3": "[3,2,16]", "case4": "[5,1,32]", "case5": "[2,4,64]", "result": ["2", "3", "1", "1", "2"]}, "code": "function flipcount(a,b,nbits) result(c)\n\n    integer, intent(in) :: a,b,nbits\n    integer             :: n,i\n    integer             :: c\n\n    c = 0\n    n = 1\n    \n    do i = 1,nbits\n        if (iand(a,n) /= iand(b,n)) c = c + 1\n        n = 2*n\n    end do\n\nend function"}
{"instruction": "Use Fortran to create a function that takes in year, month, day, hour, minute, and second and returns a formatted date string in the CESM format.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[2021,10,31,23,59,59]", "case2": "[2022,1,1,0,0,0]", "case3": "[2021,12,31,23,59,59]", "case4": "[2021,2,28,23,59,59]", "case5": "[2020,2,29,23,59,59]", "result": ["2021-10-31-86399", "2022-01-01-00000", "2021-12-31-86399", "2021-02-28-86399", "2020-02-29-86399"]}, "code": "function formatCESMdate(ccyy,mm,dd,hh,nn,ss)\ninteger, intent(in) :: ccyy\ninteger, intent(in) :: mm\ninteger, intent(in) :: dd\ninteger, intent(in) :: hh\ninteger, intent(in) :: nn\ninteger, intent(in) :: ss\ncharacter(len=80) :: formatCESMdate\n\ninteger :: fffff\n\nfffff = hh*3600 + nn*60 + ss\nwrite(formatCESMdate, '(i4.4,1a,2(i2.2,1a),i5.5)') ccyy, '-', mm, '-', dd, '-', fffff\n\nend function"}
{"instruction": "Use Fortran to give me a function that generates a random integer between two given integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["2", "8", "85", "141", "32"]}, "code": "function random_int(left, right) result(rand)\n    real :: random_real\n    integer :: left, right, rand\n    call random_number(random_real)\n    rand = left + floor((right+1-left)*random_real)\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random number using the linear congruential method.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "1.00000000", "1.00000000", "1.00000000", "1.00000000"]}, "code": "function RandNum(iseed,first) \n  implicit none\n  REAL:: RandNum\n  integer, parameter :: MPLIER=16807\n  integer, parameter :: MODLUS=2147483647\n  integer, parameter :: MOBYMP=127773\n  integer, parameter :: MOMDMP=2836\n  integer :: hvlue,lvlue,testv,nextn,first,iseed\n  save nextn\n  \n\n  if(first == 0) THEN\n    nextn=iseed\n    first=1\n  end if\n  hvlue=nextn/mobymp\n  lvlue=mod(nextn,mobymp)\n  testv=mplier*lvlue-momdmp*hvlue\n  \n  if(testv > 0)then\n    nextn=testv\n  else\n    nextn=testv+modlus\n  endif\n  RandNum = real(nextn)/real(modlus)\n\nend function"}
{"instruction": "Use Fortran to give me a function for computing the associated Legendre polynomial of degree l and order m at x.", "test_case": {"param_num": 3, "param_type": "integer,integer,real*8", "case1": "[2,0,0.5]", "case2": "[3,1,0.8]", "case3": "[4,2,-0.6]", "case4": "[1,0,1.5]", "case5": "[3,2,0.9]", "result": ["-0.12500000000000000", "-1.9800000000000004", "7.2960000000000029", "", "2.5649999999999995"]}, "code": "function P_lgndr(l,m,x) result(P_lm)\n\n    implicit none\n\n    integer,          intent(in) :: l, m\n    double precision, intent(in) :: x\n    double precision             :: P_lm\n    integer                      :: i, ll\n    double precision             :: fact, pll, pmm, pmmp1, somx2\n\n    if ( (m < 0) .or. (m > l) .or. (abs(x) > 1.0d0) ) then\n       write(0,*) 'Error: invalid parameters in P_lgndr'\n       stop\n    end if\n\n    pmm = 1.0d0\n\n    if ( m > 0 ) then\n       somx2 = sqrt((1.0d0-x)*(1.0d0+x))\n       fact  = 1.0d0\n       do i = 1, m\n          pmm  = -pmm*fact*somx2\n          fact = fact+2.\n       end do\n    end if\n\n    if ( l == m ) then\n       P_lm = pmm\n    else\n       pmmp1 = x*(2*m + 1)*pmm\n       if ( l == (m+1) ) then\n          P_lm = pmmp1\n       else\n          pll = 0.0d0\n          do ll = m+2, l\n             pll   = (x*(2*ll - 1)*pmmp1 - (ll + m - 1)*pmm)/(ll - m)\n             pmm   = pmmp1\n             pmmp1 = pll\n          end do\n          P_lm = pll\n       end if\n    end if\n\n  end function"}
{"instruction": "Use Fortran to create a function that simplifies calling get_environment_variable and returns the value of an environment variable or a default value if it is not defined.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'HOME','/home/user/'", "case2": "'USER','user'", "case3": "'PATH','/usr/bin/'", "case4": "'','/usr/local/'", "case5": "'SHELL','/bin/bash'", "result": ["/home/user/", "user", "D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;D:\\Miniconda3\\bin;D:\\Miniconda3\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;C:\\Program Files\\Microsoft\\jdk-11.0.16.101-hotspot\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0;D:\\;D:\\fortran\\mingw64\\bin;C:\\Users\\98365\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;.;D:\\PyCharm 2023.2.1\\bin;.;D:\\Microsoft VS Code\\bin;D:\\Miniconda3\\Library\\Bin", "/usr/local/", "/bin/bash"]}, "code": "function get_env(NAME,DEFAULT) result(VALUE)\n    ! a function that makes calling get_environment_variable(3) simple\n    implicit none\n    character(len=*),intent(in)          :: NAME\n    character(len=*),intent(in),optional :: DEFAULT\n    character(len=:),allocatable         :: VALUE\n    integer                              :: howbig\n    integer                              :: stat\n    integer                              :: length\n       ! get length required to hold value\n       length=0\n       VALUE=''\n       if(NAME.ne.'')then\n          call get_environment_variable( &\n          & NAME, length=howbig,status=stat,trim_name=.true.)\n          select case (stat)\n          case (1)\n           !*!print *, NAME, \" is not defined in the environment. Strange...\"\n           VALUE=''\n          case (2)\n           !*!print *, &\n           !*!\"This processor does not support environment variables. Boooh!\"\n           VALUE=''\n          case default\n           ! make string to hold value of sufficient size\n           if(allocated(VALUE))deallocate(VALUE)\n           allocate(character(len=max(howbig,1)) :: VALUE)\n           ! get value\n           call get_environment_variable( &\n           & NAME,VALUE,status=stat,trim_name=.true.)\n           if(stat.ne.0)VALUE=''\n          end select\n       endif\n       if(VALUE.eq.''.and.present(DEFAULT))VALUE=DEFAULT\n    end function"}
{"instruction": "Use Fortran to create a function that checks if an integer is in a given list of integers.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3,4]]", "case2": "[5,[1,2,3,4,5]]", "case3": "[3,[5,4,3,2,1]]", "case4": "[2,[0]]", "case5": "[4,[1,2,3,4,5,6,7,8,9,10]]", "result": ["T", "T", "T", "F", "T"]}, "code": "function isElIn(item,list) result(is)\n  integer, intent(in) :: list(:), item\n  integer :: i\n  logical :: is\n  is=.false.\n  do i=1,size(list)\n    if (list(i) == item) then\n      is=.true.\n    endif\n  end do\nend function"}
{"instruction": "Use Fortran to create a function that converts a given number to a given base and returns the result as a string.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,2]", "case2": "[16,255]", "case3": "[2,10]", "case4": "[8,63]", "case5": "[3,100]", "result": ["2", "ff", "1010", "77", "10201"]}, "code": "function tobase(base, number)\n\ncharacter(len=36),parameter  :: alphanum = \"0123456789abcdefghijklmnopqrstuvwxyz\"\ninteger,intent(in)           :: base\ninteger,intent(in)           :: number\ncharacter(len=:),allocatable :: tobase\ncharacter(len=31)            :: holdit\ninteger                      :: number_local, i, rem\n   number_local=number\n\n   holdit = \"                               \"\n   do i = 31, 1, -1\n      if(number_local < base) then\n         holdit(i:i) = alphanum(number_local+1:number_local+1)\n         exit\n      endif\n      rem = mod(number_local, base)\n      holdit(i:i) = alphanum(rem+1:rem+1)\n      number_local = number_local / base\n   enddo\n   tobase = adjustl(holdit)\nend function"}
{"instruction": "Use Fortran to create a function that takes in up to 21 optional arguments of any type and returns a string representation of them separated by a specified separator.", "test_case": {"param_num": 21, "param_type": "real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,real*8,character", "case1": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,';']", "case2": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,';']", "case3": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,'|']", "case4": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,'']", "case5": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,';']", "result": ["1.0000000000000000;2.0000000000000000;3.0000000000000000;4.0000000000000000;5.0000000000000000;6.0000000000000000;7.0000000000000000;8.0000000000000000;9.0000000000000000;10.000000000000000;11.000000000000000;12.000000000000000;13.000000000000000;14.000000000000000;15.000000000000000;16.000000000000000;17.000000000000000;18.000000000000000;19.000000000000000;20.000000000000000;", "0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;0.0000000000000000;", "1.0000000000000000|2.0000000000000000|3.0000000000000000|4.0000000000000000|5.0000000000000000|6.0000000000000000|7.0000000000000000|8.0000000000000000|9.0000000000000000|10.000000000000000|11.000000000000000|12.000000000000000|13.000000000000000|14.000000000000000|15.000000000000000|16.000000000000000|17.000000000000000|18.000000000000000|19.000000000000000|20.000000000000000|", "1.00000000000000002.00000000000000003.00000000000000004.00000000000000005.00000000000000006.00000000000000007.00000000000000008.00000000000000009.000000000000000010.00000000000000011.00000000000000012.00000000000000013.00000000000000014.00000000000000015.00000000000000016.00000000000000017.00000000000000018.00000000000000019.00000000000000020.000000000000000", "1.0000000000000000;2.0000000000000000;3.0000000000000000;4.0000000000000000;5.0000000000000000;6.0000000000000000;7.0000000000000000;8.0000000000000000;9.0000000000000000;10.000000000000000;11.000000000000000;12.000000000000000;13.000000000000000;14.000000000000000;15.000000000000000;16.000000000000000;17.000000000000000;18.000000000000000;19.000000000000000;20.000000000000000;"]}, "code": "function str_scalar(generic0, generic1, generic2, generic3, generic4, generic5, generic6, generic7, generic8, generic9, &\n                  & generica, genericb, genericc, genericd, generice, genericf, genericg, generich, generici, genericj, &\n                  & sep)\nimplicit none\nclass(*),intent(in),optional  :: generic0, generic1, generic2, generic3, generic4\nclass(*),intent(in),optional  :: generic5, generic6, generic7, generic8, generic9\nclass(*),intent(in),optional  :: generica, genericb, genericc, genericd, generice\nclass(*),intent(in),optional  :: genericf, genericg, generich, generici, genericj\ncharacter(len=*),intent(in),optional :: sep\ncharacter(len=:), allocatable :: str_scalar\ncharacter(len=4096)           :: line\ninteger                       :: istart\ninteger                       :: increment\ncharacter(len=:),allocatable  :: sep_local\n   if(present(sep))then\n      sep_local=sep\n      increment=len(sep)+1\n   else\n      sep_local=' '\n      increment=2\n   endif\n\n   istart=1\n   line=''\n   if(present(generic0))call print_generic(generic0)\n   if(present(generic1))call print_generic(generic1)\n   if(present(generic2))call print_generic(generic2)\n   if(present(generic3))call print_generic(generic3)\n   if(present(generic4))call print_generic(generic4)\n   if(present(generic5))call print_generic(generic5)\n   if(present(generic6))call print_generic(generic6)\n   if(present(generic7))call print_generic(generic7)\n   if(present(generic8))call print_generic(generic8)\n   if(present(generic9))call print_generic(generic9)\n   if(present(generica))call print_generic(generica)\n   if(present(genericb))call print_generic(genericb)\n   if(present(genericc))call print_generic(genericc)\n   if(present(genericd))call print_generic(genericd)\n   if(present(generice))call print_generic(generice)\n   if(present(genericf))call print_generic(genericf)\n   if(present(genericg))call print_generic(genericg)\n   if(present(generich))call print_generic(generich)\n   if(present(generici))call print_generic(generici)\n   if(present(genericj))call print_generic(genericj)\n   str_scalar=trim(line)\ncontains\nsubroutine print_generic(generic)\nuse,intrinsic :: iso_fortran_env, only : int8, int16, int32, int64, real32, real64, real128\nclass(*),intent(in) :: generic\n   select type(generic)\n      type is (integer(kind=int8));     write(line(istart:),'(i0)') generic\n      type is (integer(kind=int16));    write(line(istart:),'(i0)') generic\n      type is (integer(kind=int32));    write(line(istart:),'(i0)') generic\n      type is (integer(kind=int64));    write(line(istart:),'(i0)') generic\n      type is (real(kind=real32));      write(line(istart:),'(1pg0)') generic\n      type is (real(kind=real64));      write(line(istart:),'(1pg0)') generic\n      type is (logical);                write(line(istart:),'(l1)') generic\n      type is (character(len=*));       write(line(istart:),'(a)') trim(generic)\n      type is (complex);                write(line(istart:),'(\"(\",1pg0,\",\",1pg0,\")\")') generic\n   end select\n   istart=len_trim(line)+increment\n   line=trim(line)//sep_local\nend subroutine print_generic\n\nend function"}
{"instruction": "Use Fortran to give me a function that returns a logical value indicating whether the absolute difference between two real numbers is greater than the first number times 1e-6.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,1.000001]", "case2": "[3.5,3.500001]", "case3": "[3.0,2.999999]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["F", "F", "F", "T", "T"]}, "code": "function diff(a, b)\n  real(kind=4) :: a, b\n  logical diff\n\n  diff = (abs (a - b) .gt. abs(a * 1e-6))\nend function"}
{"instruction": "Use Fortran to give me a function for the product of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,0]", "case3": "[-5,6]", "case4": "[10,-2]", "case5": "[100,100]", "result": ["6", "0", "-30", "-20", "10000"]}, "code": "function myprod(a, b)\n       integer, value :: a, b\n       integer :: myprod\n       myprod = a * b\n    end function"}
{"instruction": "Use Fortran to give me a function for a+b with two input arguments and one output.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "6.00000000", "7.00000000"]}, "code": "function f1(a,b)\n    real,intent(in) :: a,b\n    f1 = a + b\n  end function"}
{"instruction": "Use Fortran to give me a function for a-b.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["-1.00000000", "-1.00000000", "1.00000000", "4.00000000", "-2.00000000"]}, "code": "function f2(a,b)\n    real,intent(in) :: a,b\n    f2 = a - b\n  end function"}
{"instruction": "Use Fortran to create a function that returns the index of the matching parenthesis in a given string.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "')'", "case3": "'()()'", "case4": "'((()))'", "case5": "'()()()()'", "result": ["1", "1", "1", "1", "1"]}, "code": "function match_paren(line)\n        character(len=*), intent(in) :: line\n        integer                      :: parens, i\n\n        parens = 0\n        match_paren = 0\n\n        do i = 1, len(line)\n            if (line(i:i) == '(') then\n                parens = parens + 1\n            else if (line(i:i)==')') then\n                parens = parens - 1\n            end if\n\n            if (parens == 0) then\n                match_paren = i\n                exit\n            end if\n        end do\n    end function"}
{"instruction": "Use Fortran to give me a function that returns the position of the first occurrence of a given character in a string, ignoring any occurrences within parentheses.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'h'", "case2": "'world', 'o'", "case3": "'(1+2)*3', '*'", "case4": "'(1+2)*(3+4)', ')'", "case5": "'(1+2)*(3+4)', '('", "result": ["1", "2", "0", "0", "0"]}, "code": "function match_char(str, c)\n        character(len=*) :: str\n        character(len=1) :: c\n        integer          :: depth, i\n\n        depth = 0\n        match_char = 0\n\n        do i = 1, len(str)\n            if (str(i:i) == '(') then\n                depth = depth + 1\n            else if (str(i:i) == ')') then\n                depth = depth - 1\n            else if (str(i:i) == c .and. depth == 0) then\n                match_char = i\n                exit\n            end if\n        end do\n    end function"}
{"instruction": "Use Fortran to give me a function that subtracts b from a.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["-1", "-1", "1", "4", "-2"]}, "code": "function f(a,b) result(f_res)\n    integer, intent(in) :: a, b\n    integer :: f_res\n    f_res = a - b\n  end function"}
{"instruction": "Use Fortran to create a function that adds a new extension to a file name.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['file.txt', '.bak']", "case2": "['file_tmp.txt', '.new']", "case3": "['file', '.txt']", "case4": "['file.txt', '']", "case5": "['file.txt', '_new']", "result": ["file.bak", "file_tmp.new", "file.txt", "file", "file_new"]}, "code": "function new_ext(file_name, extension)\n\n    implicit none\n    character(len = *), intent(in)  :: file_name  ! File to add new extension to\n    character(len = *), intent(in)  :: extension  ! New extension to add\n    character(len = 256)            :: new_ext    ! File name with new extension\n    integer, dimension(2)           :: ext_pos    ! Positions of extension separators\n\n    ext_pos = (/ scan(trim(file_name), '_tmp', back = .true.) - 4,  scan(trim(file_name), '.', back = .true.) - 1 /)\n    if (any(ext_pos > 0)) then\n        new_ext = file_name(1:minval(ext_pos, (ext_pos > 0))) // extension\n    else\n        new_ext = trim(file_name) // extension\n    end if\n\nend function"}
{"instruction": "Use Fortran to create a function that checks if a character is empty or contains only whitespace characters.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "' '", "case4": "'9'", "case5": "' '", "result": ["F", "F", "F", "F", "F"]}, "code": "function empty_char(ch)\n  character :: ch\n  logical empty_char\n  empty_char = .false.\n  if ( ch == '' .or. &\n       ch == achar(9) .or. &\n       ch == achar(32) ) then\n    empty_char = .true.\n  end if\nend function"}
{"instruction": "Use Fortran to create a function that checks if two input integers are equal and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[3,3]", "case3": "[2,4]", "case4": "[5,5]", "case5": "[0,0]", "result": ["T", "T", "F", "T", "T"]}, "code": "function checkdim(nx,ny)\r\n        !..............................................................................\r\n        ! checkdim checks the equality of dimensions of two vector\r\n        !..............................................................................\r\n\r\n        integer, intent(in):: nx\r\n        integer, intent(in):: ny\r\n        logical:: checkdim\r\n        if (nx/=ny) then\r\n            checkdim=.false.\r\n        else\r\n            checkdim=.true.\r\n        end if\r\n\r\n    end function"}
{"instruction": "Use Fortran to define a function called \"foo2\" that takes two integer arguments and returns their sum, and also contains a subroutine called \"subfoo\".", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,0]", "result": ["3", "7", "0", "-4", "2"]}, "code": "function foo2(i, j)\n    integer i, j, foo2\n    ! CHECK: AssignmentStmt\n    foo2 = i + j\n    contains\n    ! CHECK: Subroutine subfoo\n    subroutine subfoo()\n    end subroutine\n    ! CHECK: EndSubroutine subfoo\n  end function"}
{"instruction": "Use Fortran to give me a function that converts a single uppercase character to lowercase.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'b'", "case3": "'C'", "case4": "'d'", "case5": "'E'", "result": ["\u0000", "\u0000", "\u0000", "\u0000", "\u0000"]}, "code": "function to_lower(c) result(t)\n      character(len=1), intent(in) :: c !! A character.\n      character(len=1) :: t \n    end function"}
{"instruction": "Use Fortran to give me a function that takes a single character as input and returns the uppercase version of that character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'c'", "case4": "'D'", "case5": "'e'", "result": ["\u0000", "\u0000", "\u0000", "\u0000", "\u0000"]}, "code": "function to_upper(c) result(t)\n      character(len=1), intent(in) :: c !! A character.\n      character(len=1) :: t \n    end function"}
{"instruction": "Use Fortran to create a function that returns an exchange ID based on a location ID and a quantity ID.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1002", "3004", "3002", "5001", "2004"]}, "code": "function get_exchange_item_id_II(location_id,quantity_id) result(id)\n    !\n    ! return value\n    integer :: id ! # exchange id\n    !\n    !arguments\n    integer :: location_id, quantity_id\n    \n    id = location_id * 1000 + quantity_id * 1\n\nend function"}
{"instruction": "Use Fortran to define a function that returns the number of values for a given time span and exchange item ID.", "test_case": {"param_num": 4, "param_type": "integer,integer,real*8,real*8", "case1": "[1,2,0.0,1.0]", "case2": "[3,4,1.0,2.0]", "case3": "[2,3,0.5,1.5]", "case4": "[5,1,2.0,3.0]", "case5": "[2,4,1.5,2.5]", "result": ["1", "1", "1", "1", "1"]}, "code": "function get_values_count_for_time_span(instance, exchange_item_id, start_time, end_time) result(ret_val)\n    !\n    ! return value\n    integer :: ret_val\n\n    ! arguments\n    integer         , intent(in) :: instance         ! model instance\n    integer         , intent(in) :: exchange_item_id ! type and location of quantity \n                                                     ! (e.g. discharge or waterlevel at point M7)\n    double precision, intent(in) :: start_time       ! start time of values\n    double precision, intent(in) :: end_time         ! end time of values\n\n    ! locals\n    integer :: start_index   ! index in time series values for start_time\n    integer :: end_index     ! index in time series values for end_time\n\n    ! body\n\n    ret_val = -1 ! indices not ok\n    \n    !if (valid_model_instance(instance)) then\n\n    !endif\n\n    ! quick solution:\n    ! always get the latest value computed in postpr > tstat. So the answer is always 1.\n    ret_val = 1\n\n\n    if (ret_val .lt. 0) then\n        write(*,'(A,I2)') 'Error in get_values_count_for_time_span: ', ret_val\n    else\n  !      write(*,'(A,I4,A,F8.2,A,F8.2,A,I2)') 'get_values_count_for_time_span(', &\n  !                                  exchange_item_id,&\n  !                                  ',', start_time, ',', end_time, '): ', ret_val\n    endif\n\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function f95add(a, b) result(ret)\n  implicit none\n  integer :: a\n  integer :: b\n  integer :: ret\n  ret = a + b\nend function"}
{"instruction": "Use Fortran to give me a function that clips a double precision value between a minimum and maximum value.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[1.0,2.0,3.0]", "case2": "[3.5,4.5,5.5]", "case3": "[3.0,2.0,1.0]", "case4": "[5.0,1.0,2.0]", "case5": "[2.5,4.5,3.5]", "result": ["2.00000000", "4.50000000", "1.00000000", "2.00000000", "3.50000000"]}, "code": "function clip_dp(v,minv,maxv)\n   double precision, intent(in) :: v, minv, maxv\n   clip_dp = minval((/maxval((/v,minv/)),maxv/))\nend function"}
{"instruction": "Use Fortran to give me a function that takes an integer value and returns it clipped to a specified range.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,5]", "case2": "[3,4,2]", "case3": "[3,2,1]", "case4": "[5,1,10]", "case5": "[2,4,3]", "result": ["2.00000000", "2.00000000", "1.00000000", "5.00000000", "3.00000000"]}, "code": "function clip_int(v,minv,maxv)\n   integer, intent(in) :: v, minv, maxv\n   clip_int = minval((/maxval((/v,minv/)),maxv/))\nend function"}
{"instruction": "Use Fortran to create a function that generates an array of integers starting from b and incrementing by c until the length of the array is equal to a.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["2", "5          11          17          23", "8          17          26          35          44          53          62", "11          23          35          47          59          71          83          95         107         119", "14          29          44          59          74          89         104         119         134         149         164         179         194"]}, "code": "function v2 (a,b,c)\n      integer:: a,b,c\n      integer:: v2(a)\n      integer j\n      j = b\n      do i = lbound(v2,1),ubound(v2,1)\n       v2(i) = j\n       j = j + c\n      enddo\n      end function"}
{"instruction": "Use Fortran to give me a function for a*b with integer inputs and output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,5]", "case3": "[-1,10]", "case4": "[100,0]", "case5": "[7,-7]", "result": ["6", "0", "-10", "0", "-49"]}, "code": "function multiply(a, b)\n    integer :: a, b, multiply\n    multiply = a * b\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function sum(a, b)\n  ! An example Fortran function.\n  ! Listing 3.4 in the book.\n  integer, intent(in) :: a\n  integer, intent(in) :: b\n  integer :: sum\n  sum = a + b\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 3D array given the lattice, spin, and orbital indices.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["3", "6", "9", "12", "15"]}, "code": "function index_stride_lso(ilat,ispin,iorb) result(indx)\n    integer :: ilat\n    integer :: iorb\n    integer :: ispin\n    integer :: indx\n    indx = iorb + (ilat-1)*Norb + (ispin-1)*Norb*Nlat\n  end function"}
{"instruction": "Use Fortran to create a function that generates a connectivity matrix with N+1 rows and ne columns, where each element is a unique integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,3]", "case2": "[10,5]", "case3": "[2,1]", "case4": "[8,2]", "case5": "[15,7]", "result": ["1           2           3           4           5           6           6           7           8           9          10          11          11          12          13          14          15          16", "1           2           3           4           5           6           7           8           9          10          11          11          12          13          14          15          16          17          18          19          20          21          21          22          23          24          25          26          27          28          29          30          31          31          32          33          34          35          36          37          38          39          40          41          41          42          43          44          45          46          47          48          49          50          51", "1           2           3", "1           2           3           4           5           6           7           8           9           9          10          11          12          13          14          15          16          17", "1           2           3           4           5           6           7           8           9          10          11          12          13          14          15          16          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          91          92          93          94          95          96          97          98          99         100         101         102         103         104         105         106"]}, "code": "function connectivity_matrix(N,ne)\n    integer, intent(in)                             :: N, ne\n    integer                                         :: i, j, c\n    integer                                            connectivity_matrix(N+1,ne)\n\n    c = 1\n    do j=1,ne\n        do i=1,N+1\n            connectivity_matrix(i,j) = c\n            c = c + 1\n        end do\n        c = c -1\n    end do\n\nend function"}
{"instruction": "Use Fortran to create a function that returns a dynamic array of real numbers with m rows and n columns.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2.37851245E-38   0.00000000", "2.18107958E-38   0.00000000       2.17654834E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "2.08924409E-38   0.00000000       2.08471285E-38   0.00000000       0.00000000       0.00000000", "2.17189603E-38   0.00000000       2.16736479E-38   0.00000000       0.00000000", "1.02395233E-38   0.00000000       1.01942109E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000"]}, "code": "function return_dyn_array(m, n)\n  integer :: m, n\n  real :: return_dyn_array(m, n)\nend function"}
{"instruction": "Use Fortran to create a function that calculates the area of a rectangle given its length and width as input arguments.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[5,7]", "case3": "[0,0]", "case4": "[-1,4]", "case5": "[10,10]", "result": ["6.00000000", "35.0000000", "0.00000000", "-4.00000000", "100.000000"]}, "code": "function area(length,width)\r\ninteger, intent(in) :: length,width\r\narea = length*width\r\nend function"}
{"instruction": "Use Fortran to create a function that converts an integer into a character string of a specified length, pre-pending zeros if necessary.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,5]", "case2": "[0,3]", "case3": "[100,2]", "case4": "[-10,1]", "case5": "[999,4]", "result": ["00001", "000", "**", "*", "0999"]}, "code": "function int2str(i, length)\n    ! Converts an integer `i` into a character string of requested length,\n    ! pre-pending zeros if necessary.\n    integer, intent(in) :: i, length\n    character(length) :: int2str\n    character(2) :: string\n    write(string, '(i2)') length\n    write(int2str, '(i' // string // '.' // string //')') i\n  end function"}
{"instruction": "Use Fortran to define a function that calculates RTndt based on input variables a, CF, fsurf, and RTndt0.", "test_case": {"param_num": 4, "param_type": "real*4,real*4,real*4,real*4", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.5,1.5,2.5,3.5]", "case3": "[0.0,0.0,0.0,0.0]", "case4": "[10.0,20.0,30.0,40.0]", "case5": "[0.1,0.2,0.3,0.4]", "result": ["59.9861183", "20.7079582", "50.5568619", "108.210426", "67.7353592"]}, "code": "function RTndt(a, CF, fsurf, RTndt0)\n\n        !Variables\n        real :: RTndt, D_RTepi, D_RTndt, phi, f\n        real, intent(in) :: a, CF, fsurf, RTndt0\n\n        !Calculate D_RTepi\n        call RANDOM_NUMBER(phi)\n        D_RTepi = -29.5+78.0*(-log(1-phi))**(1/1.73)\n\n        !Calculate D_RTndt\n        f = fsurf*exp(-0.24*a)\n        D_RTndt = CF*f**(0.28-0.10*log10(f))\n\n        !Calculate the RTndt\n        RTndt = RTndt0 + D_RTepi + D_RTndt\n\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the average of an array of real numbers.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0,1.0]", "case4": "[2.0,4.0,6.0,8.0]", "case5": "[0.5,1.5,2.5,3.5,4.5]", "result": ["2.00000000", "0.00000000", "1.00000000", "5.00000000", "2.50000000"]}, "code": "function average(x) result(res)\n   real, intent(in) :: x(:)\n   res = sum(x) / size(x)\n  end function"}
{"instruction": "Use Fortran to create a function that searches for a specific key-value pair in a string and returns a logical value indicating whether it was found or not.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'key1=value1,key2=value2', 'key1', 'value1'", "case2": "'key1=value1,key2=value2', 'key2', 'value2'", "case3": "'key1=value1,key2=value2', 'key3', 'value3'", "case4": "'key1=value1,key2=value2', 'key1', 'value2'", "case5": "'key1=value1,key2=value2', 'key2', 'value1'", "result": ["F", "F", "F", "F", "F"]}, "code": "function jakeyvaluelist(keyvaluestr,key,value) result (jafound)\n    implicit none\n    logical                          :: jafound\n    character(len=*),    intent(in)  :: keyvaluestr\n    character(len=*),    intent(in)  :: key\n    character(len=*),    intent(in)  :: value\n    jafound = (index(keyvaluestr,','''//trim(key)//''','''//trim(value)//':')>0)            ! like 'keyword1','value1 : one,two,three','keyword',..... etc\n  end function"}
{"instruction": "Use Fortran to create a function that searches for a specific key-value pair in a string and returns a logical value indicating whether it was found or not.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'key1=value1,key2=value2', 'key1', 'value1'", "case2": "'key1=value1,key2=value2', 'key2', 'value2'", "case3": "'key1=value1,key2=value2', 'key3', 'value3'", "case4": "'key1=value1,key2=value2', 'key1', 'value2'", "case5": "'key1=value1,key2=value2', 'key2', 'value1'", "result": ["F", "F", "F", "F", "F"]}, "code": "function jakeyvalue(keyvaluestr,key,value) result (jafound)\n    implicit none\n    logical                          :: jafound\n    character(len=*),    intent(in)  :: keyvaluestr\n    character(len=*),    intent(in)  :: key\n    character(len=*),    intent(in)  :: value\n    jafound = (index(keyvaluestr,','''//trim(key)//''','''//trim(value)//''',')>0)            ! like 'keyword1','value1','keyword',.....\n  end function"}
{"instruction": "Use Fortran to define a function that takes two integer arguments and returns an integer value, with the function name \"PLASMA_Set_c\" and the arguments \"param\" and \"pval\".", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function PLASMA_Set_c(param, pval) &\n          & bind(c, name='PLASMA_Set')\n            use iso_c_binding\n            implicit none\n            integer(kind=c_int) :: PLASMA_Set_c\n            integer(kind=c_int), value :: param\n            integer(kind=c_int), value :: pval\n         end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an ASCII character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'A'", "case3": "' '", "case4": "'1'", "case5": "'&'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_ascii(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        is_ascii = iachar(c) <= int(z'7F')\n    end function"}
{"instruction": "Use Fortran to create a function that tests whether a given character is a control character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_control(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        integer :: ic\n        ic = iachar(c)\n        is_control = ic < int(z'20') .or. ic == int(z'7F')\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an octal digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'0'", "case2": "'1'", "case3": "'2'", "case4": "'3'", "case5": "'8'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_octal_digit(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        is_octal_digit = (c >= '0') .and. (c <= '7');\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a hexadecimal digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'0'", "case2": "'a'", "case3": "'F'", "case4": "'9'", "case5": "'g'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_hex_digit(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        is_hex_digit = (c >= '0' .and. c <= '9') .or. (c >= 'a' .and. c <= 'f') &\n            .or. (c >= 'A' .and. c <= 'F')\n    end function"}
{"instruction": "Use Fortran to create a function that determines if a given character is graphical or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'!'", "case4": "'~'", "case5": "'1'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_graphical(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        integer :: ic\n        ic = iachar(c)\n        !The character is graphical if it's between '!' and '~' in the ASCII table,\n        !that is: printable but not a space\n        is_graphical = (int(z'21') <= ic) .and. (ic <= int(z'7E'))\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is printable or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'?'", "case4": "'A'", "case5": "'1'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_printable(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        integer :: ic\n        ic = iachar(c)\n        !The character is printable if it's between ' ' and '~' in the ASCII table\n        is_printable = ic >= iachar(' ') .and. ic <= int(z'7E')\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a lowercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'z'", "case4": "'Z'", "case5": "'1'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_lower(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        integer :: ic\n        ic = iachar(c)\n        is_lower = ic >= iachar('a') .and. ic <= iachar('z')\n    end function"}
{"instruction": "Use Fortran to give me a function that tests whether a given character is uppercase or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'a'", "case3": "' '", "case4": "'1'", "case5": "'Z'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_upper(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        is_upper = (c >= 'A') .and. (c <= 'Z')\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a blank space or a tab.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'\\t'", "case4": "'\\n'", "case5": "'\\r'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_blank(c)\n        character(len=1), intent(in) :: c !! The character to test.\n        integer :: ic\n        ic = iachar(c)             ! TAB\n        is_blank = (c == ' ') .or. (ic == int(z'09'));\n    end function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is an uppercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'a'", "case3": "'Z'", "case4": "'z'", "case5": "'1'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isupper(ch) result(res)\n\n! ident_26=\"@(#)M_strings::isupper(3f): returns true if character is an uppercase letter (A-Z)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case('A':'Z')\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that takes in three strings and an integer, and returns a concatenated string with the first and third strings separated by the second string repeated the number of times specified by the integer.", "test_case": {"param_num": 3, "param_type": "character,integer,character", "case1": "['hello', 5, 'world']", "case2": "['goodbye', 0, 'cruel world']", "case3": "['testing', 10, '123']", "case4": "['', 3, '']", "case5": "['abc', -2, 'def']", "result": ["hello 0.00000000 world", "goodbye 0.00000000 cruel world", "testing 0.00000000 123", "0.00000000", "abc 0.00000000 def"]}, "code": "function construct_msg_string(s1, skipcount, s2)\n\ninteger,          intent(in) :: skipcount\ncharacter(len=*), intent(in) :: s1\ncharacter(len=*), intent(in) :: s2\ncharacter(len=80)            :: construct_msg_string\n\ncharacter(len=80) :: string1, string2\n\n! some versions of some compilers (possibly absoft, pgi) have problems\n! with some nested combinations of adjustl() and trim(). avoid the\n! whole issue by bouncing between 2 strings and using them separately.\n\n! the * format adds an initial blank space for the 'hollerith' character.\n! the second write will fail because string1 plus 1 character is longer\n! than string2.  it is ok with \"(A)\" because that keeps the original length.\n\nwrite(string1, *) skip_first_ntimes\nwrite(string2, '(A)') adjustl(string1)\nwrite(string1, '(3(A,1X))') s1, trim(string2), s2\n\nconstruct_msg_string = string1\n\nend function"}
{"instruction": "Use Fortran to create a function that reads a string and returns a logical value based on whether the string matches certain keywords.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'y'", "case2": "'yes'", "case3": "'true'", "case4": "'on'", "case5": "'oui'", "result": ["F", "F", "F", "F", "F"]}, "code": "function read_logical(val) result(res)\n  logical :: res\n  character(*), intent(in) :: val\n  integer :: lv\n  lv = len_trim(val)\n  select case(val(1:lv))\n  case('y',\"yes\",\"true\",\"on\",\"oui\")\n    res = .true.\n  case default\n    res = .false.\n  end select\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[21,14]", "case4": "[100,50]", "case5": "[7,3]", "result": ["5", "5", "7", "50", "1"]}, "code": "function gcd(ai, bi)\n    integer, intent(in) :: ai, bi\n    integer :: gcd\n\n    integer :: a, b, c\n\n    a = ai\n    b = bi\n    do while (b /= 0)\n       c = b\n       b = mod(a,b)\n       a = c\n    end do\n    gcd = a\n\n  end function"}
{"instruction": "Use Fortran to create a function that takes in two integers and returns a formatted string for a floating point number with the given width and decimal places.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[5,10]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[10,-5]", "result": ["(f10.5)", "(f5.10)", "(f0.0)", "(f-5.10)", "(f10.-5)"]}, "code": "function make_fmt(w, d)\r\n    integer, intent(in) :: w, d\r\n    character(len=10) :: make_fmt\r\n    \r\n    write (make_fmt,'(\"(f\",i0,\".\",i0,\")\")') w, d\r\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the Julian day number for a given date.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,1,1]", "case2": "[2021,12,31]", "case3": "[2022,2,28]", "case4": "[2022,3,1]", "case5": "[1582,10,4]", "result": ["2459216", "2459580", "2459639", "2459640", "2299160"]}, "code": "function julday(year,month,day) result(jd)\n\ninteger, intent(in)                     :: year\ninteger, intent(in)                     :: month\ninteger, intent(in)                     :: day\ninteger                                 :: jd\n\n! ... Local variables \n! ...\ninteger, parameter                      :: IGREG=15+31*(10+12*1582)\ninteger ja,jm,jy\n\njy = year\nif (jy.eq.0) stop  'julday: there is no year zero'\nif (jy.lt.0) jy = jy + 1\nif (month.gt.2) then\n  jm = month + 1\nelse\n  jy = jy - 1\n  jm = month + 13\nendif\njd = int(365.25d0*jy)+int(30.6001d0*jm)+day+1720995\nif (day+31*(month+12*year).ge.IGREG) then\n  ja = int(0.01d0*jy)\n  jd = jd + 2 - ja + int(0.25d0*ja)\nendif\n\nend function"}
{"instruction": "Use Fortran to give me a function that compares the absolute values of two integers and returns a logical value indicating which one is greater.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[-5,1]", "case5": "[0,0]", "result": ["F", "F", "T", "T", "F"]}, "code": "function gtabs_int(x,y) result (ordered)\n! Arguments\ninteger, intent(in) :: x\ninteger, intent(in) :: y\n  \n! Result\nlogical :: ordered\n\n! Compare\nif (abs(real(x)) > abs(real(y))) then\n   ordered = .true.\nelse\n   ordered = .false.\nend if\n\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a given range.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["2.00000000", "14.0000000", "62.0000000", "128.000000", "6.00000000"]}, "code": "function randint(lo, hi)\ninteger, intent(in) :: lo, hi\nreal :: r\n\ncall random_number(r)\n\nrandint = floor(r * (hi + 1 - lo)) + lo\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates the Gaussian response of a spectrometer given the wavenumber and the slit FWHM.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.0]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["0.50000000000000000", "0.11970041008732171", "1.0000000000000000", "0.0000000000000000", "0.33856388673422316"]}, "code": "function GaussianResp(x, slitfwhm_cm1)\n  implicit none\n  integer,parameter::dp=selected_real_kind(8) !double precision\n  real(kind=dp),intent(in):: &\n      x,        & !wavenr\n      slitfwhm_cm1    !slitfwhm_cm1\n  real(kind=dp)::pi,sigma\n  real(kind=dp)::GaussianResp\n  if(abs(x).ge.4.d0*slitfwhm_cm1)then\n     GaussianResp = 0.d0\n     return\n  endif \n  GaussianResp = 1.d0\n  pi = 2.d0*asin(1.d0)\n  sigma = slitfwhm_cm1/(2.d0*sqrt(2.d0*log(2.d0)))\n  GaussianResp = exp(-x*x/(2.d0*sigma*sigma)) !/(sigma*sqrt(2.d0*pi))\n  return\n  end function"}
{"instruction": "Use Fortran to create a function that takes a character and an optional integer as input and returns an integer value of 1.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'A',1", "case2": "'B',2", "case3": "'C',3", "case4": "'D',4", "case5": "'E',5", "result": ["1", "1", "1", "1", "1"]}, "code": "function mdsopen (c,int )\n    integer :: mdsopen\n    character(1) :: c\n    integer, optional :: int\n\n    mdsopen = 1\n\n  end function"}
{"instruction": "Use Fortran to create a function that returns the integer 1 and takes an optional integer argument.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'a',1", "case2": "'b',2", "case3": "'c',3", "case4": "'d',4", "case5": "'e',5", "result": ["1", "1", "1", "1", "1"]}, "code": "function mdsconnect (c, int)\n    integer :: mdsconnect\n    character(1) :: c\n    integer, optional :: int\n\n    mdsconnect = 1\n\n  end function"}
{"instruction": "This Fortran function calculates a latitude weight factor based on magnetic latitude, magnetic local time, Kp index, and a width parameter.", "test_case": {"param_num": 4, "param_type": "real*4,real*4,real*4,real*4", "case1": "[0.0,0.0,0.0,0.0]", "case2": "[45.0,90.0,4.0,1.0]", "case3": "[-60.0,120.0,10.0,2.0]", "case4": "[30.0,180.0,5.0,0.5]", "case5": "[-90.0,270.0,8.0,1.5]", "result": ["0.00000000", "4.06109120E-06", "0.999970436", "2.27278673E-30", "1.00000000"]}, "code": "function latwgt2(mlat, mlt, kp0, twidth)\n\n    implicit none\n\n    real(4)                   :: latwgt2\n    real(4)                   :: mlat, mlt, kp0, kp, twidth\n    real(4)                   :: mltrad, sinmlt, cosmlt, tlat\n\n    real(4), parameter :: coeff(0:5) = (/ 65.7633,  -4.60256,  -3.53915,  &\n                                         -1.99971,  -0.752193,  0.972388 /)\n\n    real(4), parameter :: pi=3.141592653590\n    real(4), parameter :: dtor=pi/180.d0\n\n    mltrad = mlt * 15.0 * dtor\n    sinmlt = sin(mltrad)\n    cosmlt = cos(mltrad)\n    kp = max(kp0, 0.0)\n    kp = min(kp,  8.0)\n    tlat = coeff(0) + coeff(1)*cosmlt + coeff(2)*sinmlt +   &\n           kp*(coeff(3) + coeff(4)*cosmlt + coeff(5)*sinmlt)\n    latwgt2 = 1.0 / ( 1 + exp(-(abs(mlat)-tlat)/twidth) )\n\n    return\n\nend function"}
{"instruction": "Use Fortran to create a function that hashes a given key using the Jenkins algorithm and returns a code within a given range.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello', 16]", "case2": "['world', 32]", "case3": "['fortran', 64]", "case4": "['code', 128]", "case5": "['test', 256]", "result": ["10", "24", "61", "40", "202"]}, "code": "function b3hs_hash_key_jenkins (key, range) result (code)\n  INTEGER, PARAMETER       :: KIND_I32 = SELECTED_INT_KIND(10)\n  character(*), intent(in) :: key\n  integer, intent(in)      :: range\n  integer                  :: code\n\n  integer                  :: len_key\n  integer(KIND_I32)        :: a\n  integer(KIND_I32)        :: b\n  integer(KIND_I32)        :: c\n  INTEGER                  :: c_i\n  integer                  :: k\n\n! Hash the key into a code, using the algorithm\n! described by Bob Jenkins at:\n!  http://burtleburtle.net/bob/hash/doobs.html\n!\n! Note that range should be a power of 2, and\n! that the 32-bit algorithm is used\n\n  len_key = LEN_TRIM(key)\n\n  a = -1640531527_KIND_I32 ! 0x9E3779B9\n  b = a\n  c = 305419896_KIND_I32   ! 0x12345678\n\n  k = 1\n\n  char_loop : do\n\n     if(len_key < 12) exit char_loop\n\n! Pack the key into 32 bits\n\n     a = a + ICHAR(key(k+0:k+0))  + ISHFT(ICHAR(key(k+1:k+1)), 8) + &\n     &       ISHFT(ICHAR(key(k+2:k+2)), 16) + ISHFT(ICHAR(key(k+3:k+3)), 24)\n     b = b + ICHAR(key(k+4:k+4))  + ISHFT(ICHAR(key(k+5:k+5)), 8) + &\n     &       ISHFT(ICHAR(key(k+6:k+6)), 16) + ISHFT(ICHAR(key(k+7:k+7)), 24)\n     c = c + ICHAR(key(k+8:k+8))  + ISHFT(ICHAR(key(k+9:k+9)), 8) + &\n     &       ISHFT(ICHAR(key(k+10:k+10)), 16) + ISHFT(ICHAR(key(k+11:k+11)), 24)\n\n! Mix it up\n\n     call b3hs_hash_key_jenkins_mix_()\n\n     k = k + 12\n\n     len_key = len_key - 12\n\n  end do char_loop\n\n  c = c + len_key\n\n! Process remaining bits\n\n  select case(len_key)\n  case(11)\n     c = c + ISHFT(ICHAR(key(k+10:k+10)), 24) + ISHFT(ICHAR(key(k+9:k+9)), 16) + &\n     &       ISHFT(ICHAR(key(k+8:k+8)), 8)\n     b = b + ISHFT(ICHAR(key(k+7:k+7)), 24) + ISHFT(ICHAR(key(k+6:k+6)), 16) + &\n     &       ISHFT(ICHAR(key(k+5:k+5)), 8) + ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(10)\n     c = c + ISHFT(ICHAR(key(k+9:k+9)), 16) + ISHFT(ICHAR(key(k+8:k+8)), 8)\n     b = b + ISHFT(ICHAR(key(k+7:k+7)), 24) + ISHFT(ICHAR(key(k+6:k+6)), 16) + &\n     &       ISHFT(ICHAR(key(k+5:k+5)), 8) + ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(9)\n     c = c + ISHFT(ICHAR(key(k+8:k+8)), 8)\n     b = b + ISHFT(ICHAR(key(k+7:k+7)), 24) + ISHFT(ICHAR(key(k+6:k+6)), 16) + &\n     &       ISHFT(ICHAR(key(k+5:k+5)), 8) + ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(8)\n     b = b + ISHFT(ICHAR(key(k+7:k+7)), 24) + ISHFT(ICHAR(key(k+6:k+6)), 16) + &\n     &       ISHFT(ICHAR(key(k+5:k+5)), 8) + ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(7)\n     b = b + ISHFT(ICHAR(key(k+6:k+6)), 16) + ISHFT(ICHAR(key(k+5:k+5)), 8) + &\n     &       ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(6)\n     b = b + ISHFT(ICHAR(key(k+5:k+5)), 8) + ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(5)\n     b = b + ICHAR(key(k+4:k+4))\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(4)\n     a = a + ISHFT(ICHAR(key(k+3:k+3)), 24) + ISHFT(ICHAR(key(k+2:k+2)), 16) + &\n     &       ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(3)\n     a = a + ISHFT(ICHAR(key(k+2:k+2)), 16) + ISHFT(ICHAR(key(k+1:k+1)), 8) + &\n     &       ICHAR(key(k:k))\n  case(2)\n     a = a + ISHFT(ICHAR(key(k+1:k+1)), 8) + ICHAR(key(k:k))\n  case(1)\n     a = a + ICHAR(key(k:k))\n  end select\n\n  call b3hs_hash_key_jenkins_mix_()\n\n  c_i = INT(c)\n  code = IAND(c_i, RANGE - 1) + 1\n\n! Finish\n\n  return\n\ncontains\n\n  subroutine b3hs_hash_key_jenkins_mix_\n\n! Mix a, b and c\n\n    a = IEOR(a - b - c, ISHFT(c, -13))\n    b = IEOR(b - c - a, ISHFT(a, 8))\n    c = IEOR(c - a - b, ISHFT(b, -13))\n\n    a = IEOR(a - b - c, ISHFT(c, -12))\n    b = IEOR(b - c - a, ISHFT(a, 16))\n    c = IEOR(c - a - b, ISHFT(b, -5))\n\n    a = IEOR(a - b - c, ISHFT(c, -3))\n    b = IEOR(b - c - a, ISHFT(a, 10))\n    c = IEOR(c - a - b, ISHFT(b, -15))\n\n! Finish\n\n    return\n\n  end subroutine b3hs_hash_key_jenkins_mix_\n\nend function"}
{"instruction": "Use Fortran to create a function that takes a string and a length and returns the string with leading and trailing spaces removed and the length specified.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',5", "case2": "'  hello  ',7", "case3": "'  hello  ',5", "case4": "'hello',0", "case5": "'hello',6", "result": ["hello", "hello", "hello", "", "hello"]}, "code": "function strip_length_(value, length)\n    implicit none\n    character(len=*), intent(in) :: value\n    integer, intent(in) :: length\n    character(len= length):: strip_length_\n    strip_length_ = trim(adjustl(value))\n  end function"}
{"instruction": "Use Fortran to define a function that compares two double precision numbers with a given tolerance and returns a logical value indicating if they are equal or not.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,1.0]", "case2": "[0.0,0.0]", "case3": "[1.0,1.000001]", "case4": "[1.0,1.0001]", "case5": "[1.0,1.0000001]", "result": ["T", "T", "F", "F", "T"]}, "code": "function doublePrecisionEqual (number1, number2 ) result (resultValue)\n    double precision , intent (in) :: number1, number2\n    real :: epsilon \n    logical :: resultValue \n\n    resultValue = .false.\n    epsilon = 1E-6\n    !epsilon = epsilon (number1)\n\n    ! test very small number1\n    if ( abs(number1) < epsilon .and.  abs(number1 - number2) < epsilon ) then\n       resultValue = .true.\n    else \n       if ((abs(( number1 - number2)) / number1) < epsilon ) then\n          resultValue = .true.\n       else\n          resultValue = .false.\n       end if\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that compares two integers and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,0]", "case3": "[100,100]", "case4": "[-5,-5]", "case5": "[2147483647,2147483647]", "result": ["T", "T", "T", "T", "T"]}, "code": "function integerEqual (number1, number2 ) result (resultValue)\n    integer , intent (in) :: number1, number2\n    logical :: resultValue \n\n    resultValue = .false.\n\n    if ( number1 .eq. number2 ) then\n       resultValue = .true.\n    else \n       resultValue = .false.\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that compares two strings and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','world'", "case3": "'hello','world'", "case4": "'fortran','Fortran'", "case5": "'123','12345'", "result": ["T", "T", "F", "F", "F"]}, "code": "function stringEqual (str1, str2 ) result (resultValue)\n    character(*) , intent (in) :: str1, str2\n    logical :: resultValue \n\n    resultValue = .false.\n\n    if ( str1 .eq. str2 ) then\n       resultValue = .true.\n    end if\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the Legendre polynomial of order N at point x.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[0,0.5]", "case2": "[1,1.5]", "case3": "[2,2.5]", "case4": "[3,3.5]", "case5": "[4,4.5]", "result": ["1.0000000000000000", "1.5000000000000000", "8.8750000000000000", "101.93750000000000", "1718.4609375000000"]}, "code": "function legendrep(N,x) result(fac)\n    !implicit none\n    real (kind=8) :: fac\n    real (kind=8), intent(in) :: x\n    integer, intent(in) :: N\n    real (kind=8), dimension(N+1) :: poly\n    integer :: i\n\n    select case (N)\n        case (0)\n        poly(1) = 1\n        fac = poly(1)\n\n        case (1)\n        poly(2) = x\n        fac = poly(2)\n\n        case default\n        poly(1) = 1\n        poly(2) = x\n    end select\n\n    do i=3,N+1\n        poly(i) = ((2*(i-1)-1)*x*poly(i-1) - (i-2)*poly(i-2))/(i-1)\n    end do\n    fac = poly(N+1)\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer array as an argument, sets the first element to 99, and returns a pointer to the first element.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[0,-1,-2,-3]", "case3": "[100,200,300,400]", "case4": "[5,6,7,8,9]", "case5": "[10,20,30,40,50,60]", "result": ["99", "99", "99", "99", "99"]}, "code": "function foo (arg)\n    integer, pointer :: foo\n    integer, target :: arg(:)\n    foo => arg (1)\n    foo = 99\n  end function"}
{"instruction": "Use Fortran to create a function that gets the value of an environment variable and returns it, or returns a default value if the variable is not defined.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'HOME','/home/user/'", "case2": "'USER','user'", "case3": "'','/usr/local/'", "case4": "'PATH','/usr/bin:/usr/local/bin'", "case5": "'LANG','en_US.UTF-8'", "result": ["/home/user/", "user", "/usr/local/", "D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;D:\\Miniconda3\\bin;D:\\Miniconda3\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;C:\\Program Files\\Microsoft\\jdk-11.0.16.101-hotspot\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0;D:\\;D:\\fortran\\mingw64\\bin;C:\\Users\\98365\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;.;D:\\PyCharm 2023.2.1\\bin;.;D:\\Microsoft VS Code\\bin;D:\\Miniconda3\\Library\\Bin", "en_US.UTF-8"]}, "code": "function get_env(NAME,DEFAULT) result(VALUE)\nimplicit none\ncharacter(len=*),intent(in)          :: NAME\ncharacter(len=*),intent(in),optional :: DEFAULT\ncharacter(len=:),allocatable         :: VALUE\ninteger                              :: howbig\ninteger                              :: stat\ninteger                              :: length\n   ! get length required to hold value\n   length=0\n   if(NAME.ne.'')then\n      call get_environment_variable(NAME, length=howbig,status=stat,trim_name=.true.)\n      select case (stat)\n      case (1)\n          !x!print *, NAME, \" is not defined in the environment. Strange...\"\n          VALUE=''\n      case (2)\n          !x!print *, \"This processor doesn't support environment variables. Boooh!\"\n          VALUE=''\n      case default\n          ! make string to hold value of sufficient size\n          if(allocated(value))deallocate(value)\n          allocate(character(len=max(howbig,1)) :: VALUE)\n          ! get value\n         call get_environment_variable(NAME,VALUE,status=stat,trim_name=.true.)\n          if(stat.ne.0)VALUE=''\n      end select\n   else\n      VALUE=''\n   endif\n   if(VALUE.eq.''.and.present(DEFAULT))VALUE=DEFAULT\nend function"}
{"instruction": "Use Fortran to give me a function that returns a logical value indicating whether a certain mathematical predicate is true or false.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[15,4]", "case4": "[20,5]", "case5": "[25,6]", "result": ["F", "F", "F", "F", "F"]}, "code": "function predicate(n,r)\n    implicit none\n    integer, intent(in) :: n, r\n    integer             :: i\n    double precision    :: temp\n    logical             :: predicate\n\n    predicate=.false.\n    temp=1.0\n    do i=1,r\n       temp=temp*(n-(r-i)) ! gets larger\n       temp=temp/(r-i+1)   ! gets smaller\n       if (temp>1000000.0) then\n          predicate=.true.\n          exit\n       end if\n    end do\n    \n  end function"}
{"instruction": "Use Fortran to give me a function that reverses the order of an integer array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[5,4,3,2,1]", "case3": "[0,0,0,0,0]", "case4": "[1,2,3,4,5,6,7,8,9,10]", "case5": "[10,9,8,7,6,5,4,3,2,1]", "result": ["5           4           3           2           1", "1           2           3           4           5", "0           0           0           0           0", "10           9           8           7           6           5           4           3           2           1", "1           2           3           4           5           6           7           8           9          10"]}, "code": "function reverse(array) result(value)\n        integer, dimension(:), intent(in out) :: array\n        integer, dimension(size(array))       :: value\n\n        value = array(size(array):1:-1)\n    end function"}
{"instruction": "Use Fortran to create a function that concatenates a directory and a file, with sanity checks and fixes.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'dir/','file.txt'", "case2": "'dir/',''", "case3": "'','file.txt'", "case4": "'dir','file.txt'", "case5": "'dir/','file with spaces.txt'", "result": ["dir/file.txt", "dir/", "file.txt", "dir/file.txt", "dir/file with spaces.txt"]}, "code": "function make_file_path(directory,file)\n  !\n  ! Concatenate directory and file, with sanity checks and fixes\n  !\n  character*(*) :: directory,file\n  character*500 :: dir,make_file_path\n  integer l\n  dir = trim(directory)\n  l = len_trim(dir)\n  if (l.gt.1) then\n     do while ((l .gt. 1) .and. dir(l:l) .eq. '/')\n        dir(l:l) = ' '\n        l = len_trim(dir)\n     enddo\n  endif\n  if (dir .eq. '') then\n     make_file_path = file\n  else\n     make_file_path = trim(trim(dir) // '/' // file)\n  endif\n  return\nend function"}
{"instruction": "Use Fortran to create a function that returns the color index of a wall based on its number and side.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,1]", "case4": "[4,2]", "case5": "[5,1]", "result": ["2.00000000", "5.00000000", "6.00000000", "9.00000000", "10.0000000"]}, "code": "function wall_color(wall, side)\n        !! Returns the wall's color index.\n        integer, intent(in) :: wall\n        integer, intent(in) :: side\n\n        wall_color = 1 + (wall * 2)\n\n        if (side == 1) &\n            wall_color = wall_color - 1\n    end function"}
{"instruction": "Use Fortran to create a new group with a given number of processes and a key.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,5,10]", "case3": "[100,-50,2]", "case4": "[0,0,0]", "case5": "[10,10,10]", "result": ["7", "50", "0", "0", "110"]}, "code": "function comm_create_group(ngid, nprocs, key) result(ngid_dst)\n    implicit none\n    integer, intent(in) :: ngid, nprocs, key\n    integer :: ngid_dst\n    ngid_dst = ngid + key * nprocs\n  end function"}
{"instruction": "Use Fortran to give me a function that searches for a specific string within a larger string and returns a logical value indicating whether or not it was found.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello world'", "case2": "'world','hello world'", "case3": "'world','hello'", "case4": "'','hello world'", "case5": "'hello',''", "result": ["T", "T", "F", "T", "F"]}, "code": "function find_string( string, test ) result ( found )\n\n!            function to find a string in a test-string\n\n      character(*) string\n      character(*) test\n      logical      found\n\n!            local declarations\n\n      integer      lens, lent, i\n\n      found = .true.\n      lens  = len_trim(string) - 1\n      lent  = len_trim(test  )\n      do i = 1, lent-lens\n         if ( string .eq. test(i:i+lens) ) return\n      enddo\n      found = .false.\n\n      end function"}
{"instruction": "Use Fortran to create a function that checks if an array of integers is sorted in ascending order.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[5,4,3,2,1]", "case3": "[1,3,2,5,4]", "case4": "[1]", "case5": "[2,4,6,8,10]", "result": ["T", "F", "F", "T", "T"]}, "code": "function isSorted(array) result(sorted)\n        integer, dimension(:), intent(in) :: array\n        logical                           :: sorted\n\n        integer index\n\n        do index = 2, size(array)\n            if (array(index - 1) > array(index)) then\n                sorted =  .false.\n                return\n            end if\n         end do\n\n         sorted = .true.\n     end function"}
{"instruction": "Use Fortran to give me a function that calculates a unique global ID for a given pair of indices iorb and jorb, given the total number of orbitals norb.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["2", "23", "62", "119", "194"]}, "code": "function couple_global_id(iorb,jorb,norb) result(id)\n        implicit none\n        integer, intent(in) :: iorb,jorb,norb\n        integer :: id\n        !local variables\n        integer :: ii,jj\n        ii=max(iorb,jorb)\n        jj=min(iorb,jorb)\n\n        if (ii > norb .or. jj > norb) then\n           print *,'error',ii,jj,norb\n           stop\n        end if\n        \n        id=ii+(jj-1)*norb\n      end function"}
{"instruction": "Use Fortran to give me a function that calculates a unique global ID for a given pair of local IDs and the total number of local IDs.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[10,5,2]", "case4": "[100,50,10]", "case5": "[7,7,7]", "result": ["2", "0", "18", "590", "49"]}, "code": "function couple_global_id(iorb,jorb,norb) result(id)\n        implicit none\n        integer, intent(in) :: iorb,jorb,norb\n        integer :: id\n        !local variables\n        integer :: ii,jj\n        ii=max(iorb,jorb)\n        jj=min(iorb,jorb)\n        id=ii+(jj-1)*norb\n      end function"}
{"instruction": "Use Fortran to give me a function for the polygamma function with inputs n and s.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,0.5]", "case2": "[2,1.5]", "case3": "[3,2.5]", "case4": "[4,3.5]", "case5": "[5,4.5]", "result": ["4.0000000000000000", "-0.74074074074074070", "0.20480000000000001", "-6.2830963289105729E-002", "2.0231784901804717E-002"]}, "code": "function polygamma(n, s)\n    integer, intent(in) :: n\n    double precision, intent(in) :: s\n    double precision :: polygamma\n    integer :: k\n    double precision :: x, t, u, v, w\n    x = s\n    u = 1.0d0\n    do k = 1-n, -1\n       u = u * k\n    end do\n    v = 0.0d0\n    do while (x < CN)\n       v = v + 1.0d0 / x**(n+1)\n       x = x + 1.0d0\n    end do\n    w = x * x\n    t = (((((((B16 &\n         * (n + 15.0d0) * (n + 14.0d0) / (16.0d0 * 15.0d0 * w) + B14) &\n         * (n + 13.0d0) * (n + 12.0d0) / (14.0d0 * 13.0d0 * w) + B12) &\n         * (n + 11.0d0) * (n + 10.0d0) / (12.0d0 * 11.0d0 * w) + B10) &\n         * (n +  9.0d0) * (n +  8.0d0) / (10.0d0 *  9.0d0 * w) + B8) &\n         * (n +  7.0d0) * (n +  6.0d0) / ( 8.0d0 *  7.0d0 * w) + B6) &\n         * (n +  5.0d0) * (n +  4.0d0) / ( 6.0d0 *  5.0d0 * w) + B4) &\n         * (n +  3.0d0) * (n +  2.0d0) / ( 4.0d0 *  3.0d0 * w) + B2) &\n         * (n +  1.0d0) * n / (2.0d0 * 1.0d0 * w) + 0.5d0 * n / x + 1.0d0\n    polygamma = u * (t / x**n + n*v)\n  end function"}
{"instruction": "Use Fortran to create a function that takes an optional character input and returns it if it is present, otherwise returns a default character input.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'test', 'case'", "case4": "'optional', 'parameter'", "case5": "'default', 'value'", "result": ["hello", "fortran", "test", "optional", "default"]}, "code": "function optval_character(x, default) result(y)\n    character(len=*), intent(in), optional :: x\n    character(len=*), intent(in) :: default\n    character(len=:), allocatable :: y\n\n    if (present(x)) then\n       y = x\n    else\n       y = default\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that calculates a swizzle value based on the input values of sa, blkn, and nelim.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["1.00000000", "1.00000000", "1.00000000", "1.00000000", "1.00000000"]}, "code": "function swizzle_sa(sa, blkn, nelim)\n   integer, intent(in) :: sa\n   integer, intent(in) :: blkn\n   integer, intent(in) :: nelim\n\n   swizzle_sa = (sa-1) / blkn\n   swizzle_sa = nelim *swizzle_sa + 1\nend function"}
{"instruction": "Use Fortran to create a function that takes in three integers and a maximum integer value, and returns a unique key based on the input values.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,6,7,8]", "case3": "[10,20,30,40]", "case4": "[100,200,300,400]", "case5": "[0,0,0,0]", "result": ["7", "303", "15190", "15919900", "0"]}, "code": "function three2key(a, b, c, max_id) result(key)\n\n    implicit none\n\n    integer, intent(in) :: a, b, c, max_id\n    integer :: key\n\n    key = (a-1)*max_id**2 + (b-1)*max_id + c\n\nend function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is an alphabetic letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_alpha_int(c) result(res)\n    character(len=1), intent(in) :: c\n    logical :: res\n    associate(ic => iachar(c))\n      res = (ic >= 65 .and. ic <= 90) .or. &\n            (ic >= 97 .and. ic <=122)\n    end associate\n  end function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is an alphabetic character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_alpha_lexical(c) result(res)\n    character(len=1), intent(in) :: c\n    logical :: res\n    res = (\"A\" <= c .and. c <= \"Z\") .or. (\"a\" <= c .and. c <= \"z\")\n  end function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is an alphabetic character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'z'", "case4": "'Z'", "case5": "'1'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_alpha_compare(c) result(res)\n    character(len=1), intent(in) :: c\n    logical :: res\n    res = abs(ishft(ibclr(iachar(c),5), 1) -  155) <= 25\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an alphabetic character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_alpha_select(c) result(res)\n    character(len=1), intent(in) :: c\n    logical :: res\n    select case(iachar(c))\n      case (65:90, 97:122)\n        res = .true.\n      case default\n        res = .false.\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that generates a linearly spaced array of nx points between x0 and x1 using OpenMP parallelization.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[0.0,1.0,5]", "case2": "[0.0,1.0,10]", "case3": "[-1.0,1.0,5]", "case4": "[0.0,0.0,1]", "case5": "[1.0,2.0,3]", "result": ["0.0000000000000000       0.25000000000000000       0.50000000000000000       0.75000000000000000        1.0000000000000000", "0.0000000000000000       0.11111111111111110       0.22222222222222221       0.33333333333333331       0.44444444444444442       0.55555555555555558       0.66666666666666663       0.77777777777777768       0.88888888888888884        1.0000000000000000", "-1.0000000000000000      -0.50000000000000000        0.0000000000000000       0.50000000000000000        1.0000000000000000", "NaN", "1.0000000000000000        1.5000000000000000        2.0000000000000000"]}, "code": "function linspace(x0, x1, nx) result(xs)\n\n    implicit none\n\n    double precision, intent(in) :: x0\n    double precision, intent(in) :: x1\n    integer, intent(in) :: nx\n\n    double precision, dimension(nx) :: xs\n\n    integer :: i\n    double precision :: step\n\n    step = (x1 - x0) / (nx - 1)\n\n    !$OMP PARALLEL DO\n    do i = 1, nx\n        xs(i) = x0 + (i - 1) * step\n    enddo\n    !$OMP END PARALLEL DO\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates a value based on input parameters and returns the result.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.5,2.5,3.5,4.5]", "case4": "[0.5,0.25,0.125,0.0625]", "case5": "[10.0,20.0,30.0,40.0]", "result": ["3.0000000000000000", "0.0000000000000000", "8.4312476834689178", "0.19263793759278050", "5515.4328932550707"]}, "code": "function dadtau(axp_tau,O_mat_0,O_vac_0,O_k_0) \n  real(kind=8)::dadtau,axp_tau,O_mat_0,O_vac_0,O_k_0\n  dadtau = axp_tau*axp_tau*axp_tau *  &\n       &   ( O_mat_0 + &\n       &     O_vac_0 * axp_tau*axp_tau*axp_tau + &\n       &     O_k_0   * axp_tau )\n  dadtau = sqrt(dadtau)\n  return\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns 1.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "1", "1", "1", "1"]}, "code": "function real_add(a,b)\n         integer :: real_add\n         integer, intent(in) :: a,b\n         real_add = 1\n      end function"}
{"instruction": "Use Fortran to create a function that extracts the prefix of a file name given its extension.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','txt'", "case2": "'file.txt','doc'", "case3": "'file','txt'", "case4": "'file.txt',''", "case5": "'file','doc'", "result": ["file.", "file.txt", "file", "", "file"]}, "code": "function get_file_prefix(file,extension) result(prefix)\n        character(*),       intent(in)  :: file\n        character(*),       intent(in)  :: extension\n\n        character(len=:), allocatable   :: prefix\n        integer                         :: iext, extloc\n        \n        !\n        ! Check if the file name has already the extension\n        !\n        extloc = index(file, trim(extension))\n\n        if ( extloc == 0 ) then\n            prefix = file\n        else\n            prefix = trim(file(1:extloc-1))\n        end if\n\n    end function"}
{"instruction": "Use Fortran to create a function that takes an optional character input and returns the input if it is present, otherwise it returns a default value.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'', 'default'", "case4": "'optional', 'value'", "case5": "'test', ''", "result": ["hello", "fortran", "", "optional", "test"]}, "code": "function optval_char(opt, default) result(val)\n        character(len=*), intent(inout), optional :: opt\n        character(len=*), intent(in) :: default\n        character(len=:), allocatable :: val\n\n        if (present(opt)) then\n            val = opt\n        else\n            val = default\n        end if\n\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integer arrays and returns an array that contains the intersection of the ranges defined by the two input arrays.", "test_case": {"param_num": 2, "param_type": "integer(:),integer(:)", "case1": "[[1,2,3,4],[2,3,4,5]]", "case2": "[[1,2,3,4],[3,4,5,6]]", "case3": "[[1,2,3,4],[4,5,6,7]]", "case4": "[[1,2,3,4],[5,6,7,8]]", "case5": "[[1,2,3,4],[6,7,8,9]]", "result": ["2           3           3           4", "3           4           3           4", "4           5           3           4", "5           6           3           4", "6           7           3           4"]}, "code": "function rintersecti(r1,r2) result(rintersectout)\n  integer, dimension(:), intent(in) :: r1,r2\n  integer, dimension(size(r1)) :: rintersectout\n  integer :: k,i\n  k = size(r1)/2\n  do i=1,k\n     rintersectout(i) = max(r1(i),r2(i))\n     rintersectout(i+k) = min(r1(i+k),r2(i+k))\n  end do\nend function"}
{"instruction": "Use Fortran to give me a function that checks if a given integer array is non-empty.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4]", "case2": "[5,6,7,8,9]", "case3": "[1,2,3,3]", "case4": "[1,2,3,2]", "case5": "[1,2,3,4,5,6]", "result": ["T", "T", "T", "F", "T"]}, "code": "function nonemptyi(rect) result(nonemptyout)\n  integer, dimension(:), intent(in) :: rect\n  logical :: nonemptyout\n  integer :: k,i\n  k=size(rect)/2\n  nonemptyout = .true.\n  do i=1,k\n     if (rect(i) >= rect(i+k)) nonemptyout = .false.\n  end do\nend function"}
{"instruction": "Use Fortran to create a function that takes in two integers and returns the remainder of the first integer divided by the second integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "3.00000000", "1.00000000", "0.00000000", "2.00000000"]}, "code": "function get_rank(rnk, n)\n        integer, intent(in) :: rnk, n\n        get_rank = modulo(rnk, n)\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that counts the number of instances of a single character in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'apple','p'", "case3": "'banana','a'", "case4": "'12345','5'", "case5": "'testing','t'", "result": ["2", "2", "3", "1", "2"]}, "code": "function CountChar(str1,solo)\n! Count the number of instances of the single character in a character string.\n! useful when parsing a comma-separated list, for example.\n! Count the commas and add 1 to get the number of items in the list.\n\ninteger                      :: CountChar\ncharacter(len=*), intent(in) :: str1\ncharacter,        intent(in) :: solo\n\ninteger :: i\n\nCountChar = 0\ndo i = 1,len_trim(str1)\n   if (str1(i:i) == solo) CountChar = CountChar + 1\nenddo\n\nend function"}
{"instruction": "Use Fortran to define a function that checks if an error occurred and prints an error message with the error code if it did.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'test',0", "case2": "'test',1", "case3": "'test',-1", "case4": "'test',100", "case5": "'test',-100", "result": ["F", "T", "T", "T", "T"]}, "code": "function failure(msg,ierr)\n        use, intrinsic :: iso_fortran_env, only: error_unit\n        character(len=*), intent(in) :: msg\n        integer, intent(in) :: ierr\n        logical :: failure\n        \n        failure = (ierr /= 0)\n        if (failure) then\n            write(error_unit,*) trim(msg),': ierr = ',ierr\n        end if\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer arguments and returns an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,-4]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function operator(x,y) result(ret)\n            use, intrinsic:: iso_fortran_env\n            integer(int32),intent(in):: x,y\n            integer(int32):: ret\n        end function"}
{"instruction": "Use Fortran to give me a function that calculates the binomial coefficient of n and k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["10.000000000000000", "120.00000000000000", "35.000000000000000", "3003.0000000000000", "184756.00000000000"]}, "code": "function bin(n, k)\n\n              implicit none\n              integer, intent (in) :: n\n              integer, intent (in) :: k\n              integer :: i\n              real*8 :: bin\n\n              bin = 1\n\n              do i=1,k\n                  bin = bin * (n - i + 1) / i\n              enddo\n\n              return\n\n          end function"}
{"instruction": "Use Fortran to create a function that initializes a 2D array with a given lower and upper bound for both dimensions and returns a pointer to the array.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,5,1,5]", "case2": "[0,3,0,3]", "case3": "[-2,2,-2,2]", "case4": "[10,20,30,40]", "case5": "[0,0,0,0]", "result": ["0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000"]}, "code": "function var_init_bound_2d (ilb, iub, jlb, jub) result (var)\n\n  integer, intent(in)           :: ilb, iub, jlb, jub\n  real, dimension(:,:), pointer :: var\n\n    allocate ( var (ilb:iub, jlb:jub) )\n    var = 0.0\n\n end function"}
{"instruction": "Use Fortran to create a function that initializes a 3D array with zeros and returns a pointer to the array.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,5,1,5,3]", "case2": "[0,10,0,10,5]", "case3": "[-5,5,-5,5,2]", "case4": "[1,1,1,1,1]", "case5": "[0,0,0,0,0]", "result": ["0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000", ""]}, "code": "function var_init_bound_3d (ilb, iub, jlb, jub, kdim) result (var)\n\n  integer, intent(in)             :: ilb, iub, jlb, jub, kdim\n  real, dimension(:,:,:), pointer :: var\n\n    allocate ( var (ilb:iub, jlb:jub, 1:kdim) )\n    var = 0.0\n\n end function"}
{"instruction": "Use Fortran to define a function that calculates the chi-squared value for a given degree of freedom and significance level.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[10,0.05]", "case2": "[5,0.01]", "case3": "[3,0.1]", "case4": "[100,0.001]", "case5": "[50,0.05]", "result": ["3.2700248598274577E-317", "3.2700248598274577E-317", "3.2700248598274577E-317", "3.2700248598274577E-317", "3.2700248598274577E-317"]}, "code": "function Chi_alpha_square(nu_, alpha_)\n            implicit none\n            integer, parameter :: dp = selected_real_kind(8)\n\n            integer, optional :: nu_ ! \u81ea\u7531\u5ea6\n            real(dp), intent(in), optional :: alpha_ ! \u663e\u8457\u6c34\u5e73\n            real(dp) :: Chi_alpha_square\n        end function"}
{"instruction": "Use Fortran to create a function named \"fn1\" that takes two integer arguments and returns an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,0]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function fn1 (x, y)\n      integer, intent(in) :: x, y\n      integer :: fn1\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns the sum of the first input and twice the second input.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["5", "11", "7", "7", "10"]}, "code": "function fn1 (x, y)\n  integer, intent(in) :: x, y\n  integer :: fn1\n  fn1 = x + 2 * y\nend function"}
{"instruction": "Use Fortran to create a function that checks the version of the GLib library.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["1", "4", "7", "10", "13"]}, "code": "function glib_check_version( &\n        required_major, &\n        required_minor, &\n        required_micro &\n    ) bind(c)\n      use iso_c_binding, only: c_int, c_ptr\n      integer(c_int), value :: required_major\n      integer(c_int), value :: required_minor\n      integer(c_int), value :: required_micro\n      type(c_ptr) glib_check_version\n    end function"}
{"instruction": "Use Fortran to create a function that allocates memory for n_blocks of size n_block_bytes and initializes it to zero.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[100,200]", "case3": "[0,0]", "case4": "[5,10]", "case5": "[1000,1]", "result": ["10", "100", "0", "5", "1000"]}, "code": "function g_malloc0_n( &\n        n_blocks, &\n        n_block_bytes &\n    ) bind(c)\n      use iso_c_binding, only: c_long, c_ptr\n      integer(c_long), value :: n_blocks\n      integer(c_long), value :: n_block_bytes\n      type(c_ptr) g_malloc0_n\n    end function"}
{"instruction": "Use Fortran to create a function that allocates memory for n_blocks of size n_block_bytes.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[100,50]", "case3": "[5,100]", "case4": "[0,0]", "case5": "[1,1]", "result": ["10", "100", "5", "0", "1"]}, "code": "function g_malloc_n( &\n        n_blocks, &\n        n_block_bytes &\n    ) bind(c)\n      use iso_c_binding, only: c_long, c_ptr\n      integer(c_long), value :: n_blocks\n      integer(c_long), value :: n_block_bytes\n      type(c_ptr) g_malloc_n\n    end function"}
{"instruction": "Use Fortran to create a function that allocates memory for n_blocks of size n_block_bytes and initializes it to zero.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function g_try_malloc0_n( &\n        n_blocks, &\n        n_block_bytes &\n    ) bind(c)\n      use iso_c_binding, only: c_long, c_ptr\n      integer(c_long), value :: n_blocks\n      integer(c_long), value :: n_block_bytes\n      type(c_ptr) g_try_malloc0_n\n    end function"}
{"instruction": "Use Fortran to create a function that allocates memory for n_blocks of size n_block_bytes.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[100,50]", "case3": "[5,100]", "case4": "[0,0]", "case5": "[1,1]", "result": ["10", "100", "5", "0", "1"]}, "code": "function g_try_malloc_n( &\n        n_blocks, &\n        n_block_bytes &\n    ) bind(c)\n      use iso_c_binding, only: c_long, c_ptr\n      integer(c_long), value :: n_blocks\n      integer(c_long), value :: n_block_bytes\n      type(c_ptr) g_try_malloc_n\n    end function"}
{"instruction": "Use Fortran to create a function that takes in an integer file descriptor and a condition and returns a pointer to a new Unix file descriptor source.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,0]", "case2": "[3,1]", "case3": "[2,2]", "case4": "[5,3]", "case5": "[0,4]", "result": ["1", "3", "2", "5", "0"]}, "code": "function g_unix_fd_source_new( &\n        fd, &\n        condition &\n    ) bind(c)\n      use iso_c_binding, only: c_int, c_ptr\n      integer(c_int), value :: fd\n      integer(c_int), value :: condition\n      type(c_ptr) g_unix_fd_source_new\n    end function"}
{"instruction": "Use Fortran to define a function that calculates the Earth's semi-major axis given the Earth's equatorial radius, eccentricity squared, and latitude.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[6378.137,0.00669437999014,0.7853981633974483]", "case2": "[3396.19,0.00676865799761,1.0471975511965976]", "case3": "[1737.1,0.0064763032182,0.5235987755982988]", "case4": "[6051.8,0.00669438499959,0.17453292519943295]", "case5": "[3389.5,0.00676865799761,0.7853981633974483]", "result": ["6388.83838", "3404.84326", "1738.50793", "6052.41113", "3395.25024"]}, "code": "function reast(r_a,r_e2,r_lat)\n    real*8, intent(in) ::  r_a,r_e2,r_lat      \n    reast = r_a/sqrt(1.d0 - r_e2*sin(r_lat)**2) \n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the radius of curvature of the meridian at a given latitude.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[6378137.0,0.00669437999014,0.7853981633974483]", "case2": "[6378137.0,0.00669437999014,0.0]", "case3": "[6378137.0,0.00669437999014,1.5707963267948966]", "case4": "[6378137.0,0.00669437999014,-1.5707963267948966]", "case5": "[6378137.0,0.00669437999014,0.5235987755982988]", "result": ["6367382.00", "6335439.50", "6399593.50", "6399593.50", "6351377.00"]}, "code": "function rnorth(r_a,r_e2,r_lat)\n    real*8, intent(in) ::  r_a,r_e2,r_lat\n    rnorth = (r_a*(1.d0 - r_e2))/(1.d0 - r_e2*sin(r_lat)**2)**(1.5d0) \n  end function"}
{"instruction": "Use Fortran to give me a function that wraps an integer i to the range 1 to m.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,3]", "case3": "[0,5]", "case4": "[10,10]", "case5": "[3,0]", "result": ["1", "2", "5", "10", "3"]}, "code": "function i_wrap(i, m)\n    integer, intent(in) :: i, m\n    integer :: i_wrap\n\n    if (i > m) then\n        i_wrap = i - m\n    else if (i < 1) then\n        i_wrap = i + m\n    else\n        i_wrap = i\n    end if\nend function"}
{"instruction": "Use Fortran to create a function that takes a character tag and a double precision scalar t as input and returns an integer y as output.", "test_case": {"param_num": 2, "param_type": "character,real*8", "case1": "['tag1',1.0]", "case2": "['tag2',2.5]", "case3": "['tag3',-3.0]", "case4": "['tag4',0.0]", "case5": "['tag5',4.2]", "result": ["6618568", "6618568", "6618568", "6618568", "6618568"]}, "code": "function set_state_scalar_py(tag, t) result(y)&\n            bind(c, name='set_state_scalar')\n         use iso_c_binding\n         character(c_char) :: tag\n         real(c_double) t\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to create a function that takes two character inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'tag1','c'", "case2": "'tag2','d'", "case3": "'tag3','e'", "case4": "'tag4','f'", "case5": "'tag5','g'", "result": ["17791488", "17398272", "15956480", "7436800", "14776832"]}, "code": "function set_state_char_py(tag, chr) result(y)&\n            bind(c, name='set_state_char')\n         use iso_c_binding\n         implicit none\n         character(c_char) :: tag\n         character(c_char) :: chr\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to create a function that takes in a position and a roll score, calculates the next position, and returns it.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function next_position(position,rollscore)\n        implicit none\n        integer, intent(in) :: position,rollscore\n        integer :: next_position,t\n        \n        t = position + rollscore\n\t\tnext_position = MOD(t,10)\n\t\t\n\t\tif (next_position == 0) then\n\t\t\tnext_position = 10\n\t\tend if\n    end function"}
{"instruction": "Use Fortran to create a function that returns the index of the first occurrence of a false value in a 1D logical array.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.]", "case4": "[.false.,.false.,.false.,.false.]", "case5": "[.true.,.false.,.true.,.false.]", "result": ["3", "1", "0", "1", "2"]}, "code": "function findfalse_1d_(logical_array)\n    !! Returns first occurence of .false. in logical_array\n    logical, intent(in), dimension(:) :: logical_array\n    integer, dimension(1) :: findfalse_1d_\n    integer :: i\n    do i = 1, size(logical_array, 1)\n      if (logical_array(i) .eqv. .false.) then\n        findfalse_1d_ = (/i/)\n        return\n      endif\n    enddo\n    findfalse_1d_ = (/0/)\n  end function"}
{"instruction": "Use Fortran to create a function that extracts the directory name from a given input string using a specified delimiter.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'path/to/file.txt','/'", "case2": "'path/to/folder/','/'", "case3": "'path/to/folder','/'", "case4": "'file.txt','.'", "case5": "'file.txt','/'", "result": ["path/to", "path/to/folder", "path/to", "file", ""]}, "code": "function dirname(instr,  delm)\n\ncharacter(*), intent(in) :: instr\ncharacter(*), intent(in) :: delm\ncharacter(:),allocatable :: dirname\ninteger :: idx\n\nidx = scan(instr, delm, back=.true.)\ndirname = instr(1:idx-1)\n\nend function"}
{"instruction": "Use Fortran to create a function that takes in two integers and returns the remainder of the first integer divided by the second integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "3.00000000", "1.00000000", "0.00000000", "2.00000000"]}, "code": "function get_rank(rnk, n)\n        integer, intent(in) :: rnk, n\n        get_rank = modulo(rnk, n)\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that adds 1 to each element of an input integer array until it reaches a maximum value, carrying over to the next element if necessary.", "test_case": {"param_num": 2, "param_type": "integer(:),integer", "case1": "[[1,2,3],5]", "case2": "[[0,0,0,0],2]", "case3": "[[9,9,9],10]", "case4": "[[1,2,3,4,5],3]", "case5": "[[5,6,7,8],9]", "result": ["2           2           3", "1           0           0           0", "10           9           9", "2           2           3           4           5", "6           6           7           8"]}, "code": "function add1(vector,max) result (rtn) \n  integer, dimension(:),intent(in) ::  vector \n  integer,dimension(size(vector)) :: rtn \n  integer max \n  integer len \n  logical carry \n  len=size(vector) \n  rtn=vector \n  i=0 \n  carry=.true. \n  do while(carry)         ! just continue until we do not do a carry \n      i=i+1 \n   rtn(i)=rtn(i)+1 \n   if(rtn(i) .gt. max)then \n       if(i == len)then   ! role over set everything back to 0 \n        rtn=0 \n    else \n        rtn(i)=0 \n       endif \n   else \n       carry=.false. \n   endif \n  enddo \nend function"}
{"instruction": "Use Fortran to create a function that generates random numbers from a normal distribution using the Box-Muller method with hit-or-miss technique.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,1.0]", "case2": "[1.0,2.0]", "case3": "[2.0,3.0]", "case4": "[3.0,4.0]", "case5": "[4.0,5.0]", "result": ["-0.51039731044669312", "0.18134935866221302", "2.0961570256857454", "-0.22515873572934986", "2.3787499806006474"]}, "code": "function Gaussian_Box_Muller_improved(x_bar_, sigma_square_)\n    ! Box-Muller \u6cd5\u4ea7\u751f\u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u6570\uff0c\u5176\u4e2d\u968f\u673a\u6570\u7684\u4e09\u89d2\u51fd\u6570\u901a\u8fc7 hit-or-miss \u6cd5\u5f97\u5230\n    implicit none\n    integer, parameter :: dp = selected_real_kind(8)\n\n    real(dp), intent(in), optional :: x_bar_, sigma_square_ ! \u5747\u503c\u548c\u65b9\u5dee\n    real(dp) :: Gaussian_Box_Muller_improved\n\n    real(dp) :: x_bar, sigma_square\n    real(dp) :: u, v, xi\n\n    if (present(x_bar_)) then\n        x_bar = x_bar_\n    else\n        x_bar = 0.d0\n    end if\n    if (present(sigma_square_)) then\n        sigma_square = sigma_square_\n    else\n        sigma_square = 1.d0\n    end if\n\n    do while (.true.)\n        call random_number(u)\n        call random_number(v)\n        u = 2.d0 * u - 1.d0\n        v = 2.d0 * v - 1.d0\n        if (u**2.d0 + v**2.d0 < 1.d0) then\n            exit\n        end if\n    end do\n    call random_number(xi)\n    Gaussian_Box_Muller_improved = u * sqrt(-2.d0 * log(xi))\n    ! Gaussian_Box_Muller_improved = v * sqrt(-2.d0 * log(xi))\n    Gaussian_Box_Muller_improved = Gaussian_Box_Muller_improved * sqrt(sigma_square) + x_bar\nend function"}
{"instruction": "Use Fortran to create a function that checks if an integer is in a list of integers.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[4,[5,6,7,8]]", "case3": "[2,[1,3]]", "case4": "[5,[5,5,5,5,5]]", "case5": "[3,[2,4,6,8]]", "result": ["T", "F", "F", "T", "F"]}, "code": "function inlist(item,ilist)\n!!! dummy arguments\n    integer :: item,ilist(:)\n! local variables\n    integer :: n\n    logical :: inlist\n\n    inlist = .false.\n    do n=1,size(ilist)\n       if(item == ilist(n)) inlist = .true.\n    enddo\n\n  end function"}
{"instruction": "Use Fortran to create a function that opens a file with a given filename and mode.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','r'", "case2": "'data.bin','rb'", "case3": "'output.txt','w'", "case4": "'input.txt','r+'", "case5": "'config.cfg','a'", "result": ["15563264", "7502336", "8288768", "15563264", "7830016"]}, "code": "function fopen(filename, mode) bind(c)\n            use iso_c_binding\n            type(C_PTR) :: fopen\n            character(kind=C_CHAR) :: filename(*)\n            character(kind=C_CHAR) :: mode(*)\n        end function"}
{"instruction": "Use Fortran to define a function that sets an initial timestep value and returns a success flag.", "test_case": {"param_num": 2, "param_type": "real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.8,4.9]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_initial_timestep_src(init_timestep) result(ret)\n  integer :: ret\n  real*8 :: init_timestep\n\n  h0=init_timestep\n  ret = 0\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the number of floating point multiplications required for the computation of the QR factorization of a matrix using the UNMQR algorithm.", "test_case": {"param_num": 4, "param_type": "character,integer,integer,integer", "case1": "['L',3,4,5]", "case2": "['R',2,3,4]", "case3": "['L',5,6,7]", "case4": "['R',1,2,3]", "case5": "['L',4,5,6]", "result": ["60.0000000", "30.0000000", "210.000000", "9.00000000", "120.000000"]}, "code": "function fmuls_unmqr(side, m, n, k)\n      integer m, n, k\n      character side\n      if (side == 'L') then\n         fmuls_unmqr = 2.*n*m*k - n*k*k + 2.*n*k\n      else\n         fmuls_unmqr = 2.*n*m*k - m*k*k + m*k + n*k - 0.5*k*k + 0.5*k\n      endif\n   end function"}
{"instruction": "Use Fortran to define a function that calculates the number of floating point additions required for the unmqr operation, depending on the side of the matrix.", "test_case": {"param_num": 4, "param_type": "character,integer,integer,integer", "case1": "'L',3,4,5", "case2": "'R',2,3,4", "case3": "'L',0,0,0", "case4": "'R',-1,2,3", "case5": "'L',100,100,100", "result": ["40.0000000", "24.0000000", "0.00000000", "-6.00000000", "1010000.00"]}, "code": "function fadds_unmqr(side, m, n, k)\n      integer m, n, k\n      character side\n      if (side == 'L') then\n         fadds_unmqr = 2.*n*m*k - n*k*k + n*k\n      else\n         fadds_unmqr = 2.*n*m*k - m*k*k + m*k\n      endif\n   end function"}
{"instruction": "Use Fortran to create a function that calculates the number of floating point additions required for a triangular matrix multiplication, depending on the side.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "['L',3,4]", "case2": "['R',5,2]", "case3": "['L',1,1]", "case4": "['R',0,0]", "case5": "['L',-2,3]", "result": ["12.0000000", "5.00000000", "0.00000000", "-0.00000000", "9.00000000"]}, "code": "function fadds_trsm(side, m, n)\n      integer m, n\n      character side\n      if (side == 'L') then\n         fadds_trsm = 0.5*n*m*(m - 1)\n      elseif (side == 'R') then\n         fadds_trsm = 0.5*m*n*(n - 1)\n      endif\n   end function"}
{"instruction": "Use Fortran to create a function that returns a 2D array of size a x b filled with 1.0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[4,5]", "case4": "[10,10]", "case5": "[100,100]", "result": ["1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000"]}, "code": "function returnMat( a, b ) result( mat )\n    integer:: a, b\n    double precision, dimension(a,b):: mat \n    mat = 1d0\n  end function"}
{"instruction": "Use Fortran with C bindings to create a function that takes an input character array and integer size and returns an integer error code.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'localhost', 9", "case2": "'127.0.0.1', 10", "case3": "'www.google.com', 15", "case4": "'www.facebook.com', 17", "case5": "'www.amazon.com', 15", "result": ["6618572", "6618572", "6618572", "6618572", "6618572"]}, "code": "function get_hostname_c(host, size) result(err) bind(C)\r\n            use iso_c_binding, only:c_int, c_char\r\n            character(kind=c_char), intent(inout) :: host(*)\r\n            integer(kind=c_int), intent(in) :: size\r\n            integer(kind=c_int) :: err\r\n        end function"}
{"instruction": "Use Fortran to define a function that assigns a string of characters to a variable and then assigns a different string of characters to another variable.", "test_case": {"param_num": 1, "param_type": "character", "case1": "['']", "case2": "['a']", "case3": "['ab']", "case4": "['abc']", "case5": "['abcd']", "result": ["01234", "012345", "0123456", "01234567", "012345678"]}, "code": "function diane(aa)\n   character(len=*), intent(out) :: aa\n   character(len=len(aa)+1) :: diane\n   diane = '012345678901'\n   aa = 'abcdefghijklmn'\nend function"}
{"instruction": "Use Fortran to create a function that returns the index of the first occurrence of a given integer in a vector, or 0 if it is not found.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3,4,5]]", "case2": "[3,[1,2,3,4,5]]", "case3": "[2,[1,2,3,4,5]]", "case4": "[5,[1,2,3,4,5]]", "case5": "[4,[1,2,3,4,5]]", "result": ["1", "3", "2", "5", "4"]}, "code": "function find(x, v)\n    ! Returns the index of the first occurrence of x in the vector\n    ! v. If there is no ocurrence, it returns 0.\n\n    implicit none\n\n    integer :: find\n\n    integer, intent(in) :: x, v(:)\n    integer :: i\n\n    do i = 1, size(v)\n        if (v(i) .eq. x) then\n            find = i\n            return\n        end if\n    end do\n\n    find = 0    \nend function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 2D array given the x and y coordinates and the size of the array in the x direction.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function ind(ixl,iyl) \n            integer, intent(in) :: ixl, iyl\n            integer :: ind\n            \n            ind = (iyl-1)*nx+ ixl \n        \n        end function"}
{"instruction": "Use Fortran to give me a function that takes an array of real numbers and returns a single real number.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0]", "case4": "[2.0,4.0,6.0,8.0]", "case5": "[0.5,1.5,2.5]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function RV2R(x)\n      !! [Real] -> Real\n      real, intent(in) :: x(:)\n      real :: RV2R\n    end function"}
{"instruction": "Use Fortran to create a function that takes an array of real numbers as input and returns an array of the same size.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,2.0,3.0,4.0]", "case4": "[1.0,-2.0,3.0,-4.0]", "case5": "[0.5,1.5,2.5]", "result": ["1.17997178E-38   0.00000000       1.17554143E-38", "1.81363670E-38   0.00000000       1.80920636E-38", "2.16266316E-38   0.00000000       2.15818124E-38   0.00000000", "2.06164411E-38   0.00000000       2.05716220E-38   0.00000000", "2.04322544E-38   0.00000000       2.03879510E-38"]}, "code": "function RV2RV(x)\n      !! [Real] -> [Real]\n      real, intent(in) :: x(:)\n      real :: RV2RV(size(x))\n    end function"}
{"instruction": "Use Fortran to create a function that generates random numbers with a normal distribution given a mean and standard deviation using the polar method.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,1.0]", "case2": "[10.0,2.0]", "case3": "[5.0,0.5]", "case4": "[100.0,10.0]", "case5": "[-1.0,0.1]", "result": ["0.13150437713750510", "10.082056272139171", "4.8148559835139064", "119.89789965327486", "-0.84819433619901075"]}, "code": "function random_number_normal(mean,sigma) result( fn_val )\n!##########################################################################\n!       Generate random numbers\n!       with a normal distribution with given mean and standard deviaton.\n!\n!       Generate a random normal deviate using the polar method.\n!       Reference: Marsaglia,G. & Bray,T.A. 'A convenient method for generating\n!                  normal variables', Siam Rev., vol.6, 260-264, 1964.\n!       (source from internet)\n\n        implicit none\n        double precision       :: fn_val,mean,sigma\n        double precision       :: ull, sumall\n        double precision, save :: vll, sln\n        logical, save   :: second = .false.\n        double precision, parameter :: one = 1.0, vsmall = tiny( one )\n\n        if (second) then\n\n!...... If second, use the second random number generated on last call\n           second = .false.\n           fn_val = vll*sln\n\n        else\n!...... First call; generate a pair of random normals\n           second = .true.\n           do\n              call random_number(ull)\n              call random_number(vll)\n\n              ull = scale( ull, 1 ) - one\n              vll = scale( vll, 1 ) - one\n\n!.........vsmall added to prevent LOG(zero) / zero\n              sumall = ull*ull + vll*vll + vsmall\n              if(sumall < one) exit\n           end do\n\n           sln = sqrt(- scale( log(sumall), 1 ) / sumall)\n           fn_val = ull*sln\n        end if\n\n!.....set mean and standart deviation\n        fn_val = fn_val * sigma + mean\n\n        return\n\n        end function"}
{"instruction": "Use Fortran to create a function that takes in two integer inputs and returns a 2D array of real numbers filled with 1.0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[3,2]", "case4": "[5,5]", "case5": "[4,6]", "result": ["1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000"]}, "code": "function func(m, n)\n      integer, intent(in):: m,n\n      real, dimension(m, n):: func\n\n      func = 1.0\n\n    end function"}
{"instruction": "Use Fortran to define a function that returns the index of the first occurrence of a substring in a string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','el'", "case2": "'world','or'", "case3": "'fortran','tran'", "case4": "'apple','pe'", "case5": "'banana','na'", "result": ["2", "2", "4", "0", "3"]}, "code": "function index_test(s1, s2)\n  character(*) :: s1, s2\n  ! CHECK: %[[st:[^:]*]]:2 = fir.unboxchar %[[s]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n  ! CHECK: %[[sst:[^:]*]]:2 = fir.unboxchar %[[ss]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n  ! CHECK: %[[a1:.*]] = fir.convert %[[st]]#0 : (!fir.ref<!fir.char<1,?>>) -> !fir.ref<i8>\n  ! CHECK: %[[a2:.*]] = fir.convert %[[st]]#1 : (index) -> i64\n  ! CHECK: %[[a3:.*]] = fir.convert %[[sst]]#0 : (!fir.ref<!fir.char<1,?>>) -> !fir.ref<i8>\n  ! CHECK: %[[a4:.*]] = fir.convert %[[sst]]#1 : (index) -> i64\n  ! CHECK: = fir.call @_FortranAIndex1(%[[a1]], %[[a2]], %[[a3]], %[[a4]], %{{.*}}) : (!fir.ref<i8>, i64, !fir.ref<i8>, i64, i1) -> i64\n  index_test = index(s1, s2)\nend function"}
{"instruction": "Use Fortran to define a function that returns the index of the first occurrence of a character in a string.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 101", "case2": "'world', 119", "case3": "'fortran', 114", "case4": "'programming', 103", "case5": "'language', 97", "result": ["2", "1", "3", "4", "2"]}, "code": "function index_test3(s, i)\n  character(*) :: s\n  integer :: i\n  ! CHECK: %[[tmpChar:.*]] = fir.alloca !fir.char<1>\n  ! CHECK: fir.store %{{.*}} to %[[tmpChar]] : !fir.ref<!fir.char<1>>\n  ! CHECK: %[[tmpCast:.*]] = fir.convert %[[tmpChar]] : (!fir.ref<!fir.char<1>>) -> !fir.ref<i8>\n  ! CHECK: fir.call @_FortranAIndex1(%{{.*}}, %{{.*}}, %[[tmpCast]], %{{.*}}, %{{.*}})\n  index_test3 = index(s, char(i))\nend function"}
{"instruction": "Use Fortran to create a function that converts an ASCII character to a number between 0 and 36 for callsign packing.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'z'", "case3": "' '", "case4": "'%'", "case5": "'1'", "result": ["36", "36", "36", "36", "36"]}, "code": "function nchar(c)\n\n ! Convert ascii number, letter, or space to 0-36 for callsign packing.\n\n   character c*1\n\n   n=0                                    !Silence compiler warning\n   if(c.ge.'0' .and. c.le.'9') then\n      n=ichar(c)-ichar('0')\n   else if(c.ge.'A' .and. c.le.'Z') then\n      n=ichar(c)-ichar('A') + 10\n   else if(c.ge.'a' .and. c.le.'z') then\n      n=ichar(c)-ichar('a') + 10\n   else if(c.ge.' ') then\n      n=36\n   else\n      Print*,'Invalid character in callsign ',c,' ',ichar(c)\n      stop\n   endif\n   nchar=n\n\n   return\n end function"}
{"instruction": "Use Fortran to create a function that calculates the day of the year given a year, month, and day, taking into account leap years.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,1,1]", "case2": "[2020,2,29]", "case3": "[2021,12,31]", "case4": "[2000,6,15]", "case5": "[2022,2,28]", "result": ["1.00000000", "60.0000000", "365.000000", "167.000000", "59.0000000"]}, "code": "function day_of_year(iyear,imonth,iday)\n\n      implicit none\n\n      real(kind=4) :: day_of_year\n      integer :: iyear,imonth,iday\n      logical :: IsLeapYear\n      integer, dimension(12) :: monthdays \n\n      if  ((mod(iyear,4).eq.0)     .and.                          &\n           (mod(iyear,100).ne.0).or.(mod(iyear,400).eq.0))then\n        IsLeapYear = .true.\n        monthdays = (/31,29,31,30,31,30,31,31,30,31,30,31/)\n      else\n        IsLeapYear = .false.\n        monthdays = (/31,28,31,30,31,30,31,31,30,31,30,31/)\n      endif\n\n      if(imonth.eq.1)then\n        day_of_year = iday\n      else\n        day_of_year = sum(monthdays(1:imonth-1)) + iday\n      endif\n\n      end function"}
{"instruction": "Use Fortran to create a function that checks if a given array of integers corresponds to an English text by comparing the frequency of the most common letters to a set of expected values.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5,6,7,8,9,10]", "case2": "[5,5,5,5,5,5,5,5,5,5]", "case3": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]", "case4": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,16]", "case5": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_english(decrypted) result(ret)\n        integer, intent(in) :: decrypted(:)\n        logical :: ret\n        character(len=1) :: check_(8)\n        integer :: i, knt(8)\n\n        check_ = [\"e\", \"t\", \"a\", \"o\", \"i\", \"n\", \"s\", \"h\"]\n        do i = 1, size(check_)\n            knt(i) = count(decrypted == iachar(check_(i)))\n        end do\n\n        ret = .false.\n        if (sum(knt)/real(size(decrypted))*100. > 45. .and. &\n            maxloc(knt, dim=1) == 1) ret = .true.\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates theta using the formula 3.1415926*m/(N+1.0d0).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.0471975008646648", "1.8849555969238281", "3.1415926615397134", "7.8539810180664062", "1.2566370010375976"]}, "code": "function gettheta(m,N)\r\n    real(8) :: gettheta\r\n    integer :: m,N\r\n    gettheta = 3.1415926*m/(N+1.0d0)\r\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["6.3301508706757203E-317   6.3140878083981297E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "6.7510789908317954E-317   6.7350159285542048E-317   0.0000000000000000        0.0000000000000000", "6.0711181813489048E-317   6.0550551190713142E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "3.5779206415279725E-317   3.5618654843007153E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "7.6900645845911681E-317   7.6740094273639109E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs n and p and returns their quotient as a real number.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0.500000000", "0.750000000", "1.50000000", "5.00000000", "0.500000000"]}, "code": "function frac(n,p)\n    integer, intent(in) :: n,p\n    frac = real(n,8)/real(p,8)\n  end function"}
{"instruction": "Use Fortran to create a function that takes a string and a length and returns the string with leading and trailing spaces removed and the length specified.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',5", "case2": "'  hello  ',7", "case3": "'  hello  ',5", "case4": "'hello',0", "case5": "'hello',6", "result": ["hello", "hello", "hello", "", "hello"]}, "code": "function strip_length_(value, length)\n    implicit none\n    character(len=*), intent(in) :: value\n    integer, intent(in) :: length\n    character(len= length):: strip_length_\n    strip_length_ = trim(adjustl(value))\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on input latitude, longitude, level, and variable type values.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,1,1,1]", "case2": "[2,3,4,2]", "case3": "[5,2,3,1]", "case4": "[4,5,6,3]", "case5": "[1,2,3,4]", "result": ["2", "3", "2", "4", "5"]}, "code": "function get_index(lat_index, lon_index, lev_index, var_type)\n!------------------------------------------------------------------\n!\ninteger,  intent(in) :: lat_index, lon_index, lev_index, var_type\ninteger              :: get_index\n\nget_index = 1 + var_type + (lev_index - 1)*state_num_3d      &\n                         + (lat_index - 1)*state_num_3d*nz   &\n                         + (lon_index - 1)*state_num_3d*nz*ny\n\nend function"}
{"instruction": "Use Fortran to give me a function that converts a calendar date to a Julian date.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1970,1,1]", "case2": "[2022,12,31]", "case3": "[2000,2,29]", "case4": "[2021,4,15]", "case5": "[1999,12,31]", "result": ["2440588", "2459945", "2451604", "2459320", "2451544"]}, "code": "function jd(yyyy, mm, dd) result(ival)\r\n\r\n    integer, intent(in)  :: yyyy\r\n    integer, intent(in)  :: mm\r\n    integer, intent(in)  :: dd\r\n    integer              :: ival\r\n\r\n    ! DATE ROUTINE JD(YYYY, MM, DD) CONVERTS CALENDER DATE TO\r\n    ! JULIAN DATE.  SEE CACM 1968 11(10):657, LETTER TO THE\r\n    ! EDITOR BY HENRY F. FLIEGEL AND THOMAS C. VAN FLANDERN.\r\n    ! EXAMPLE JD(1970, 1, 1) = 2440588\r\n\r\n    ival = dd - 32075 + 1461*(yyyy+4800+(mm-14)/12)/4 +  &\r\n       367*(mm-2-((mm-14)/12)*12)/12 - 3*((yyyy+4900+(mm-14)/12)/100)/4\r\n\r\n    return\r\n  end function"}
{"instruction": "Use Fortran to create a function that takes an optional character input and returns an allocatable character output.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'test', 'case'", "case4": "'optional', 'parameter'", "case5": "'default', 'value'", "result": ["", "", "", "", ""]}, "code": "function optval_character(x, default) result(x_)\n            character(len=*), intent(in), optional  :: x\n            character(len=*), intent(in)            :: default\n            character(len=:), allocatable           :: x_\n        end function"}
{"instruction": "Use Fortran to define a function that calculates the spherical Bessel function of the first kind for a given order and argument.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[0,1.0]", "case2": "[1,2.5]", "case3": "[2,3.0]", "case4": "[3,4.5]", "case5": "[4,5.0]", "result": ["0.84147098480789650", "0.41621298927540651", "0.29863749707573356", "0.24173609332670182", "0.18701765534488921"]}, "code": "function sbj(k,x)\n  ! spherical bessel j\n  implicit none\n  integer, intent(in) :: k\n  double precision, intent(in) :: x\n  double precision :: sbj\n  select case(k)\n  case(0)\n    sbj = sin(x)/x\n  case(1) \n    sbj = (-(x*cos(x)) + sin(x))/x**2\n  case(2) \n    sbj = -((3*x*cos(x) + (-3 + x**2)*sin(x))/x**3)\n  case(3) \n    sbj = (x*(-15 + x**2)*cos(x) + 3*(5 - 2*x**2)*sin(x))/x**4\n  case(4)\n    sbj = (5*x*(-21 + 2*x**2)*cos(x) + (105 - 45*x**2 + x**4)*sin(x))/x**5\n  case(5)\n    sbj = (-(x*(945 - 105*x**2 + x**4)*cos(x)) + 15*(63 - 28*x**2 + x**4)*sin(x))/x**6\n  case default\n    write(0,'(\"sbj: k>5\")')\n  end select\nend function"}
{"instruction": "Use Fortran to create a function that compares two strings character by character and returns true if the left string is less than the right string.", "test_case": {"param_num": 3, "param_type": "character,character,integer", "case1": "['abc','def',3]", "case2": "['abc','abc',3]", "case3": "['abc','abcd',3]", "case4": "['abcd','abc',3]", "case5": "['abc','def',2]", "result": ["T", "F", "F", "F", "T"]}, "code": "function chars_less(left, right, length) &\n    result(fresult)\n  character(len=*), intent(in) :: left\n  character(len=*), intent(in) :: right\n  integer, intent(in) :: length\n  logical :: fresult\n  integer :: i, lchar, rchar\n\n  ! If any character code is less than the RHS, it is less than.\n  do i = 1, length\n    lchar = ichar(left(i:i))\n    rchar = ichar(right(i:i))\n    if (lchar < rchar) then\n      fresult = .true.\n      return\n    elseif (lchar > rchar) then\n      fresult = .false.\n      return\n    endif\n  end do\n\n  fresult = .false.\nend function"}
{"instruction": "Use Fortran to define a function that calculates the electric form factor of a sphere given q and r as inputs.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[0.0,4.0]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["1.7415910999199666", "0.0000000000000000", "-6.0404372181011219", "-2.3772352019792695", "-3.7993165608184984"]}, "code": "function EleFFS(q, r)\n  !! Proportional to the form factor of a sphere.\n  real(8) :: EleFFS\n  real(8), intent(in) :: q,r\n  real(8) :: x\n  x=q*r\n  eleFFs = sin(x)-x*cos(x)\nend function"}
{"instruction": "Use Fortran to create a function that takes a file name and a new extension and returns the file name with the new extension added.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['file.txt','.bak']", "case2": "['file.doc','.pdf']", "case3": "['file','.txt']", "case4": "['file.txt','']", "case5": "['file.txt','backup']", "result": ["file.bak", "file.pdf", "file.txt", "file", "filebackup"]}, "code": "function new_ext(file_name, extension)\n\n    implicit none\n    character(len = *), intent(in)  :: file_name  ! File to add new extension to\n    character(len = *), intent(in)  :: extension  ! New extension to add\n    character(len = 256)            :: new_ext    ! File name with new extension\n    integer                         :: dot_pos    ! Position of extension dot\n\n    dot_pos = scan(trim(file_name), '.', back = .true.)\n    if (dot_pos > 0) then\n        new_ext = file_name(1:dot_pos - 1) // extension\n    else\n        new_ext = trim(file_name) // extension\n    end if\n\nend function"}
{"instruction": "Use Fortran to create a function that returns a unique ID for a halo based on its index, time step, and tree-file index.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["100200003", "400500006", "700800009", "1001100012", "1301400015"]}, "code": "function IO_generate_HID(ifile,ts,ih)\n  \n    ! RETURN THE HALO ID ASSOCIATED TO A HALO 'ih' EVOLVING AT 'ts' AND SAVED IN THE 'ifile' TREE-FILE\n    \n    implicit none\n    \n    integer(kind=4),intent(in)   :: ifile  ! the index of the tree-file\n    integer(kind=4),intent(in)   :: ih     ! the index of the halo at time step ts\n    integer(kind=4),intent(in)   :: ts     ! the time-step of the halo\n    integer(kind=8)              :: IO_generate_HID\n    \n    IO_generate_HID = int(ifile,8)*int(100000000,8)+int(ts,8)*int(100000,8)+int(ih,8)\n    \n    return\n    \n  end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[0,0]", "case4": "[5,5]", "case5": "[10,10]", "result": ["1", "0", "1", "1", "1"]}, "code": "function delta(i,j)\n    integer, intent(in) :: i,j\n    integer             :: delta\n    if (i == j) then\n       delta = 1\n    else\n       delta = 0\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that returns the indices of a logical array where the value is true.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.true.]", "case4": "[.false.,.true.,.false.,.true.,.false.]", "case5": "[.true.,.false.,.false.,.true.,.false.,.true.]", "result": ["1           3", "", "1           2           3           4", "2           4", "1           4           6"]}, "code": "function find_indices(mask)\n     logical::mask(:)\n     integer::find_indices(count(mask))\n     integer::i,n\n     n = 1\n     do i=1,size(mask)\n        if(mask(i)) then\n           find_indices(n) = i\n           n = n+1\n        end if\n     end do\n   end function"}
{"instruction": "Use Fortran to create a function that compares two strings case-insensitively and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','HELLO']", "case2": "['world','WORLD']", "case3": "['fortran','FORTRAN']", "case4": "['','']", "case5": "['123','321']", "result": ["T", "T", "T", "T", "F"]}, "code": "function equal_str_nocase(str1,str2)\n!\n!-----------------------------------------------------------------------\n!\n! convert a word to lower case\n!\n      logical              :: equal_str_nocase\n      Character (len=*) , intent(in) :: str1\n      Character (len=*) , intent(in) :: str2\n      integer :: i,ic1,ic2,nlen\n      nlen = len(str2)\n!\n      if(len(str1)/=nlen)  then\n        equal_str_nocase=.false.\n        return\n      endif\n      equal_str_nocase=.false.\n      do i=1,nlen\n        ic1 = ichar(str1(i:i))\n        if (ic1 >= 65 .and. ic1 < 91) ic1 = ic1+32\n        ic2 = ichar(str2(i:i))\n        if (ic2 >= 65 .and. ic2 < 91) ic2 = ic2+32\n        if(ic1/=ic2) then\n           equal_str_nocase=.false.\n           return\n        endif\n      end do\n      equal_str_nocase=.true.\n!\n!-----------------------------------------------------------------------\n!\n      end function"}
{"instruction": "Use Fortran to give me a function that takes an integer and an integer array as input and returns an integer array of the same size as the input array with all elements initialized to zero.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[3,[4,5,6,7]]", "case3": "[3,[0,0,0,0,0,0]]", "case4": "[5,[1]]", "case5": "[2,[1,2,3,4,5]]", "result": ["0           0           0", "0           0           0           0", "0           0           0           0           0           0", "0", "0           0           0           0           0"]}, "code": "function f1(a,b) result (c)\n  integer, intent(in) :: a\n  integer, dimension(:), intent(in)   :: b\n  integer, dimension(size(b,1))   :: c\n  c = 0\n end function"}
{"instruction": "Use Fortran to give me a function that takes two character inputs and returns a logical value of false.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','world']", "case2": "['fortran','programming']", "case3": "['','']", "case4": "['123','456']", "case5": "['testing','testing']", "result": ["F", "F", "F", "F", "F"]}, "code": "function f2(a,b)\n   character(len=*), intent(in) :: a\n   character(len=*), intent(in) :: b\n   logical :: f2\n   f2 = .false.\n end function"}
{"instruction": "Use Fortran to calculate theta from mks coordinate x2 and bl/ks coordinate r based on specific parameter definitions.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,20.0]", "case2": "[80.0,0.3]", "case3": "[2.8,0.5]", "case4": "[2.8,0.7]", "case5": "[80.0,0.7]", "result": ["NaN", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000"]}, "code": "function calcthmks8_single(x2,r) result(th)\n!          Calculate theta from mks coordinate x2 (McKinney & Gammie (2006a)) and bl/ks coordinate r.\r\n!          JAD 4/9/2009\r\n!          These parameter definitions are based on Jon's defcoord=9:\r\n          real(8), intent(in) :: x2,r\n          real(8) :: th\n          real(8) :: rj,nj,r0j,rsj,q,g,h\n          rj=2.8\n          nj=0.3\n          r0j=20.\n          rsj=80.\n          q=1.3\n          g=-nj*(.5+1./pi*atan((r-rsj)/r0j))\n          h=2.-q*(r/rj)**g\n          if(x2.lt.0.5) then\n             th=(pi*x2+(1.-h)/2.*sin(2.*pi*x2))\n          else\n             th=(pi*x2-(1.-h)/2.*sin(2.*pi*(1.-x2)))\n          endif\n        end function"}
{"instruction": "Use Fortran to calculate the value of theta based on a set of input parameters and equations.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.0,4.0]", "case3": "[3.5,2.5]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["NaN", "NaN", "NaN", "NaN", "NaN"]}, "code": "function calcthmks6_8single(x2,r) result(theta)\n          ! Calculates \\theta for Jon's defcoord = 1401\n          ! JAD 5/14/2010, fortran 12/28/2012    \n          real(8), intent(in) :: x2,r\n          real(8) :: th,r0r,r1jet,njet,r0jet,rsjet,qjet, &\n               rs,r0,r0jet3,rsjet3,h0,ntheta,htheta,rsjet2,r0jet2,myhslope,th2, &\n               th0,switch0,switch2,theta1,theta2,arctan2,theta\n          r0r=0.\n          r1jet=2.8\n          njet=0.3\n          r0jet=15.\n          rsjet=40.\n          qjet=1.3\n          rs=40.\n          r0=20.\n          r0jet3=20.\n          rsjet3=0.\n          h0=0.3\n          njet=1.0\n          ntheta=5.\n          htheta=0.15\n          rsjet2=5.0\n          r0jet2=2.0\n          myhslope=h0+((r-rsjet3)/r0jet3)**njet\n          th2=0.5*pi*(1.+atan(myhslope*(x2-0.5))/atan(myhslope*.5))\n          myhslope=2.0-qjet*(r/r1jet)**(-njet*(0.5+1.0/pi*atan(r/r0jet-rsjet/r0jet)))\n          th0=pi*x2+((1.-myhslope)*0.5)*sin(2.*pi*x2)\n          switch0=0.5+1.0/pi*atan((r-rs)/r0)\n          switch2=0.5-1.0/pi*atan((r-rs)/r0)\n          theta1=th0*switch2+th2*switch0\n          theta2=pi*.5*(htheta*(2.*x2-1.)+(1.-htheta)*(2.*x2-1.)**ntheta+1.)\n          arctan2=.5+1./pi*(atan((r-rsjet2)/r0jet2))\n          theta=theta2+arctan2*(theta1-theta2)\n        end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["1", "1", "1", "1", "1"]}, "code": "function NDELTA(i,j)\n\n      implicit none\n\n      integer :: i,j\n      integer :: NDELTA\n\n      NDELTA=0\n      if (i==j) NDELTA=1\n\n      end function"}
{"instruction": "Use Fortran to give me a function that calculates the global number of a cell given its local coordinates and cell number.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,5]", "case3": "[10,10,100]", "case4": "[5,5,10]", "case5": "[0,0,0]", "result": ["4", "-5", "910", "45", "0"]}, "code": "function Local2Global(iLocalX,iLocalY,ixCellNumber) result(iGlobalNumber)\n    implicit none\n        integer, intent(in) :: iLocalX, iLocalY, ixCellNumber\n        integer :: iGlobalNumber\n\n            iGlobalNumber = ixCellNumber*(iLocalY-1)+iLocalX\n\n    return\n    end function"}
{"instruction": "Use Fortran to define a function that takes a character input and returns 0.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'Hello'", "case4": "'123'", "case5": "'!@#'", "result": ["0", "0", "0", "0", "0"]}, "code": "function notChar(x)\n    character(*), intent(in) :: x\n    notChar = 0\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a given range.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["8.00000000", "13.0000000", "35.0000000", "136.000000", "-2.00000000"]}, "code": "function randint(lo, hi)\ninteger, intent(in) :: lo, hi\nreal :: r\n\ncall random_number(r)\n\nrandint = floor(r * (hi + 1 - lo)) + lo\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the mean of an array of real numbers.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.5,1.5,2.5,3.5]", "case3": "[1.0,1.0,1.0]", "case4": "[0.0,0.0,0.0,0.0,0.0]", "case5": "[1.0,2.0,3.0,4.0,5.0]", "result": ["2", "2", "1", "0", "3"]}, "code": "function mean_real(A) result(mean)\nreal, intent(in) :: A(:)\n\nmean = sum(A) / size(A)\n\nend function"}
{"instruction": "Use Fortran to create a function that takes an optional character input and returns it if it is present, otherwise returns a default character input.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'test', 'case'", "case4": "'optional', 'parameter'", "case5": "'default', 'value'", "result": ["hello", "fortran", "test", "optional", "default"]}, "code": "function optval_character(x, default) result(y)\n    character(len=*), intent(in), optional :: x\n    character(len=*), intent(in) :: default\n    character(len=:), allocatable :: y\n\n    if (present(x)) then\n       y = x\n    else\n       y = default\n    end if\n  end function"}
{"instruction": "Use Fortran to define a function that determines the type of coefficients b(n,k) for angular distribution calculation based on input values ith, mb, and lamb.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[0,1,2]", "case2": "[1,2,3]", "case3": "[0,1,3]", "case4": "[1,3,4]", "case5": "[0,2,4]", "result": ["8", "1", "8", "2", "4"]}, "code": "function jtypb (ith, mb, lamb)\n\n! ======================================================================\n!\n!     Determining type of coefficients b(n,k);\n!     for angular distribution calculation.\n!\n!     ith = 0 or 1;\n!     mb = baryon number of channel;\n!     lamb = 1 for \"recoiling\" Fermi-sea nucleon,\n!            2 for first pion produced,\n!            3 for \"recoiling\" Projectile,\n!          > 3 for subsequent pions for multiple pion production.\n!\n!    Called by: VMNSP\n!\n!    CEM95 written by S. G. Mashnik\n!\n!    Edited by A. J. Sierk,  LANL  T-2  February, 1996.\n!    Edited by AJS, July, 1997.\n!    Edited by AJS, December, 1998.\n!    Edited by A. J. Sierk, LANL T-16, October, 2003.\n!    Edited by AJS, LANL T-2, December, 2011.\n!\n! ======================================================================\n\n    use, intrinsic :: iso_fortran_env, only: int32\n\n    implicit none\n    integer(int32), intent(in   ) :: ith\n    integer(int32), intent(in   ) :: mb\n    integer(int32), intent(in   ) :: lamb\n    integer(int32)                :: jtypb\n\n! ======================================================================\n\n    if (ith.ne.0) then\n!   One pion produced.\n       if (mb <= 1) then\n!   pi + N incident channel:\n          if (lamb > 1) then\n             jtypb = 6\n          else\n             jtypb = 5\n          endif\n       else\n!   N + N incident channel:\n          if (lamb <= 1 .or. lamb == 3) then\n!  nucleon:\n             jtypb = 1\n          else\n!  pion:\n             jtypb = 2\n          endif\n       endif\n    else\n!   All other pion production cross sections:\n       if (mb <= 1) then\n!   pi + N incident channel:\n          if (lamb <= 1) then\n!  nucleon:\n             jtypb = 7\n          else\n!  pion:\n             jtypb = 8\n          endif\n       else\n!   N + N incident channel:\n          if (lamb <= 1 .or. lamb == 3) then\n             jtypb = 3\n          else\n             jtypb = 4\n          endif\n       endif\n    endif\n    return\n\n! ======================================================================\n  end function"}
{"instruction": "Use Fortran to give me a function that returns the Kronecker delta for two integer inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0", "0", "0", "0", "0"]}, "code": "function kronij(i,j)\n    integer, intent(in)               :: i,j\n    kronij=int((float(i+j)-abs(i-j))/(float(i+j)+abs(i-j)))\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_digit(ch)              \r\n                character :: ch\r\n                logical :: res, is_digit\r\n\r\n                select case(ch)\r\n                    case('0':'9')\r\n                        res  = .true.\r\n                    case default\r\n                        res = .false.\r\n                end select\r\n\r\n                is_digit = res\r\n      \r\n            end function"}
{"instruction": "Use Fortran to give me a function that takes an integer array as input and returns the sum of its elements.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4]", "case2": "[0,0,0,0]", "case3": "[1,2,3,4,5,6,7,8,9]", "case4": "[1,-2,3,-4,5,-6,7,-8,9]", "case5": "[0]", "result": ["10.0000000", "0.00000000", "45.0000000", "5.00000000", "0.00000000"]}, "code": "function ssum(a)\n        integer, intent(in) :: a(:)\n\n        ssum = sum(a)\n        \n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "result": ["7.5605561449780938E-317   7.5444930827005032E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.7398239774075656E-317   3.7237609151299750E-317   0.0000000000000000        0.0000000000000000", "4.0636148390660850E-317   4.0475517767884943E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "7.9491051789683170E-317   7.9330421166907264E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.6426867189100098E-317   3.6266236566324192E-317   0.0000000000000000        0.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that takes two integer arguments and returns a pointer to a type.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "0", "5", "2"]}, "code": "function g_type_interface_get_plugin( &\n        instance_type, &\n        interface_type &\n    ) bind(c)\n      use iso_c_binding, only: c_long, c_ptr\n      integer(c_long), value :: instance_type\n      integer(c_long), value :: interface_type\n      type(c_ptr) g_type_interface_get_plugin\n    end function"}
{"instruction": "Use Fortran to define a function that checks if two integer types are compatible.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["T", "T", "T", "T", "T"]}, "code": "function g_value_type_compatible( &\n        src_type, &\n        dest_type &\n    ) bind(c)\n      use iso_c_binding, only: c_bool, c_long\n      integer(c_long), value :: src_type\n      integer(c_long), value :: dest_type\n      logical(c_bool) g_value_type_compatible\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer arguments and returns a logical value indicating whether a value of the first type can be transformed into a value of the second type.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[2147483647,-2147483648]", "case5": "[-2147483648,2147483647]", "result": ["T", "T", "F", "T", "F"]}, "code": "function g_value_type_transformable( &\n        src_type, &\n        dest_type &\n    ) bind(c)\n      use iso_c_binding, only: c_bool, c_long\n      integer(c_long), value :: src_type\n      integer(c_long), value :: dest_type\n      logical(c_bool) g_value_type_transformable\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer arguments and returns a boolean value indicating whether the first argument is of the same type as the second argument.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,1]", "case3": "[1,0]", "case4": "[0,0]", "case5": "[-1,1]", "result": ["T", "F", "T", "F", "T"]}, "code": "function g_type_is_a( &\n        type, &\n        is_a_type &\n    ) bind(c)\n      use iso_c_binding, only: c_bool, c_long\n      integer(c_long), value :: type\n      integer(c_long), value :: is_a_type\n      logical(c_bool) g_type_is_a\n    end function"}
{"instruction": "Use Fortran to create a function that takes two integer arguments and returns an integer value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function g_type_next_base( &\n        leaf_type, &\n        root_type &\n    ) bind(c)\n      use iso_c_binding, only: c_long\n      integer(c_long), value :: leaf_type\n      integer(c_long), value :: root_type\n      integer(c_long) g_type_next_base\n    end function"}
{"instruction": "Use Fortran to give me a function that multiplies two integers and returns the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "12", "6", "5", "8"]}, "code": "function simple_reduction(a,b)\n    integer,intent(in) :: a,b\n    integer :: simple_reduction\n\n    simple_reduction = a * b\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the standard deviation of an array of real numbers.", "test_case": {"param_num": 1, "param_type": "real*8(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.0,2.0,3.0,4.0,5.0]", "case4": "[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]", "case5": "[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5]", "result": ["0.816496611", "0.00000000", "1.41421354", "0.00000000", "0.00000000"]}, "code": "function stddevarray(array)\nreal*8 array(:),avg\navg=sum(array)/size(array)\nstddevarray=dsqrt(sum((array-avg)**2)/size(array))\nend function"}
{"instruction": "Use Fortran to create a function that counts the number of times a given character appears in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'world','o'", "case3": "'fortran','z'", "case4": "'testing','t'", "case5": "'123456789','9'", "result": ["2.00000000", "1.00000000", "0.00000000", "2.00000000", "1.00000000"]}, "code": "function strcharnum(str,char)\ncharacter(len=*) str\ncharacter char\ninteger itime\nstrcharnum=0\ndo i=1,len_trim(str)\n    if (str(i:i)==char) strcharnum=strcharnum+1\nend do\nend function"}
{"instruction": "Use Fortran to create a function that generates a 2D array of size n with random 1s and 0s based on a probability p.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[3,0.5]", "case2": "[2,0.8]", "case3": "[4,0.2]", "case4": "[5,0.9]", "case5": "[1,0.1]", "result": ["1           0           1           1           0           0           1           1           1", "1           1           1           1", "1           0           1           0           0           0           0           0           0           0           0           0           0           1           1           0", "1           1           1           1           1           1           1           0           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1           1", "0"]}, "code": "function getArr(n, p)\n        implicit none\n        integer, intent(in) :: n\n        real(8), intent (in) :: p\n        integer, dimension(n, n) :: getArr\n\n        real(8) :: rnd\n        integer :: i, j\n\n        call random_seed()\n\n        do i = 1, n\n            do j = 1, n\n                call random_number(rnd)\n                if (rnd .lt. p) then\n                    getArr(i, j) = 1\n                else\n                    getArr(i, j) = 0\n                end if\n            end do\n        end do\n    end function"}
{"instruction": "Use Fortran to create a function that compares two strings and returns true if they are equal.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','world']", "case2": "['fortran','python']", "case3": "['','']", "case4": "['fortran','Fortran']", "case5": "['fortran','']", "result": ["F", "F", "T", "F", "F"]}, "code": "function string_eq(string1,string2)\n    ! {{{ string comparison\n    logical :: string_eq\n    character(*), intent(in) :: string1, string2\n    integer :: i, j\n    i=index(string1,trim(string2))\n    j=index(string2,trim(string1))\n    if ( ( i > 0 ) .and. ( j > 0 ) ) then\n       string_eq=.true.\n    else\n       string_eq=.false.\n    end if\n    ! }}}\n  end function"}
{"instruction": "Use Fortran to give me a function that adds two integers of kind 4 and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function add_ints4_lower(a,b) result(y)\n    integer (kind  =4), intent(in) :: a\n    integer, intent(in) :: b\n    integer :: y\n    y = a+b\n  end function"}
{"instruction": "Use Fortran to create a function that checks if an array of integers has unique elements.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[1,1,1,1,1]", "case3": "[1,2,3,4,5,1]", "case4": "[1,2,3,4,5,5]", "case5": "[1,2,3,4,5,6]", "result": ["0", "1", "1", "1", "0"]}, "code": "function isUnique (x)\n    character (len=*), parameter :: sMyName = \"isUnique\"\n    integer, intent (in) :: x (:)\n    integer :: i, j\n    integer :: n\n    logical :: aux\n!\n    n = size (x)\n    aux = .false.\n    if (n /= 1) then\n      main: do i = 1, n - 1\n        do j = i + 1, n\n          if (x(i) == x(j)) then\n            aux = .true.\n            exit main\n          end if\n        end do\n      end do main\n    end if\n    isUnique = aux\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on two integer inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,-4]", "result": ["5", "17", "1", "22", "3"]}, "code": "function idx (l, m)\n    integer :: l, m\n    idx = l * l + l + 1 + m\n  end function"}
{"instruction": "Use Fortran to give me a function that returns a unique index for a given pair of integers l and m.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,-4]", "case3": "[0,2]", "case4": "[5,0]", "case5": "[-2,-4]", "result": ["5", "18", "4", "26", "13"]}, "code": "function idxy (l, m)\n    integer :: l, m\n    if (m > 0) then\n      idxy = l * l + m + m\n    else\n      idxy = l * l - m - m + 1\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between i and j inclusive.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["10.0000000", "9.00000000", "84.0000000", "195.000000", "6.00000000"]}, "code": "function randint(i,j)\n  integer,intent(in)    :: i,j\n  real                  :: r\n  call random_number(r)\n  randint = i + floor((j+1-i)*r)\n end function"}
{"instruction": "Use Fortran to give me a function that takes an integer k and a string s and returns the position of the k-th token in s.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'hello']", "case2": "[3,'world']", "case3": "[0,'']", "case4": "[5,'Fortran']", "case5": "[2,'123']", "result": ["5", "5", "0", "7", "3"]}, "code": "function getTokenPosition(k,s) result(p)\n         character (len=*), intent(in) :: s\n         integer, intent(in) :: k\n         integer :: p\n      end function"}
{"instruction": "Use Fortran to give me a function that concatenates two character strings after removing any trailing spaces.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','programming'", "case3": "'','fortran'", "case4": "'programming',''", "case5": "'',''", "result": ["helloworld", "fortranprogramming", "fortran", "programming", ""]}, "code": "function trim_append (xx,yy) result(xy)\n    character (len = *), intent(in) :: xx,yy\n    character (len = len (xx) + len (yy)) :: xy\n    xy = trim (xx) // trim (yy)\n  end function"}
{"instruction": "Use Fortran to create a function that counts the number of occurrences of a character in a string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'world','o'", "case3": "'fortran','r'", "case4": "'programming','m'", "case5": "'test case','t'", "result": ["2", "1", "2", "2", "2"]}, "code": "function count(str, chr)\n        character(*), intent(in) :: str, chr\n        integer :: i, j, count\n        i = 1\n        count = 0\n        do\n            j = index(str(i:), chr)\n            if (j == 0) exit\n            count = count + 1\n            i = i + j\n        end do\n    end function"}
{"instruction": "Use Fortran to define a function that takes three integer inputs and returns a single integer output based on a mathematical formula.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["1.00000000", "4.00000000", "39.0000000", "74.0000000", "108.000000"]}, "code": "function f1(n, x, y)\n  integer, intent(in) :: n, x, y\n\n  f1 = n * mod(x + y - 1 + n/2, n) + mod(x + 2*y - 2, n) + 1\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a whitespace character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'\\t'", "case3": "'\\n'", "case4": "'\\r'", "case5": "'a'", "result": ["F", "F", "F", "F", "F"]}, "code": "function whitespace( c ) result( isws )\n        character(len=1), intent(in) :: c\n        logical                      :: isws\n        isws = c == \" \" .or. c == char(9) .or. c == char(10) .or. c == char(13) .or. c == char(0)\n    end function"}
{"instruction": "Use Fortran to give me a function that replaces all occurrences of a given substring in a string with another substring.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'this is a test','is','was'", "case3": "'123456789','5','0'", "case4": "'testing','ing','ed'", "case5": "'fortran is fun','fun','awesome'", "result": ["hello everyone", "thwas was a test", "123406789", "tested", "fortran is awesome"]}, "code": "function replace(string, text, repl) result(output)\n            character(*) :: string, text, repl\n            character(:), allocatable :: output\n            integer :: i, nt, nr\n\n            output = string\n            nt = len(text)\n            nr = len(repl)\n            do\n                i = index(output,text(:nt))\n                if (i == 0) exit\n                output = output(:i-1) // repl(:nr) // output(i+nt:)\n            end do\n        end function"}
{"instruction": "Use Fortran to create a function that checks if a given input is an open parenthesis.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "')'", "case3": "'hello'", "case4": "'('", "case5": "'world'", "result": ["1", "0", "0", "1", "0"]}, "code": "function is_open_paren(input)\n        class(*) :: input\n        select type(input); type is (character(*))\n            is_open_paren = scan(input, '(') > 0\n        end select\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given input is a close parenthesis.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "')'", "case3": "'('", "case4": "' '", "case5": "'a'", "result": ["0", "1", "0", "0", "0"]}, "code": "function is_close_paren(input)\n        class(*) :: input\n        select type(input); type is (character(*))\n            is_close_paren = scan(input, ')') > 0\n        end select\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function foo(x, y)\n    integer, intent(in) :: x, y\n    foo = x + y\n  end function"}
{"instruction": "Use Fortran to create a function that takes three integer arguments and returns the result of a + 3*b - c, but the code contains an error because the function must have at most two arguments.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[-1,-2,-3]", "case5": "[2147483647,-2147483648,0]", "result": ["4", "0", "400", "-4", "-1"]}, "code": "function foo_3 (a, b, c) ! { dg-error \"must have, at most, two arguments\" }\n    integer :: foo_3\n    integer, intent(in) :: a, b, c\n    foo_3 = a + 3 * b - c\n  end function"}
{"instruction": "Use Fortran to create a function that takes a command line argument and returns it, or a default value if the argument is not provided.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'default']", "case2": "[-1,'default']", "case3": "[0,'default']", "case4": "[3,'default']", "case5": "[2,'default']", "result": ["1", "default", "default", "default", "default"]}, "code": "function command_argument(num, def) result(arg)\n      character(:), allocatable :: arg\n\n      integer, intent(in) :: num\n      character(*), intent(in) :: def\n\n      integer :: i, n, size\n\n      i = num\n      n = command_argument_count()\n\n      if (i .lt. 0) i = n + i + 1\n\n      if (i .lt. 1 .or. i .gt. n) then\n         arg = def\n      else\n         call get_command_argument(i, length=size)\n\n         allocate(character(size) :: arg)\n\n         call get_command_argument(i, value=arg)\n\n         if (arg .eq. '-') arg = def\n      end if\n   end function"}
{"instruction": "Use Fortran to create a function that returns an array of Fourier wavenumbers for n modes on a domain of size Lx.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[10,1.0]", "case2": "[5,2.5]", "case3": "[3,0.5]", "case4": "[8,3.0]", "case5": "[2,4.0]", "result": ["0.0000000000000000        6.7262326287591219E-044   1.3452465257518244E-043   2.0178697886277366E-043   2.6904930515036488E-043   3.3631163143795610E-043  -2.6904930515036488E-043  -2.0178697886277366E-043  -1.3452465257518244E-043  -6.7262326287591219E-044", "0.0000000000000000        2.6904930515036487E-044   5.3809861030072974E-044  -5.3809861030072974E-044  -2.6904930515036487E-044", "0.0000000000000000        1.3452465257518244E-043  -1.3452465257518244E-043", "0.0000000000000000        2.2420775429197073E-044   4.4841550858394146E-044   6.7262326287591219E-044   8.9683101716788293E-044  -6.7262326287591219E-044  -4.4841550858394146E-044  -2.2420775429197073E-044", "0.0000000000000000        1.6815581571897805E-044"]}, "code": "function fourierWaveNum(n,Lx) result(ks)\n! Returns fourier wavenumbers for n modes on domain of size Lx\n! === Parameters ===\n! n  - (real) number of modes\n! Lx - (real) domain size\n! === Output ===\n! ks - (array) array of wavenumbers\ninteger,      intent(in)  :: n\nreal(kind=8), intent(in)  :: Lx\nreal(kind=8), allocatable :: ks(:)\ninteger      :: i\nreal(kind=8) :: s\nallocate(ks(n))\ns = (2.d0*PI)/Lx; ! Fourier wave number scaling factor\ndo i=0,n-1\n    if (i <= n/2) then\n        ks(i+1) = s*i\n    else\n        ks(i+1) = s*(-n + i)\n    end if\nenddo\n\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between vmin and vmax.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["6", "19", "25", "194", "-6"]}, "code": "function random_integer(vmin, vmax) result(r)\n    integer, intent(in) :: vmin, vmax\n    integer :: r\n    real(8) tmp\n    call random_number(tmp)\n    r = floor(tmp * (vmax - vmin + 1)) + vmin\n  end function"}
{"instruction": "Use Fortran to give me a function for x to the power of p.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[2.0,3.0]", "case2": "[4.5,2.0]", "case3": "[0.0,5.0]", "case4": "[1.0,0.0]", "case5": "[3.14,2.71]", "result": ["8.0000000000000000", "20.250000000000000", "0.0000000000000000", "1.0000000000000000", "22.216689546002321"]}, "code": "function power(x,p)\n implicit none\n real(8) :: power,x,p\n power=x**p\n end function"}
{"instruction": "Use Fortran to define a function that returns the number of components of a variable based on its type and space dimension.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "0", "5", "2"]}, "code": "function n_comp_valtype( vtype, ndim )\n    integer, intent(in) :: vtype    !< variable type\n    integer, intent(in) :: ndim     !< space dimension\n\n    if( vtype>0 ) then\n      n_comp_valtype = vtype\n    else if( vtype==-1 ) then\n      n_comp_valtype = 1\n    else if( vtype==-2 ) then\n      n_comp_valtype = ndim\n    else if( vtype==-3 ) then\n      n_comp_valtype = ndim*(ndim+1)/2\n      if(ndim == 4 .or. ndim == 6)n_comp_valtype=6\n    else if( vtype==-4 ) then\n      n_comp_valtype = ndim*ndim\n    else if( vtype==-5 ) then\n      n_comp_valtype = ndim*4\n    else\n      n_comp_valtype = 0\n    endif\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the integral of a KL reconstructed realization over a given interval.", "test_case": {"param_num": 5, "param_type": "real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0,5.0]", "case2": "[0.0,0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0,1.0]", "case4": "[2.0,3.0,4.0,5.0,6.0]", "case5": "[0.5,0.5,0.5,0.5,0.5]", "result": ["-4.2533523249043341", "NaN", "0.0000000000000000", "-12.156870442832277", "0.0000000000000000"]}, "code": "function Eigfuncint(Ak,alpha,lamc,xl,xr)\n  ! Used in KLrxi_integral to integrate on KL reconstructed realizations\n  real(8) :: Ak,alpha,lamc,xl,xr,Eigfuncint\n\n  Eigfuncint = Ak * (         (-cos(alpha*xr)+cos(alpha*xl))/alpha &\n                       + lamc*( sin(alpha*xr)-sin(alpha*xl))           )\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the x-value of eigenvector nodes given a step size and a bin index.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.5,2]", "case2": "[1.0,4]", "case3": "[0.1,2]", "case4": "[0.0,1]", "case5": "[2.5,4]", "result": ["0.75000000000000000", "3.5000000000000000", "0.15000000000000002", "0.0000000000000000", "8.7500000000000000"]}, "code": "function xNyst(step,ibin)\n  !This function solves the x-value of eigenvector nodes\n  integer :: ibin\n  real(8) :: step,xNyst\n  xNyst = -step/2d0 + step*ibin\n  end function"}
{"instruction": "Use Fortran to create a function that finds the indexes of the first k zero crossings in an array of real numbers.", "test_case": {"param_num": 2, "param_type": "integer,real(:)", "case1": "[3,[1.0,0.0,-1.0,0.0,1.0,0.0,-1.0,0.0]]", "case2": "[2,[1.0,2.0]]", "case3": "[4,[1.0,0.0,-1.0,0.0,1.0,0.0,-1.0,0.0,1.0,0.0,-1.0,0.0]]", "case4": "[2,[0.0,0.0]]", "case5": "[3,[1.0,0.0,-1.0]]", "result": ["3           4           7", "-1          -1", "3           4           7           8", "-1          -1", "3          -1          -1"]}, "code": "function zero_crossings(k, ys) result(zcs)\n    !! Finds indexes of first k zero crossings\n    real :: ys(:)\n    logical :: sign_prev, sign_next\n    integer :: i, j, k, zcs(k)\n\n    zcs = -1\n    sign_prev = ys(1) >= 0\n    j = 1\n\n    do i = 2, size(ys, 1)\n      if (j > k) exit\n      sign_next = ys(i) >= 0\n      if (sign_prev .neqv. sign_next) then\n        sign_prev = sign_next\n        zcs(j) = i\n        j = j + 1\n      end if\n    end do\n  end function"}
{"instruction": "Use Fortran to give me a function that replaces a substring in a string with another substring.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','there'", "case2": "'goodbye','bye','adios'", "case3": "'123456789','456','0'", "case4": "'abcdefg','hij','klm'", "case5": "'','hello','world'", "result": ["hello there", "goodadios", "1230789", "abcdefg", ""]}, "code": "function inter(string,place,ins) result(new)\n    character(len=*), intent(in)                          :: string,place,ins\n    character(len=len(string)+max(0,len(ins)-len(place))) :: new\n    integer                                               :: idx\n    idx = index(string,place)\n    if ( idx == 0 ) then\n      new = string\n    else\n      new = string(1:idx-1)//ins//string(idx+len(place):len(string))\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that left-adjusts a string onto a length of nchars characters.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 10", "case2": "'world', 5", "case3": "'fortran', 3", "case4": "'programming', 15", "case5": "'test', 4", "result": ["hello", "world", "for", "programming", "test"]}, "code": "function sys_adjustl(sstring,nchars) result(soutput)\n\n!<description>\n    ! Extended ADJUSTR.\n    ! Left-adjusts a string onto a length on nchars characters\n!</description>\n\n!<input>\n    ! value to be converted\n    character(len=*), intent(in) :: sstring\n\n    ! number of characters\n    integer, intent(in)      :: nchars\n!</input>\n\n!<result>\n    ! String representation of the value (right-aligned),\n    ! fixed length of nchars characters\n    character (len=nchars) :: soutput\n!</result>\n!</function>\n\n    soutput = trim(adjustl(sstring))\n\n  end function"}
{"instruction": "Use Fortran to create a function that returns the first nchar characters of a given string sstring.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'Hello World!',5", "case2": "'Fortran is awesome',10", "case3": "'Testing',3", "case4": "'123456789',9", "case5": "'abcdefg',2", "result": ["Hello", "Fortran is", "Tes", "123456789", "ab"]}, "code": "function sys_triml (sstring,nchar) result(sout)\n  \n!<description>\n  ! This function return nchar characters of the given string sstring\n!</description>\n\n!<input>\n  ! A string\n  character(len=*), intent(in) :: sstring\n\n  ! Number of characters to return\n  integer, intent(in) :: nchar\n!</input>\n\n!<returns>\n  ! The trimmed string\n  character (len=nchar) :: sout\n!</returns>\n\n!</function>\n\n    sout = sstring(1:nchar)\n\n  end function"}
{"instruction": "Use Fortran to create a function that returns the last nchar characters of a given string sstring.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'Hello World!',5", "case2": "'Fortran is awesome',10", "case3": "'123456789',3", "case4": "'Testing',7", "case5": "'This is a test',15", "result": ["orld!", "is awesome", "789", "Testing", "\u0012This is a test"]}, "code": "function sys_trimr (sstring,nchar) result(sout)\n  \n!<description>\n  ! This function return nchar characters of the given string sstring\n!</description>\n\n!<input>\n  ! A string\n  character(len=*), intent(in) :: sstring\n\n  ! Number of characters to return\n  integer, intent(in) :: nchar\n!</input>\n\n!<returns>\n  ! The trimmed string\n  character (len=nchar) :: sout\n!</returns>\n\n!</function>\n\n    ! local variable\n    integer :: nlen\n\n    nlen = len(sstring)\n    sout = sstring(nlen-nchar+1:nlen)\n\n  end function"}
{"instruction": "Use Fortran to create a function that takes in a default string and an optional string, and returns the optional string if it is present, otherwise returns the default string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','programming'", "case3": "'test',''", "case4": "'default', 'option'", "case5": "'','option'", "result": ["world", "programming", "", "option", "option"]}, "code": "function input_String(default,option) result(val)\r\n\tcharacter(*),intent(in) :: default\r\n\tcharacter(*),optional,intent(in)::option\r\n\tcharacter(200 ) :: val\r\n\r\n\tif(present(option) )then\r\n\t\tval=option\r\n\telse\r\n\t\tval=default\r\n\tendif\r\n\r\nend function"}
{"instruction": "Use Fortran to give me a function that determines if a point (x,y) is inside a circle with center (cen_x, cen_y) and radius \"radius\".", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[0,0,5,3,4]", "case2": "[10,10,2,10,10]", "case3": "[5,5,10,5,5]", "case4": "[0,0,1,1,1]", "case5": "[0,0,0,0,0]", "result": ["F", "T", "T", "F", "F"]}, "code": "function inside_circle(cen_x, cen_y, radius, x, y) result(is_inside)\n    implicit none\n    integer, intent(in) :: cen_x, cen_y, radius, x, y\n    integer :: distance\n    logical :: is_inside\n    distance = (cen_x - x) * (cen_x - x) + (cen_y - y) * (cen_y - y)\n    is_inside = distance < radius * radius\nend function"}
{"instruction": "Use Fortran to create a function that centers a given unit in parenthesis within a string of a given length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello',10]", "case2": "['world',15]", "case3": "['fortran',8]", "case4": "['center',6]", "case5": "['unit',4]", "result": ["(hello)", "(world)", "(fortran)", "", ""]}, "code": "function center_unit(string,length)                                  result(ws)\n   !--------------------------------------------------------------------------------------------------------------------\n   ! Returns a string of given length where a given unit is centered in parenthesis.\n   !--------------------------------------------------------------------------------------------------------------------\n      !\n      character(len=*), intent(in) :: string \n      integer, intent(in)          :: length\n      character(len=30)            :: ws \n      !\n      integer           :: lx, ly\n      character(len=10) :: wa = \"          \"\n      !\n      lx = len_trim(string)\n      ly = (length - lx - 2)/2\n      !\n      if (ly < 0) then\n         stop \"center_unit(): program stop A.\"\n      end if\n      !\n      ws = wa(1:ly) // \"(\" // trim(string) // \")\" // wa\n      !\n   end function"}
{"instruction": "Use Fortran to define a function that takes three integer arguments and returns a pointer to a type.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[1,2,0]", "case5": "[0,2,1]", "result": ["1", "0", "100", "1", "0"]}, "code": "function g_socket_connection_factory_lookup_type( &\n        family, &\n        type, &\n        protocol_id &\n    ) bind(c)\n      use iso_c_binding, only: c_int, c_ptr\n      integer(c_int), value :: family\n      integer(c_int), value :: type\n      integer(c_int), value :: protocol_id\n      type(c_ptr) g_socket_connection_factory_lookup_type\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the nth order Legendre polynomial at a given value of x.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[0,0.5]", "case2": "[1,0.5]", "case3": "[2,0.5]", "case4": "[3,0.5]", "case5": "[4,0.5]", "result": ["1.0000000000000000", "0.50000000000000000", "-0.12500000000000000", "-0.43750000000000000", "-0.28906250000000000"]}, "code": "function legendre_p (n, x)\n\n    integer, intent (in) :: n\n    double precision, intent (in) :: x\n    integer :: k\n    double precision :: p, p1, p2, legendre_p\n\n    select case (n)\n    case (0)\n       legendre_p = dble(1.0)\n    case (1)\n       legendre_p = x\n    case default\n       p1 = x\n       p2 = dble(1.0)\n       do k=2, n\n          p = ((2*k-1)*x*p1 - (k-1)*p2) / k\n          p2 = p1\n          p1 = p\n       end do\n       legendre_p = p\n    end select\n\n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient of n1 and n2.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,0]", "case2": "[5,3]", "case3": "[10,5]", "case4": "[7,2]", "case5": "[15,7]", "result": ["1", "10", "252", "21", "6435"]}, "code": "function binomial(n1,n2) result(nchoos)\n    real(8) :: xh\n    integer :: n1,n2,i\n    integer nchoos\n    xh = 1.d0\n    if(n2<0) then\n       nchoos = 0\n       return\n    endif\n    if(n2==0) then\n       nchoos = 1\n       return\n    endif\n    do i = 1,n2\n       xh = xh*dble(n1+1-i)/dble(i)\n    enddo\n    nchoos = int(xh + 0.5d0)\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the right-hand side of a Poisson equation with given parameters.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.5,0.5]", "case2": "[0.0,1.0]", "case3": "[1.0,0.0]", "case4": "[0.25,0.75]", "case5": "[0.75,0.25]", "result": ["-1.1840846448189289E-030", "0.0000000000000000", "0.0000000000000000", "78.956835208714864", "78.956835208714864"]}, "code": "function g(x,y)\n\n  ! the RHS of the Poisson equation we are solving\n\n  implicit none\n\n  double precision :: g, x, y\n  double precision, parameter :: pi = 3.14159265358979323846d0\n\n  g = -2.d0*(2.0*pi)**2 * sin(2.0*pi*x) * sin(2.0*pi*y)\n\n  return\nend function"}
{"instruction": "Use Fortran to define a function that calculates the analytic solution to an equation using the sine function.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.5,0.5]", "case2": "[0.25,0.75]", "case3": "[0.75,0.25]", "case4": "[0.0,0.0]", "case5": "[1.0,1.0]", "result": ["1.4996607218221374E-032", "-1.0000000000000000", "-1.0000000000000000", "0.0000000000000000", "5.9986428872885498E-032"]}, "code": "function true(x,y)\n\n  ! the analytic solution to our equation\n\n  implicit none\n\n  double precision true, x, y\n  double precision, parameter :: pi = 3.14159265358979323846d0\n  \n  true = sin(2.0*pi*x) * sin(2.0*pi*y)\n  \n  return\nend function"}
{"instruction": "Use Fortran to give me a function for a Gaussian distribution with inputs t, I, t0, and s.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0_8,2.0_8,3.0_8,4.0_8]", "case2": "[0.0_8,1.0_8,2.0_8,3.0_8]", "case3": "[1.0_8,0.0_8,2.0_8,3.0_8]", "case4": "[1.0_8,2.0_8,0.0_8,3.0_8]", "case5": "[1.0_8,2.0_8,3.0_8,0.0_8]", "result": ["1.84452498", "0.874706328", "7.58926347E-02", "1.97320843", "0.00000000"]}, "code": "function gaussian( t, I, t0, s )\n\t\treal(8), intent(in) :: t\n\t\treal(8), intent(in) :: I\n\t\treal(8), intent(in) :: t0\n\t\treal(8), intent(in) :: s\n\t\t\n\t\tgaussian = I*exp(-0.5_8*(t-t0)**2/s**2)\n\t\t\n\tend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a lower and upper bound using the qsort algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["8.00000000", "5.00000000", "56.0000000", "186.000000", "-38.0000000"]}, "code": "function qsort_rand( lower, upper )\n  integer                       :: lower, upper\n  real                          :: r\n  call random_number( r )\n  qsort_rand =  lower + nint(r * (upper-lower))\nend function"}
{"instruction": "Use Fortran to create a function that returns the number of possible connections between nPoints in a space of dimension dim.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[5,2]", "case3": "[100,1]", "case4": "[1,5]", "case5": "[0,10]", "result": ["9.00000000", "5.00000000", "99.0000000", "1.00000000", "0.00000000"]}, "code": "function cds1(nPoints, dim)\n    integer, intent(in) :: nPoints, dim\n    \n    if (dim == 1) then\n       cds1 = nPoints - 1\n    else\n       cds1 = nPoints\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the number of degrees of freedom for a given number of points and dimensions.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,2]", "case2": "[5,3]", "case3": "[0,4]", "case4": "[100,1]", "case5": "[20,0]", "result": ["9.00000000", "5.00000000", "0.00000000", "100.000000", "20.0000000"]}, "code": "function cds2(nPoints, dim)\n    integer, intent(in) :: nPoints, dim\n    \n    if (dim == 2) then\n       cds2 = nPoints - 1\n    else\n       cds2 = nPoints\n    end if\n  end function"}
{"instruction": "Use Fortran to define a function that returns the Levi-Civita symbol for a given set of indices.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[3,1,2]", "case3": "[2,3,1]", "case4": "[1,1,1]", "case5": "[2,2,2]", "result": ["1", "1", "1", "0", "0"]}, "code": "function my_Levi_Civita(i,j,k)\n        !Hard coded Levi Civita tensor\n        integer,        intent(in)      :: i,j,k\n        logical                         :: even, odd\n        !\n        !\n        even    = (i==1 .and. j==2 .and. k==3) .or. (i==2 .and. j==3 .and. k==1) .or. (i==3 .and. j==1 .and. k==2)\n        odd     = (i==3 .and. j==2 .and. k==1) .or. (i==1 .and. j==3 .and. k==2) .or. (i==2 .and. j==1 .and. k==3)\n        !\n        if(even)        then\n                                my_Levi_Civita  =  1\n        else if(odd)    then    \n                                my_Levi_Civita  = -1\n        else \n                                my_Levi_Civita  =  0\n        end if\n        !\n        return\n    end function"}
{"instruction": "Use Fortran to give me a function that takes an optional integer argument i and a required integer argument j, and returns i if it is present, otherwise -5.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[5,1]", "case5": "[2,0]", "result": ["1", "3", "3", "5", "2"]}, "code": "function first(i, j) result(r)\n    integer, intent(in), optional :: i\n    integer, intent(in) :: j\n    integer :: r\n    if (present(i)) then\n      r = i\n    else\n      r = -5\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that opens a file using gzip compression.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','r'", "case2": "'file.gz','w'", "case3": "'file.bin','rb'", "case4": "'file.dat','wb'", "case5": "'file.txt','a'", "result": ["817664", "13859328", "6978048", "8419840", "16087552"]}, "code": "function gzopen(path, mode) bind(C)\n       use iso_c_binding, only: c_char, c_ptr\n       implicit none\n       character(c_char), intent(in) :: path(*), mode(*)\n       type(c_ptr) :: gzopen\n     end function"}
{"instruction": "Use Fortran to define a function that checks if two cells in a 3D grid are connected based on their position and properties.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,1,1,1]", "case2": "[2,3,4,2]", "case3": "[5,5,5,2]", "case4": "[10,10,10,1]", "case5": "[2,2,2,3]", "result": ["T", "T", "T", "T", "T"]}, "code": "function is_connected(i,j,k,dim)\n         implicit none\n         integer, intent(in) :: i,j,k,dim\n         integer :: ii,jj,kk\n         logical :: is_connected!, use_normal\n         integer, dimension(3) :: pos\n         ! real(WP), dimension(3) :: nref, nloc, pref, ploc\n         \n         pos = 0\n         pos(dim) = -1\n         ii = i + pos(1)\n         jj = j + pos(2)\n         kk = k + pos(3)\n         is_connected = .true.\n         ! use_normal = getNumberOfVertices(this%poly(1,i,j,k)).gt.0 .and. (getNumberOfVertices(this%poly(1,ii,jj,kk)).gt.0)\n         ! if (use_normal) then\n         !    ! If neighbor is a two-plane cell\n         !    if (getNumberOfVertices(this%poly(2,ii,jj,kk)).ne.0) then\n         !       nref = calculateNormal(this%poly(1,ii,jj,kk))\n         !       nloc = calculateNormal(this%poly(2,ii,jj,kk))\n         !       pref = calculateCentroid(this%poly(1,ii,jj,kk))\n         !       ploc = calculateCentroid(this%poly(2,ii,jj,kk))\n         !       is_connected = dot_product(ploc-pref,nloc).gt.0.0_WP ! .true. if liquid film\n         !    ! If self is a two-plane cell\n         !    elseif (getNumberOfVertices(this%poly(2,i,j,k)).ne.0) then\n         !       nref = calculateNormal(this%poly(1,i,j,k))\n         !       nloc = calculateNormal(this%poly(2,i,j,k))\n         !       pref = calculateCentroid(this%poly(1,i,j,k))\n         !       ploc = calculateCentroid(this%poly(2,i,j,k))\n         !       is_connected = dot_product(ploc-pref,nloc).gt.0.0_WP ! .true. if liquid film\n         !    ! If both are one-plane cells\n         !    else\n         !       nref = calculateNormal(this%poly(1,i,j,k))\n         !       nloc = calculateNormal(this%poly(1,ii,jj,kk))\n         !       pref = calculateCentroid(this%poly(1,i,j,k))\n         !       ploc = calculateCentroid(this%poly(1,ii,jj,kk))\n         !       is_connected = (dot_product(ploc-pref,nloc).ge.0.0_WP).or.(dot_product(pref-ploc,nref).ge.0.0_WP)\n         !    end if\n         ! end if\n         return\n      end function"}
{"instruction": "Use Fortran to give me a function that coarsens an integer v by a factor i.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[-10,3]", "case3": "[10,-3]", "case4": "[-10,-3]", "case5": "[0,5]", "result": ["3", "-4", "-3", "2", "0"]}, "code": "function int_coarsen(v, i) result(r)\n    integer, intent(in) :: v\n    integer, intent(in) :: i\n    integer :: r\n    if ( v < 0 ) then\n       r = -abs(v+1)/i - 1\n    else\n       r = v/i\n    end if\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[100,75]", "case4": "[0,5]", "case5": "[10,0]", "result": ["5", "5", "25", "5", "10"]}, "code": "function greatest_common_divisor(x,y) result(c)\n        implicit none\n        integer, intent(in) :: x,y\n        integer             :: a,b\n        integer             :: t,c\n        a = x\n        b = y\n        do while (b/=0)\n            t = b\n            b = mod(a,b)\n            a = t\n        end do\n        c = abs(a)\n        end function"}
{"instruction": "Use Fortran to create a function that takes an integer array, creates a logical mask, allocates a new array with only the true values of the mask, and returns the new array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[1,2,3,0,0]", "case4": "[0,0,0,0,0,0,0]", "case5": "[1,2,3,4,5,6,7,8,9]", "result": ["1           2           3           4           5", "0           0           0           0           0", "1           2           3           0           0", "0           0           0           0           0           0           0", "1           2           3           4           5           6           7           8           9"]}, "code": "function reduced (array)\n      integer, dimension(:), allocatable :: reduced\n      integer, dimension(:), intent(in) :: array\n      logical, dimension(size(array)) :: mask\n      mask = .true. \n      allocate (reduced (count (mask)))\n      reduced = pack (array, mask)\n    end function"}
{"instruction": "Use Fortran to create a function that takes in a date and time and returns a string in ISO 8601 format.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[2021,10,31,23,59,59]", "case2": "[2022,1,1,0,0,0]", "case3": "[2021,2,29,12,0,0]", "case4": "[2021,13,1,0,0,0]", "case5": "[2021,1,32,0,0,0]", "result": ["2021-10-31T23:59:59Z", "2022-01-01T00:00:00Z", "2021-02-29T12:00:00Z", "2021-13-01T00:00:00Z", "2021-01-32T00:00:00Z"]}, "code": "function datetime2string(iyear, imonth, iday, ihour, imin, isec, ierr) result(datetimestr)\n         integer,           intent(in)  :: iyear, imonth, iday\n         integer, optional, intent(in)  :: ihour, imin, isec !< Time is optional, will be printed as 00:00:00 if omitted.\n         integer, optional, intent(out) :: ierr !< Error status, 0 if success, nonzero in case of format error.\n\n         character(len=20) :: datetimestr !< The resulting date time string. Considering using trim() on it.\n\n         integer :: ihour_, imin_, isec_, ierr_\n         if (.not. present(ihour)) then\n            ihour_ = 0\n         else\n            ihour_ = ihour\n         end if\n         if (.not. present(imin)) then\n            imin_ = 0\n         else\n            imin_ = imin\n         end if\n         if (.not. present(isec)) then\n            isec_ = 0\n         else\n            isec_ = isec\n         end if\n\n         write (datetimestr, '(i4,\"-\",i2.2,\"-\",i2.2,\"T\",i2.2,\":\",i2.2,\":\",i2.2,\"Z\")', iostat=ierr_) &\n                               iyear, imonth, iday, ihour_, imin_, isec_\n\n         if (present(ierr)) then\n            ierr = ierr_\n         end if\n      end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isDigit(singleChar) result(stringIsDigit)\n#if defined DLL_ENABLED && !defined CFI_ENABLED\n        !DEC$ ATTRIBUTES DLLEXPORT :: isDigit\n#endif\n        character(1), intent(in)    :: singleChar\n        logical                     :: stringIsDigit\n        character(*), parameter     :: Digit(10) = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n        integer                     :: j\n        stringIsDigit = .false.\n        loopOverDigit: do j = 1,10\n            if (singleChar==Digit(j)) then\n                stringIsDigit = .true.\n                exit loopOverDigit\n            end if\n        end do loopOverDigit\n    end function"}
{"instruction": "Use Fortran to create a function that appends a file extension to a given path and basename.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'./','file','txt'", "case2": "'./','file',''", "case3": "'./','file.txt',''", "case4": "'./','file.txt','txt'", "case5": "'./','file.txt','csv'", "result": ["./file.txt", "./file", "./file.txt", "./file.txt.txt", "./file.txt.csv"]}, "code": "function filename_append(path,basename,ext) result(filename)\n\ncharacter(len=*), intent(in)           :: path\ncharacter(len=*), intent(in)           :: basename\ncharacter(len=*), intent(in), optional :: ext\ncharacter(len=280)                     :: filename\n\n! ... Local variables\n! ...\ninteger i\ncharacter(len=180) lpath,lbase,lext\n\nlpath = ''\nlext  = ''\n\ni = len_trim(path)\nif (i.eq.0) then\n  lpath = './'\nelse\n  if (path(i:i).eq.'/') then\n    lpath = trim(path)\n  else\n    lpath = trim(path)//'/'\n  endif\nendif\n\nif (basename(1:2).eq.'./') then\n  lbase = trim(basename(3:))\nelse\n  lbase = trim(basename)\nendif\n\nif (present(ext)) then\n  i = len_trim(ext)\n  if (i.gt.0) then\n    if (ext(1:1).eq.'.') then\n      lext = trim(ext)\n    else\n      lext = '.'//trim(ext)\n    endif\n  endif\nendif\n\nfilename = trim(lpath)//trim(lbase)//trim(lext)\n\nend function"}
{"instruction": "Use Fortran to create a function that returns a matrix of size a x b with elements equal to their corresponding row and column indices.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[3,2]", "case4": "[5,5]", "case5": "[10,10]", "result": ["1.0000000000000000", "1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000", "1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000", "1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000        10.000000000000000        11.000000000000000        12.000000000000000        13.000000000000000        14.000000000000000        15.000000000000000        16.000000000000000        17.000000000000000        18.000000000000000        19.000000000000000        20.000000000000000        21.000000000000000        22.000000000000000        23.000000000000000        24.000000000000000        25.000000000000000", "1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000        10.000000000000000        11.000000000000000        12.000000000000000        13.000000000000000        14.000000000000000        15.000000000000000        16.000000000000000        17.000000000000000        18.000000000000000        19.000000000000000        20.000000000000000        21.000000000000000        22.000000000000000        23.000000000000000        24.000000000000000        25.000000000000000        26.000000000000000        27.000000000000000        28.000000000000000        29.000000000000000        30.000000000000000        31.000000000000000        32.000000000000000        33.000000000000000        34.000000000000000        35.000000000000000        36.000000000000000        37.000000000000000        38.000000000000000        39.000000000000000        40.000000000000000        41.000000000000000        42.000000000000000        43.000000000000000        44.000000000000000        45.000000000000000        46.000000000000000        47.000000000000000        48.000000000000000        49.000000000000000        50.000000000000000        51.000000000000000        52.000000000000000        53.000000000000000        54.000000000000000        55.000000000000000        56.000000000000000        57.000000000000000        58.000000000000000        59.000000000000000        60.000000000000000        61.000000000000000        62.000000000000000        63.000000000000000        64.000000000000000        65.000000000000000        66.000000000000000        67.000000000000000        68.000000000000000        69.000000000000000        70.000000000000000        71.000000000000000        72.000000000000000        73.000000000000000        74.000000000000000        75.000000000000000        76.000000000000000        77.000000000000000        78.000000000000000        79.000000000000000        80.000000000000000        81.000000000000000        82.000000000000000        83.000000000000000        84.000000000000000        85.000000000000000        86.000000000000000        87.000000000000000        88.000000000000000        89.000000000000000        90.000000000000000        91.000000000000000        92.000000000000000        93.000000000000000        94.000000000000000        95.000000000000000        96.000000000000000        97.000000000000000        98.000000000000000        99.000000000000000        100.00000000000000"]}, "code": "function returnMat( a, b ) result( mat )\n    integer:: a, b, i\n    double precision, dimension(a,b):: mat\n    mat = dble (reshape ([(i, i = 1, a * b)],[a,b])) \n    return\n  end function"}
{"instruction": "Use Fortran to create a function that checks if the elements of an array are within a certain range and returns the number of elements that are not within that range.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.5,1.0,1.5]", "case3": "[2.0,3.0,4.0,5.0]", "case4": "[0.0,0.1,0.2,0.3,0.4,0.5]", "case5": "[1.0,2.0,3.0,4.0,5.0]", "result": ["3", "4", "4", "6", "5"]}, "code": "function check_1d ( temp ) result ( nbad )\n real   , intent(in)  :: temp(:)\n integer :: nbad, ind, i\n real    :: tmp\n\n   nbad = 0\n   do i = 1, size(temp,1)\n     ind = int(dtinv*(temp(i)-tmin+teps))\n     if (ind < 0 .or. ind > nlim) nbad = nbad+1\n   enddo\n\n end function"}
{"instruction": "Use Fortran to give me a function that replaces all occurrences of a given substring with another substring in a given input string.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "['hello world','world','everyone']", "case2": "['good morning','morning','afternoon']", "case3": "['how are you','are','am']", "case4": "['the quick brown fox','fox','dog']", "case5": "['to be or not to be','be','not']", "result": ["hello everyone", "good afternoon", "how am you", "the quick brown dog", "to not or not to not"]}, "code": "function replace_text (inputstr,search,replace) result(outputstr)\n\nimplicit none\ncharacter(len=*), intent(in) :: inputstr\ncharacter(len=*), intent(in) :: search\ncharacter(len=*), intent(in) :: replace\ncharacter(len(inputstr)+100) :: outputstr\n\n! Locals\ninteger :: i, nt, nr\n\noutputstr = inputstr\nnt = len_trim(search)\nnr = len_trim(replace)\n\ndo\n  i = index(outputstr,search(:nt)) ; if (i == 0) exit\n  outputstr = outputstr(:i-1) // replace(:nr) // outputstr(i+nt:)\nend do\n\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between two given values.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["10.0000000", "11.0000000", "71.0000000", "141.000000", "4.00000000"]}, "code": "function randint(lo, hi)\ninteger, intent(in) :: lo, hi\nreal :: r\n\ncall random_number(r)\n\nrandint = floor(r * (hi + 1 - lo)) + lo\n\nend function"}
{"instruction": "Use Fortran to create a function that counts the number of instances of a single character in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'apple','p'", "case3": "'banana','a'", "case4": "'12345','5'", "case5": "'testing','t'", "result": ["2", "2", "3", "1", "2"]}, "code": "function CountChar(str1,solo)\n! Count the number of instances of the single character in a character string.\n! useful when parsing a comma-separated list, for example.\n! Count the commas and add 1 to get the number of items in the list.\n\ninteger                      :: CountChar\ncharacter(len=*), intent(in) :: str1\ncharacter,        intent(in) :: solo\n\ninteger :: i\n\nCountChar = 0\ndo i = 1,len_trim(str1)\n   if (str1(i:i) == solo) CountChar = CountChar + 1\nenddo\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the row index of an element in a flattened array given its index and the stride of the original array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "0", "2"]}, "code": "function get_row_id(i, stride) result(irow)\n    integer, intent(in)         :: i, stride\n    integer                     :: irow\n    \n    irow = mod(i, stride)\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the column index of an element in a 2D array given its row index and the stride of the array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "1", "2", "6", "1"]}, "code": "function get_column_id(i, stride) result(icol)\n    integer, intent(in)         :: i, stride\n    integer                     :: icol\n    \n    icol = 1 + i / stride\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the linear index of a 2D array given its row and column indices and the stride of the array.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["4", "28", "70", "130", "208"]}, "code": "function get_linear_index(irow, icol, stride) result(id)\n    integer, intent(in)         :: irow, icol, stride\n    integer                     :: id\n    \n    id = (icol - 1) * stride + irow\n    end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns their difference.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["-1.00000000", "-1.00000000", "1.00000000", "4.00000000", "-2.00000000"]}, "code": "function compare_ints(a, b)\n    integer, intent(in) :: a, b\n\n    compare_ints = a - b\n  end function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function f_add(a, b) result(r)\n    integer a, b, r\n    r = a + b\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the Compton heating rate given the temperature and expansion factor.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[2.0,0.5]", "case2": "[1.0,1.0]", "case3": "[0.0,0.0]", "case4": "[1.5,2.0]", "case5": "[3.0,0.1]", "result": ["4.7157619200000001E-034", "1.4736756000000000E-035", "Infinity", "4.6052362500000001E-037", "1.4736755999999991E-030"]}, "code": "function heat_compton(T,aexp)\n!=======================================================================\n  implicit none\n  real(kind=8) ::T,aexp,heat_compton\n  heat_compton=5.406D-36*2.726D0/aexp**5\n  return\nend function"}
{"instruction": "Use Fortran to create a function that takes in two integers and returns a formatted string for a floating point number with the given width and decimal places.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[5,10]", "case3": "[0,5]", "case4": "[10,0]", "case5": "[0,0]", "result": ["(f10.5)", "(f5.10)", "(f0.5)", "(f10.0)", "(f0.0)"]}, "code": "function make_fmt(w, d)\n    integer, intent(in) :: w, d\n    character(len=10) :: make_fmt\n    \n    write (make_fmt,'(\"(f\",i0,\".\",i0,\")\")') w, d\nend function"}
{"instruction": "Use Fortran to create a function that takes a single uppercase letter as input and returns the corresponding lowercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'B'", "case3": "'Z'", "case4": "'a'", "case5": "'z'", "result": ["'", "'", "'", "'", "'"]}, "code": "function to_lower_index(c) result(res)\n    character(len=1), intent(in) :: c\n    character(len=1) :: res\n\n    integer :: i\n    character(len=26), parameter :: &\n      upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", &\n      lower = \"abcdefghijklmnopqrstuvwxyz\"\n\n    res = c\n    i = index(upper, c)\n    if (i > 0) res = lower(i:i)\n  end function"}
{"instruction": "Use Fortran to create a function that changes the current working directory to the directory specified by the input path.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'home/user'", "case3": "'../'", "case4": "'C:/Users'", "case5": "'./'", "result": ["12548528", "7371184", "15104432", "13990320", "13007280"]}, "code": "function c_chdir(path) bind(C, name=\"chdir\")\n                \n            use iso_c_binding\n\n            character(kind=c_char), intent(IN) :: path(*)\n            integer(kind=C_int) :: c_chdir\n        end function"}
{"instruction": "Use Fortran to create a function that converts an integer to a string with a specified length.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[123, 5]", "case2": "[0, 3]", "case3": "[-456, 10]", "case4": "[2147483647, 2]", "case5": "[-2147483648, 8]", "result": ["00123", "000", "000000-456", "21", "-2147483"]}, "code": "function str_I32(i, len)\n\n            use iso_fortran_env, only : Int32\n\n            implicit none\n\n            integer(int32),    intent(IN)    :: i\n            integer, optional, intent(IN) :: len\n\n            character(len=:), allocatable :: str_I32\n            character(len=100) :: string\n            integer            :: lentmp, lenuse\n\n            write(string,'(I100.1)') I\n\n            if(present(len))then\n                lentmp = len_trim(adjustl(string))\n                lenuse = len\n\n                if(len >= lentmp)then\n                    str_I32 = repeat(\"0\", lenuse - lentmp)//trim(adjustl(string))\n                else\n                    str_I32 = trim(adjustl(string))\n                    str_I32 = trim(adjustl(str_I32(:len)))                        \n                end if\n            else\n                str_I32 = trim(adjustl(string))\n            end if\n        end function"}
{"instruction": "Use Fortran to create a function that converts a logical array to a string.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.false.]", "case4": "[.false.]", "case5": "[.true.,.true.,.false.,.false.,.true.]", "result": ["T F T", "F F F", "T T T F", "F", "T T F F T"]}, "code": "function str_logicalarray(a)\n\n            implicit none\n\n            logical, intent(IN) :: a(:)\n\n            character(len=:), allocatable :: str_logicalarray\n            character(len=100) :: string\n            integer :: i\n\n            do i = 1, size(a)\n                write(string,'(L1)') a(i)\n                str_logicalarray = str_logicalarray//' '//trim(adjustl(string))\n            end do\n\n        end function"}
{"instruction": "Use Fortran to give me a function that calculates a 6x6 matrix based on input parameters.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,1]", "case2": "[0.5,1.0,-1]", "case3": "[2.0,0.0,1]", "case4": "[1.0,1.0,0]", "case5": "[0.0,0.0,1]", "result": ["(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (1.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (1.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)              (0.50000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.50000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (2.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (2.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)"]}, "code": "function hhop1_matrix(t,lSOC,spinsign) result(hmat)\r\n      complex(8),dimension(6,6) :: hmat\r\n      real(8),dimension(6,6)    :: tempmat\r\n      real(8),intent(in)        :: t,lSOC\r\n      integer(4),intent(in)     :: spinsign\r\n      !\r\n      if (.not.(spinsign==1 .or. spinsign==-1)) stop \"Invalid spinsign passed!\"\r\n      !\r\n      hmat    = zero\r\n      tempmat = zero\r\n      !\r\n      tempmat(1,:) = [ 0, 0, 0, 1, 0, 0 ]\r\n      tempmat(2,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(3,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(4,:) = [ 1, 0, 0, 0, 0, 0 ]\r\n      tempmat(5,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(6,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      hmat         = hmat + t*tempmat\r\n      !\r\n      tempmat(1,:) = [ 0, 0, 1, 0,-1, 0 ]\r\n      tempmat(2,:) = [ 0, 0, 0, 1, 0, 0 ]\r\n      tempmat(3,:) = [-1, 0, 0, 0, 0, 0 ]\r\n      tempmat(4,:) = [ 0,-1, 0, 0, 0, 1 ]\r\n      tempmat(5,:) = [ 1, 0, 0, 0, 0, 0 ]\r\n      tempmat(6,:) = [ 0, 0, 0,-1, 0, 0 ]\r\n      hmat         = hmat + spinsign*lSOC*(0,1)*tempmat\r\n      !\r\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates a 6x6 matrix based on input parameters t, lSOC, and spinsign.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,1]", "case2": "[0.5,1.0,-1]", "case3": "[2.0,0.0,1]", "case4": "[1.0,1.0,0]", "case5": "[0.0,0.0,1]", "result": ["(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (1.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (1.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)              (0.50000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)              (0.50000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (2.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (2.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)"]}, "code": "function hhop2_matrix(t,lSOC,spinsign) result(hmat)\r\n      complex(8),dimension(6,6) :: hmat\r\n      real(8),dimension(6,6)    :: tempmat\r\n      real(8),intent(in)        :: t,lSOC\r\n      integer(4),intent(in)     :: spinsign\r\n      !\r\n      if (.not.(spinsign==1 .or. spinsign==-1)) stop \"Invalid spinsign passed!\"\r\n      !\r\n      hmat    = zero\r\n      tempmat = zero\r\n      !\r\n      tempmat(1,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(2,:) = [ 0, 0, 0, 0, 1, 0 ]\r\n      tempmat(3,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(4,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(5,:) = [ 0, 1, 0, 0, 0, 0 ]\r\n      tempmat(6,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      hmat         = hmat + t*tempmat\r\n      !\r\n      tempmat(1,:) = [ 0, 0, 0, 0,-1, 0 ]\r\n      tempmat(2,:) = [ 0, 0, 0, 1, 0,-1 ]\r\n      tempmat(3,:) = [ 0, 0, 0, 0, 1, 0 ]\r\n      tempmat(4,:) = [ 0,-1, 0, 0, 0, 1 ]\r\n      tempmat(5,:) = [ 1, 0,-1, 0, 0, 0 ]\r\n      tempmat(6,:) = [ 0, 1, 0, 0, 0, 0 ]\r\n      hmat         = hmat + spinsign*lSOC*(0,1)*tempmat\r\n      !\r\n   end function"}
{"instruction": "Use Fortran to give me a function that returns a 6x6 complex matrix based on input parameters t, lSOC, and spinsign.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,1]", "case2": "[3.0,4.0,-1]", "case3": "[3.14,2.71,1]", "case4": "[5.0,1.0,-1]", "case5": "[2.0,4.0,1]", "result": ["(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (1.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.0000000000000000)               (1.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (3.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (3.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.7100000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.7100000000000000)               (0.0000000000000000,2.7100000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.7100000000000000)               (3.1400000000000001,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.7100000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,2.7100000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-2.7100000000000000)               (3.1400000000000001,0.0000000000000000)               (0.0000000000000000,2.7100000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (5.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,1.0000000000000000)               (5.0000000000000000,0.0000000000000000)              (0.0000000000000000,-1.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (2.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)              (0.0000000000000000,-4.0000000000000000)               (2.0000000000000000,0.0000000000000000)               (0.0000000000000000,4.0000000000000000)               (0.0000000000000000,0.0000000000000000)               (0.0000000000000000,0.0000000000000000)"]}, "code": "function hhop3_matrix(t,lSOC,spinsign) result(hmat)\r\n      complex(8),dimension(6,6) :: hmat\r\n      real(8),dimension(6,6)    :: tempmat\r\n      real(8),intent(in)        :: t,lSOC\r\n      integer(4),intent(in)     :: spinsign\r\n      !\r\n      if (.not.(spinsign==1 .or. spinsign==-1)) stop \"Invalid spinsign passed!\"\r\n      !\r\n      hmat    = zero\r\n      tempmat = zero\r\n      !\r\n      tempmat(1,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(2,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(3,:) = [ 0, 0, 0, 0, 0, 1 ]\r\n      tempmat(4,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(5,:) = [ 0, 0, 0, 0, 0, 0 ]\r\n      tempmat(6,:) = [ 0, 0, 1, 0, 0, 0 ]\r\n      hmat         = hmat + t*tempmat\r\n      !\r\n      tempmat(1,:) = [ 0, 0, 1, 0, 0, 0 ]\r\n      tempmat(2,:) = [ 0, 0, 0, 0, 0,-1 ]\r\n      tempmat(3,:) = [-1, 0, 0, 0, 1, 0 ]\r\n      tempmat(4,:) = [ 0, 0, 0, 0, 0, 1 ]\r\n      tempmat(5,:) = [ 0, 0,-1, 0, 0, 0 ]\r\n      tempmat(6,:) = [ 0, 1, 0,-1, 0, 0 ]\r\n      hmat         = hmat + spinsign*lSOC*(0,1)*tempmat\r\n      !\r\n   end function"}
{"instruction": "Use Fortran to give me a function that removes all occurrences of a given substring from the end of a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world', 'world'", "case2": "'hello world', 'hello'", "case3": "'hello world', 'o'", "case4": "'hello world', ' '", "case5": "'hello world', 'd'", "result": ["hello", "hello world", "hello world", "hello world", "hello worl"]}, "code": "function chomp_substring_char_char(string, substring) result(chomped_string)\n        character(len=*), intent(in) :: string\n        character(len=*), intent(in) :: substring\n        character(len=:), allocatable :: chomped_string\n        integer :: last, nsub\n\n        last = len(string)\n        nsub = len(substring)\n        if (nsub > 0) then\n            do while(string(last-nsub+1:last) == substring)\n                last = last - nsub\n            end do\n        end if\n        chomped_string = string(1:last)\n\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given string starts with a given substring.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','he'", "case2": "'world','wor'", "case3": "'fortran','for'", "case4": "'python','py'", "case5": "'programming','pro'", "result": ["T", "T", "T", "T", "T"]}, "code": "function starts_with_char_char(string, substring) result(match)\n        character(len=*), intent(in) :: string\n        character(len=*), intent(in) :: substring\n        logical :: match\n        integer :: nsub\n\n        nsub = len(substring)\n        if (len(string) < nsub) then\n            match = .false.\n            return\n        end if\n        match = string(1:nsub) == substring\n\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given string ends with a given substring.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','lo'", "case2": "'world','ld'", "case3": "'fortran','an'", "case4": "'python','on'", "case5": "'programming','ing'", "result": ["T", "T", "T", "T", "T"]}, "code": "function ends_with_char_char(string, substring) result(match)\n        character(len=*), intent(in) :: string\n        character(len=*), intent(in) :: substring\n        logical :: match\n        integer :: last, nsub\n\n        last = len(string)\n        nsub = len(substring)\n        if (last < nsub) then\n            match = .false.\n            return\n        end if\n        match = string(last-nsub+1:last) == substring\n\n    end function"}
{"instruction": "Use Fortran to create a function that pads a given string with spaces to a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello', 10]", "case2": "['world', 5]", "case3": "['fortran', 7]", "case4": "['testing', 3]", "case5": "['', 0]", "result": ["hello", "world", "fortran", "testing", ""]}, "code": "function padr_char_default(string, output_length) result(res)\n        character(len=*), intent(in) :: string\n        integer, intent(in) :: output_length\n        character(len=max(len(string), output_length)) :: res\n\n        res = string\n\n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer and a character as input, returns an integer array and modifies the character to \"proc4\".", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[10,'hello']", "case2": "[0,'world']", "case3": "[-5,'fortran']", "case4": "[100,'testing']", "case5": "[999,'cases']", "result": ["10          10          10          10          10          10          10          10          10          10", "0           0           0           0           0           0           0           0           0           0", "-5          -5          -5          -5          -5          -5          -5          -5          -5          -5", "100         100         100         100         100         100         100         100         100         100", "999         999         999         999         999         999         999         999         999         999"]}, "code": "function proc4 (arg, chr)\n    integer, dimension(10) :: proc4\n    integer, intent(in) :: arg\n    character(8), intent(inout) :: chr\n    proc4 = arg\n    chr = \"proc4\"\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer and a character as input and returns an integer array.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[10,'hello']", "case2": "[0,'world']", "case3": "[-5,'fortran']", "case4": "[100,'programming']", "case5": "[999,'language']", "result": ["176           0         106           0     7305504           0     7303680           0           2           0", "176           0         106           0     6912288           0     6910464           0           2           0", "176           0         106           0     7305504           0     7303680           0           2           0", "176           0         106           0    14317856           0    14316032           0           2           0", "176           0         106           0    15890720           0    15888896           0           2           0"]}, "code": "function proc_ext (arg, chr)\n      integer, dimension(10) :: proc_ext\n      integer, intent(in) :: arg\n      character(8), intent(inout) :: chr\n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer and a character as input, returns an integer array and modifies the character to \"proc_ext\".", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[10,'test']", "case2": "[0,'test']", "case3": "[100,'test']", "case4": "[5,'']", "case5": "[2,'test']", "result": ["10          10          10          10          10          10          10          10          10          10", "0           0           0           0           0           0           0           0           0           0", "100         100         100         100         100         100         100         100         100         100", "5           5           5           5           5           5           5           5           5           5", "2           2           2           2           2           2           2           2           2           2"]}, "code": "function proc_ext (arg, chr)\n  integer, dimension(10) :: proc_ext\n  integer, intent(in) :: arg\n  character(8), intent(inout) :: chr\n  proc_ext = arg\n  chr = \"proc_ext\"\nend function"}
{"instruction": "Use Fortran to define a function that takes in four integer inputs and returns an integer array of size 5 multiplied by the sum of the elements in the input array numcat, multiplied by the sum of dimlatout plus one, plus the product of npred, dimlatin, and dimlatin plus three divided by two.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer(:)", "case1": "[1,2,3,[1,2,3]]", "case2": "[4,5,6,[4,5,6,7]]", "case3": "[2,3,4,[1,2,3,4]]", "case4": "[5,6,7,[5,6,7,8,9]]", "case5": "[1,2,3,[1,2,3,4,5,6]]", "result": ["14614864           0    14646608           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0   369164311   268466710           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764", "16449872           0    16481680           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -419430169       30834    16449872           0    16481616           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -520093471       30793    16449872           0    16449872           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -771751726       30840    16449872           0    16449872           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           4       30882    16449776           0    16449776           0    16449632           0    16449632           0    16486400           0       24576           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "17695056           0    17726864           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -419430169       28418    17695056           0    17726800           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -520093471       28473    17695056           0    17695056           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -771751726       28424    17695056           0    17695056           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "16318800           0    16350912           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -167771914       11741    16318800           0    16350912           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -419430169       11746    16318800           0    16318800           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -520093471       11735    16318800           0    16318800           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -771751726       11750    16318800           0    16318800           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           4       11463    16318704           0    16318704           0    16318560           0    16318560           0    16355328           0       24576           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "6947152           0     6978896           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0   369164311   268478897           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -520093471       43400     6947152           0     6978896           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -771751726       43400     6947152           0     6947152           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0"]}, "code": "function mapbeta(dimlatin,dimlatout, npred,numcat)\n\t\timplicit none\n\t\tinteger,intent(in)::dimlatin,dimlatout,npred,numcat(:)\n\t\tinteger::mapbeta(5,sum(numcat)*(dimlatout+1)+npred*dimlatin*(dimlatin+3)/2)\n\tend function"}
{"instruction": "Use Fortran to give me a function that multiplies two integers and returns the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2.00000000", "12.0000000", "6.00000000", "5.00000000", "8.00000000"]}, "code": "function op_i4(a,b)\n    integer, value :: a, b\n    op_i4 = a * b\n  end function"}
{"instruction": "Use Fortran to define a function that takes in two real numbers and returns a real number calculated using a specific formula.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,0.0]", "case4": "[-1.0,-2.0]", "case5": "[1.5,-1.5]", "result": ["-1.9974899999999999E-004", "-6.8513907000000048E-005", "0.0000000000000000", "1.9974899999999999E-004", "5.3932229999999999E-003"]}, "code": "function f1 ( x0, t )\n\n! ======================================================================\n\n    use, intrinsic:: iso_fortran_env, only: real64\n\n    implicit none\n    real(real64), intent(in   ) :: x0\n    real(real64), intent(in   ) :: t\n    real(real64)                :: f1\n\n! ======================================================================\n\n    f1 = 1.99749d-4*(x0 - t)**3\n\n    return\n! ======================================================================\n  end function"}
{"instruction": "Use Fortran to define a function f2 that takes in two real numbers x1 and t and returns a real number.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[0.0,1.0]", "case4": "[10.0,5.0]", "case5": "[2.5,1.5]", "result": ["0.47141699999999997", "0.47141699999999997", "0.47141699999999997", "1.2162329999999999", "0.71968900000000002"]}, "code": "function f2 ( x1, t )\n\n! ======================================================================\n\n    use, intrinsic:: iso_fortran_env, only: real64\n\n    implicit none\n    real(real64), intent(in   ) :: x1\n    real(real64), intent(in   ) :: t\n    real(real64)                :: f2\n\n! ======================================================================\n\n    f2 = 5.95553d-1 - 0.124136d0*(t - x1)\n\n    return\n! ======================================================================\n  end function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a digit and false otherwise.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_digit(ch) result(res)\r\n\r\n! Returns .true. if ch is a digit (0,1,...,9) and .false. otherwise\r\n\r\ncharacter :: ch\r\nlogical :: res\r\n\r\nselect case(ch)\r\ncase('0':'9')\r\n  res=.true.\r\ncase default\r\n  res=.false.\r\nend select\r\nreturn\r\n\r\nend function"}
{"instruction": "Use Fortran to give me a function for multiplying two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,5]", "case3": "[-1,4]", "case4": "[10,10]", "case5": "[100,-100]", "result": ["6.00000000", "0.00000000", "-4.00000000", "100.000000", "-10000.0000"]}, "code": "function mult_int(n1, n2) result(product)\n        integer, intent(in) :: n1, n2\n        product = n1 * n2\n    end function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient n choose r.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["10", "120", "35", "3003", "184756"]}, "code": "function n_C_r(n, r) result(bin)\n        integer(16)         :: bin\n        integer, intent(in) :: n\n        integer, intent(in) :: r\n\n        integer(16)         :: num\n        integer(16)         :: den\n        integer             :: i\n        integer             :: k\n        integer, parameter  :: primes(*) = [2,3,5,7,11,13,17,19]\n        num = 1\n        den = 1\n        do i=0,r-1\n            num = num*(n-i)\n            den = den*(i+1)\n            if (i > 0) then\n                ! Divide out common prime factors\n                do k=1,size(primes)\n                    if (mod(i,primes(k)) == 0) then\n                        num = num/primes(k)\n                        den = den/primes(k)\n                    end if\n                end do\n            end if\n        end do\n        bin = num/den\n    end function"}
{"instruction": "Use Fortran to create a function that generates an array of N evenly spaced values between startPoint and endPoint.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,5]", "case2": "[0.0,10.0,10]", "case3": "[0.0,1.0,3]", "case4": "[1.0,2.0,1]", "case5": "[0.0,1.0,2]", "result": ["1.0000000000000000        1.2500000000000000        1.5000000000000000        1.7500000000000000        2.0000000000000000", "0.0000000000000000        1.1111111111111112        2.2222222222222223        3.3333333333333335        4.4444444444444446        5.5555555555555554        6.6666666666666670        7.7777777777777786        8.8888888888888893        10.000000000000000", "0.0000000000000000       0.50000000000000000        1.0000000000000000", "NaN", "0.0000000000000000        1.0000000000000000"]}, "code": "function util_linspace(startPoint,endPoint,N) result(outArray)\n        !%-----------------------------------------------------------------------------\n        !% Description:\n        !% similar to python/matlab linspace\n        !%-----------------------------------------------------------------------------\n        real(8), intent(in)  :: startPoint \n        real(8), intent(in)  :: endPoint\n        integer, intent(in)  :: N\n        real(8)              :: delta\n        real(8), allocatable :: outArray(:)\n        integer :: ii\n        !%-----------------------------------------------------------------------------\n        !% calculate step size\n        delta = (endPoint - startPoint)/real(N-1,8)\n\n        !% allocate the outArry based on number of samples\n        allocate(outArray(N))\n\n        do ii = 1, N\n            outArray(ii) = startPoint + (ii-1)*delta\n        end do\n\n    end function"}
{"instruction": "Use Fortran to create a function that checks if two integer values are equal and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,0]", "case3": "[100,100]", "case4": "[-5,-5]", "case5": "[999,999]", "result": ["T", "T", "T", "T", "T"]}, "code": "function check_values_int( val1, val2 )\n    integer :: val1, val2\n    logical :: check_values_int\n\n    if( val1 == val2 ) then\n      check_values_int = .true.\n    else\n      check_values_int = .false.\n    endif\n  end function"}
{"instruction": "Use Fortran to create a function that returns the ASCII code of a given character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'Z'", "case3": "' '", "case4": "'1'", "case5": "'&'", "result": ["39", "39", "39", "39", "39"]}, "code": "function my_ichar(c)\n    integer :: my_ichar\n    character(len=1), intent(in) :: c\n    my_ichar = ichar(c)\n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the dot product of two real numbers u_1 and u_2, multiplied by a constant sigma.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0_8,2.0_8]", "case2": "[3.5_8,4.5_8]", "case3": "[0.0_8,1.0_8]", "case4": "[2.0_8,5.0_8]", "case5": "[-1.0_8,3.0_8]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function dot_u_1(u_1, u_2)\n\t\treal (8), intent (in) ::u_1, u_2\n\t\tdot_u_1 = sigma*(u_2 - u_1)\n\tend function"}
{"instruction": "Use Fortran to define a function that calculates the true solution for the thin film equation.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,0.0]", "case2": "[0.0,1.0]", "case3": "[1.0,0.0]", "case4": "[1.0,1.0]", "case5": "[0.5,0.5]", "result": ["0.0000000000000000", "0.0000000000000000", "0.84147098480789650", "0.30955987565311222", "0.29078628821269187"]}, "code": "function true_solution(x, t)\n\n! True solution for the thin film equation,\n!     q_t + (qq_xxx)_x = 0.\n\n    implicit none\n    double precision, intent(in) :: x, t\n    double precision :: true_solution\n\n    true_solution = exp(-t) * sin(x)\n    \nend function"}
{"instruction": "Use Fortran to create a function that calculates the local northward unit vector in the Cartesian coordinate system given the longitude and latitude of a position.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,0.0]", "case2": "[1.0,0.0]", "case3": "[0.0,1.0]", "case4": "[1.0,1.0]", "case5": "[45.0,90.0]", "result": ["-0.0000000000000000       -0.0000000000000000        1.0000000000000000", "-0.0000000000000000       -0.0000000000000000        1.0000000000000000", "-0.84147098480789650       -0.0000000000000000       0.54030230586813977", "-0.45464871341284091      -0.70807341827357118       0.54030230586813977", "-0.46963610531905992      -0.76070491197945733      -0.44807361612917013"]}, "code": "function Sp_Unit_North( lon, lat ) result( unit_north )\n    ! imported from prg_mkinit_ncep.f90 (original written by H.Miura)\n    ! ------\n    ! Compute local northward unit vector (unit_north) \n    ! in the Cartesian coordinate system\n    ! given longitude (lon) and latitude (lat) of a position.\n    !\n    implicit none\n    real(8), intent(in) :: lon, lat  ! [ rad ]\n    real(8) :: unit_north(3)\n    !\n    unit_north(1) = - sin( lat ) * cos( lon )    ! --- x-direction\n    unit_north(2) = - sin( lat ) * sin( lon )    ! --- y-direction\n    unit_north(3) =   cos( lat )                 ! --- z-direction\n    return\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the local column index given the global column index, number of blocks, and number of processors.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["0", "0", "0", "0", "0"]}, "code": "function pcol(global_col, nblk, np_cols) result(local_col)\n      use, intrinsic :: iso_c_binding, only : c_int\n      implicit none\n      integer(kind=c_int), intent(in) :: global_col, nblk, np_cols\n      integer(kind=c_int)             :: local_col\n      local_col = MOD((global_col-1)/nblk,np_cols)\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the local row index given the global row index, number of blocks, and number of rows.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["0", "0", "0", "0", "0"]}, "code": "function prow(global_row, nblk, np_rows) result(local_row)\n      use, intrinsic :: iso_c_binding, only : c_int\n      implicit none\n      integer(kind=c_int), intent(in) :: global_row, nblk, np_rows\n      integer(kind=c_int)             :: local_row\n      local_row = MOD((global_row-1)/nblk,np_rows)\n   end function"}
{"instruction": "Use Fortran to write a function that takes in a domain ID and a routine name and returns a message with the domain ID and routine name concatenated.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'routine1']", "case2": "[2,'routine2']", "case3": "[3,'routine3']", "case4": "[4,'routine4']", "case5": "[5,'routine5']", "result": ["dom1:routine1", "dom2:routine2", "dom3:routine3", "dom4:routine4", "dom5:routine5"]}, "code": "function write_message_dom(dom_id, routine) result(msg)\n   integer,          intent(in) :: dom_id\n   character(len=*), intent(in) :: routine\n   \n   character(len=512) :: msg\n\n   write(msg, '(''dom'',I1,'':'', A)') dom_id, trim(routine) \n\nend function"}
{"instruction": "Use Fortran to give me a function for the Gaussian distribution with inputs n and m.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[100,20]", "case3": "[50,10]", "case4": "[30,15]", "case5": "[25,5]", "result": ["7.19188107E-03", "0.454040706", "0.454040706", "7.19188107E-03", "0.454040706"]}, "code": "function gauss(n, m)\n    real, parameter :: pi = 4. * atan(1.)\n    integer, intent(in) :: n, m\n    real :: gauss\n\n    gauss = exp(-2. * pi**2 * m**2 / n**2)\n  end function"}
{"instruction": "Use Fortran to give me a function for adding two double precision floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.5]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function add_n(a,b)\n         use, intrinsic :: iso_c_binding\n         implicit none\n         real(c_double), intent(in) :: a,b\n         real(c_double) :: add_n\n      end function"}
{"instruction": "Use Fortran to define a function that calculates the element of a matrix based on the input parameters m, n, k, and l.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,6,7,8]", "case3": "[10,20,30,40]", "case4": "[100,200,300,400]", "case5": "[500,600,700,800]", "result": ["0.0000000000000000", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000"]}, "code": "function elem(m, n, k, l)\r\n\r\n      use, intrinsic :: iso_fortran_env\r\n      implicit none\r\n\r\n      integer(kind=int32), intent(in) :: m, n, k, l\r\n      !real(kind=REAL128) :: elem\r\n      real(kind=real64) :: elem\r\n\r\n      integer(kind=int32) :: i\r\n\r\n      elem = 0.\r\n\r\n      if(m /= n - l + k) then\r\n        return\r\n      endif\r\n      if(n < l) then\r\n        return\r\n      endif\r\n      elem = 1.\r\n      ! Apply creation operator\r\n      do i = 0, l - 1\r\n        !elem = elem * sqrt(real(n - i, 16))\r\n        elem = elem * sqrt(real(n - i, 8))\r\n      end do\r\n      ! Apply anihilation operator\r\n      do i = 1, k\r\n        !elem = elem * sqrt(real(n - l + i, 16))\r\n        elem = elem * sqrt(real(n - l + i, 8))\r\n      end do\r\n\r\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the number of combinations of k items from a set of n items.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,1]", "case4": "[0,3]", "case5": "[8,5]", "result": ["10.0000000", "120.000000", "7.00000000", "0.00000000", ""]}, "code": "function comb(no,ko)\n  integer, intent(in) :: no,ko\n  integer, dimension(1:4), parameter :: ifact= (/1,2,6,24/) \n  integer :: k,kf\n  if ((ko.le.0).or.(ko.gt.4)) then\n   stop 'error in function comb'\n  endif\n  kf= no\n  do k= 1,(ko-1)\n   kf= kf*(no-k)\n  enddo\n  kf= kf/ifact(ko)\n  comb= kf\n  end function"}
{"instruction": "Use Fortran to create a function that takes two integer arguments, one of which is optional, and returns the second argument.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,0]", "result": ["2", "4", "2", "1", "0"]}, "code": "function fun1 (arg1, arg2)\n      integer,intent(in), optional :: arg1\n      integer,intent(in)           :: arg2\n      integer                      :: fun1\n      fun1 = arg2\n   end function"}
{"instruction": "Use Fortran to create a function that returns the second input argument if it exists, otherwise returns 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "4", "2", "1", "4"]}, "code": "function fun2 (arg1,arg2)\n      integer,intent(in), optional :: arg1\n      integer,intent(in), optional :: arg2\n      integer                      :: fun2\n      fun2 = arg2\n   end function"}
{"instruction": "Use Fortran to define a function that initializes a square matrix of size m with zeros and increments a global counter variable nglobal by 1.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[2,3,2]", "case3": "[5,5,10]", "case4": "[0,0,0]", "case5": "[100,100,100]", "result": ["0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000"]}, "code": "function trs2a2 (j, k, m)\n    real, dimension (1:m,1:m) :: trs2a2\n    integer, intent (in)      :: j, k, m\n    nglobal = nglobal + 1\n    trs2a2 = 0.0\n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the angle of refraction given the angle of incidence and refractive indices of two media.", "test_case": {"param_num": 3, "param_type": "real*4,real*4,real*4", "case1": "[45.0,1.0,1.5]", "case2": "[30.0,1.33,1.0]", "case3": "[60.0,1.5,1.33]", "case4": "[0.0,1.0,1.0]", "case5": "[90.0,1.0,1.33]", "result": ["0.603185892", "NaN", "-0.350930065", "0.00000000", "0.737146437"]}, "code": "function refraction(theta1, n1, n2) \r\n    implicit none \r\n    real :: theta1\r\n    real :: n1\r\n    real :: n2\r\n    real :: refraction \r\n    \r\n    refraction = asin(sin(theta1) * n1 / n2)\r\n    return \r\nend function"}
{"instruction": "Use Fortran to create a function that compares two strings based on their ASCII character codes and returns true if the first string is greater than or equal to the second string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','world']", "case2": "['world','hello']", "case3": "['hello','hello']", "case4": "['','world']", "case5": "['hello','']", "result": ["T", "T", "T", "T", "F"]}, "code": "function LGE(STRING_A, STRING_B)\n\t! Determines whether one string is lexically greater than or equal to another string,\n\t! where the two strings are interpreted as containing ASCII character codes.\n\t! If the String A and String B are not the same length, the shorter is compared as if spaces\n\t! were appended to it to form a value that has the same length as the longer.\n    !\n    ! In general, the lexical comparison intrinsics LGE, LGT, LLE, and LLT differ from\n    ! the corresponding intrinsic operators .GE., .GT., .LE., and .LT., in that the latter use the\n    ! processor's character ordering (which is not ASCII on some targets), whereas the former\n    ! always use the ASCII ordering.\n    ! Arguments:\n    ! STRING_A      -Shall be of default CHARACTER type.\n    ! STRING_B      -Shall be of default CHARACTER type.\n    ! Return value:\n    ! Returns .TRUE. if STRING_A >= STRING_B, and .FALSE. otherwise, based on the ASCII ordering.\n    ! Standard: Fortran 77 and later\n    character(len=*) :: STRING_A, STRING_B\n    logical :: LGE\nend function"}
{"instruction": "Use Fortran to create a function that compares two strings based on ASCII ordering and returns true if the first string is lexically greater than the second string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','world']", "case2": "['world','hello']", "case3": "['hello','hello']", "case4": "['','world']", "case5": "['hello','']", "result": ["T", "T", "T", "T", "F"]}, "code": "function LGT(STRING_A, STRING_B)\n\t! Determines whether one string is lexically greater than another string, where the two strings\n\t! are interpreted as containing ASCII character codes. If the String A and String B are not the\n\t! same length, the shorter is compared as if spaces were appended to it to form a value that has\n\t! the same length as the longer.\n    ! In general, the lexical comparison intrinsics LGE, LGT, LLE, and LLT differ from the corresponding\n    ! intrinsic operators .GE., .GT., .LE., and .LT., in that the latter use the processor's character\n    ! ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering.\n    ! Arguments:\n    ! STRING_A  -Shall be of default CHARACTER type.\n    ! STRING_B  -Shall be of default CHARACTER type.\n    ! Return value:\n    ! Returns .TRUE. if STRING_A > STRING_B, and .FALSE. otherwise, based on the ASCII ordering.\n    ! Standard: Fortran 77 and later\n    character(len=*) :: STRING_A, STRING_B\n    logical :: LGT\nend function"}
{"instruction": "Use Fortran to create a function that compares two strings based on ASCII ordering and returns true if the first string is less than or equal to the second string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','world']", "case2": "['world','hello']", "case3": "['hello','hello']", "case4": "['','world']", "case5": "['hello','']", "result": ["T", "T", "T", "T", "F"]}, "code": "function LLE(STRING_A, STRING_B)\n\t! Determines whether one string is lexically less than or equal to another string, where the\n\t! two strings are interpreted as containing ASCII character codes. If the String A and String B\n\t! are not the same length, the shorter is compared as if spaces were appended to it to form\n\t! a value that has the same length as the longer.\n    ! In general, the lexical comparison intrinsics LGE, LGT, LLE, and LLT differ from the\n    ! corresponding intrinsic operators .GE., .GT., .LE., and .LT., in that the latter use the\n    ! processor's character ordering (which is not ASCII on some targets), whereas the former\n    ! always use the ASCII ordering.\n    ! Arguments:\n    !    STRING_A \t-Shall be of default CHARACTER type.\n    !    STRING_B \t-Shall be of default CHARACTER type.\n    ! Return value:\n    !    Returns .TRUE. if STRING_A <= STRING_B, and .FALSE. otherwise, based on the ASCII ordering.\n    ! Standard: Fortran 77 and later\n    character(len=*) :: STRING_A, STRING_B\n    logical :: LLE\nend function"}
{"instruction": "Use Fortran to create a function that compares two strings based on ASCII ordering and returns true if the first string is lexically less than the second string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','world']", "case2": "['world','hello']", "case3": "['hello','hello']", "case4": "['','world']", "case5": "['hello','']", "result": ["T", "T", "T", "T", "F"]}, "code": "function LLT(STRING_A, STRING_B)\n\t! Determines whether one string is lexically less than another string, where the two strings\n\t! are interpreted as containing ASCII character codes. If the String A and String B are not\n\t! the same length, the shorter is compared as if spaces were appended to it to form a value\n\t! that has the same length as the longer.\n    ! In general, the lexical comparison intrinsics LGE, LGT, LLE, and LLT differ from the\n    ! corresponding intrinsic operators .GE., .GT., .LE., and .LT., in that the latter use\n    ! the processor's character ordering (which is not ASCII on some targets), whereas the\n    ! former always use the ASCII ordering.\n    ! Arguments:\n    !    STRING_A \tShall be of default CHARACTER type.\n    !    STRING_B \tShall be of default CHARACTER type.\n    ! Return value:\n    !    Returns .TRUE. if STRING_A < STRING_B, and .FALSE. otherwise, based on the ASCII ordering.\n    ! Standard: Fortran 77 and later\n    character(len=*) :: STRING_A, STRING_B\n    logical :: LLT\nend function"}
{"instruction": "Use Fortran to create a function that returns the maximum value among two integer arguments.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function AMAX0(A1, A2)\n    ! This is specific name of MAX function.\n    ! AMAX0 is equivalent to REAL ( MAX ( . . . ) )\n    ! Returns the argument with the largest (most positive) value.\n    ! Syntax:\n    !    RESULT = MAX(A1, A2 [, A3 [, ...]])\n    ! Arguments:\n    !    A1     -The type shall be INTEGER.\n    !    A2, A3, ...    -An expression of the same type and kind as A1.\n    ! Return value:\n    !    The return value corresponds to the maximum value among the arguments, and has the same\n    !    type and kind as the argument.\n    ! Standard:\n    !    Fortran 77 and later\n    real :: AMAX0\n    integer :: A1, A2\nend function"}
{"instruction": "Use Fortran to create a function that returns the argument with the smallest (most negative) value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function AMIN0(A1, A2)\n    ! This is specific name of MIN function.\n    ! AMIN0 is equivalent to REAL ( MIN ( . . . ) )\n\t! Returns the argument with the smallest (most negative) value.\n    ! Syntax:\n    !    RESULT = MIN(A1, A2 [, A3, ...])\n    ! Arguments:\n    !    A1         -The type shall be INTEGER.\n    !    A2, A3, ...    -An expression of the same type and kind as A1.\n    ! Return value:\n    !    The return value corresponds to the maximum value among the arguments, and has the same type\n    !    and kind as the first argument.\n    ! Standard:\n    !    Fortran 77 and later\n    real :: AMIN0\n    integer :: A1, A2\nend function"}
{"instruction": "Use Fortran to create a function that returns a new-line character of the same kind as the input argument.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'c'", "case4": "'d'", "case5": "'e'", "result": ["\u0000", "\u0000", "\u0000", "\u0000", "\u0000"]}, "code": "function NEW_LINE(C)\n\t! Returns the new-line character.\n    ! Arguments:\n    !    C  -The argument shall be a scalar or array of the type CHARACTER.\n    ! Return value:\n    !    Returns a CHARACTER scalar of length one with the new-line character of the same kind as parameter C.\n    ! Standard:\n    !    Fortran 2003 and later\n    character(len=*) :: C\n    character(len=1) :: NEW_LINE\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["8.0462424374658728E-317   8.0301793751882822E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "6.2653926983440164E-317   6.2493296360664258E-317   0.0000000000000000        0.0000000000000000", "8.7909614192804673E-317   8.7748983570028766E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "7.2043782921033890E-317   7.1883231348761319E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "8.4024044802399106E-317   8.3863493230126534E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that concatenates two input strings and returns the resulting string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','programming'", "case3": "'','fortran'", "case4": "'programming',''", "case5": "'',''", "result": ["helloworld", "fortranprogramming", "fortran", "programming", ""]}, "code": "function cat(str1, str2)\n    character(len=*), intent(in) :: str1\n    character(len=*), intent(in) :: str2\n\n    character(len=len(str1) + len(str2)) :: cat\n    cat = str1//str2\n\n  end function"}
{"instruction": "Use Fortran to create a function that takes two character arrays and returns a logical value indicating whether the second array matches a regular expression in the first array.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['a','a']", "case2": "['a','b']", "case3": "['123','\\d{3}']", "case4": "['hello','world']", "case5": "['','']", "result": ["T", "T", "F", "F", "T"]}, "code": "function rgx_match_logical0(str,rgx) bind(c,name=\"regex_match_logical0\")\n            use iso_c_binding,only:c_char,c_int,c_bool\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            logical(kind=c_bool)::rgx_match_logical0\n        end function"}
{"instruction": "Use Fortran to create a function that checks if a given regular expression is contained in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','[a-z]']", "case2": "['world','[0-9]']", "case3": "['123','[a-z]']", "case4": "['abc','[a-z]']", "case5": "['xyz','[0-9]']", "result": ["F", "F", "F", "F", "F"]}, "code": "function rgx_contains0(str,rgx) bind(c,name=\"regex_contains0\")\n            use iso_c_binding,only:c_char,c_int,c_bool\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            logical(kind=c_bool)::rgx_contains0\n        end function"}
{"instruction": "Use Fortran to create a function that takes two character arrays and returns an integer representing the index of the first occurrence of the second array in the first array.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','l']", "case2": "['world','o']", "case3": "['fortran','r']", "case4": "['programming','z']", "case5": "['testing','t']", "result": ["16218624", "15170048", "15432192", "16087552", "15235584"]}, "code": "function rgx_indexof0(str,rgx) bind(c,name=\"regex_indexof0\")\n            use iso_c_binding,only:c_char,c_int\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            integer(kind=c_int)::rgx_indexof0\n        end function"}
{"instruction": "Use Fortran to create a function that takes in two character arrays and returns an integer representing the index of the end of the first occurrence of the second array within the first array.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','l']", "case2": "['world','o']", "case3": "['fortran','r']", "case4": "['programming','m']", "case5": "['test','t']", "result": ["2062848", "14842368", "10779136", "17267200", "12614144"]}, "code": "function rgx_indexofend0(str,rgx) bind(c,name=\"regex_indexofend0\")\n            use iso_c_binding,only:c_char,c_int\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            integer(kind=c_int)::rgx_indexofend0\n        end function"}
{"instruction": "Use Fortran to create a function that finds the last index of a regular expression in a string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello world','world']", "case2": "['hello world',' ']", "case3": "['hello world','o']", "case4": "['hello world','d']", "case5": "['hello world','z']", "result": ["7174656", "15825408", "7633408", "14383616", "7436800"]}, "code": "function rgx_lastindexof0(str,rgx) bind(c,name=\"regex_lastindexof0\")\n            use iso_c_binding,only:c_char,c_int\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            integer(kind=c_int)::rgx_lastindexof0\n        end function"}
{"instruction": "Use Fortran to create a function that takes in two character arrays and returns an integer representing the last index of the end of the regular expression in the first array.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'world','o'", "case3": "'fortran','r'", "case4": "'programming','m'", "case5": "'test','t'", "result": ["14907904", "16284160", "6978048", "7174656", "7698944"]}, "code": "function rgx_lastindexofend0(str,rgx) bind(c,name=\"regex_lastindexofend0\")\n            use iso_c_binding,only:c_char,c_int\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            integer(kind=c_int)::rgx_lastindexofend0\n        end function"}
{"instruction": "Use Fortran to create a function that takes in two character arrays and an integer, and returns a pointer to a match object.", "test_case": {"param_num": 3, "param_type": "character,character,integer", "case1": "['hello','[a-z]+',1]", "case2": "['world','[0-9]+',2]", "case3": "['1234','[0-9]+',1]", "case4": "['abc123','[a-z]+[0-9]+',1]", "case5": "['123abc','[a-z]+[0-9]+',0]", "result": ["7502400", "7764544", "15563328", "7240256", "15956544"]}, "code": "function rgx_match0(str,rgx,matchnum) bind(c,name=\"regex_match0\")\n            use iso_c_binding,only:c_ptr,c_char,c_int\n            character(len=1,kind=c_char),intent(in)::str(*),rgx(*)\n            integer(kind=c_int),intent(inout)::matchnum\n            type(c_ptr)::rgx_match0\n        end function"}
{"instruction": "Use Fortran to create a function that takes in seven integer inputs and returns their sum.", "test_case": {"param_num": 7, "param_type": "integer,integer,integer,integer,integer,integer,integer", "case1": "[1,1,1,1,1,1,1]", "case2": "[2,-1,2,-2,2,-3,2]", "case3": "[3,0,3,0,3,0,3]", "case4": "[4,1,-1,1,-1,1,-1]", "case5": "[5,-1,-2,-3,-4,-5,-6]", "result": ["7", "2", "12", "4", "-16"]}, "code": "function rule (ig, isgn, ik, it, il, ie, is)\n      integer, intent (in) :: ig, isgn, ik, it, il, ie, is\n      integer :: rule\n      rule = ig + isgn + ik + it + il + ie + is  ! make whatever you want\n    end function"}
{"instruction": "Use Fortran to create a function that takes a character input and returns an integer based on the value of the input.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'s'", "case2": "'p'", "case3": "'d'", "case4": "'f'", "case5": "'g'", "result": ["0", "0", "0", "0", "0"]}, "code": "function orbTol(orb)\n      character(1), intent(in) :: orb\n      integer :: l, orbTol\n      select case (orb)\n        case ('s')\n            l = 0\n        case ('p')\n            l = 1 \n        case ('d')\n            l = 2\n        case ('f')\n            l = 3\n       end select\n       orbTol = l\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the maximum number of columns in a matrix with given dimensions and particle and rank parameters.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer(:)", "case1": "[0,3,[2,3,4]]", "case2": "[1,2,[1,2,3,4,5]]", "case3": "[2,4,[1,2,3,4,5,6,7,8,9]]", "case4": "[1,3,[1,2,3,4,5,6,7,8,9,10]]", "case5": "[0,2,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]]", "result": ["9", "3", "6", "6", "3"]}, "code": "function dimension_column (m, Npart, Nrankp) result (NmaxC)\r\n  implicit none\r\n  integer :: m, Npart, Nrankp(Npart), NmaxC, Nstart, p, Nmax\r\n!\r\n  Nstart = 0\r\n  do p = 1, Npart\r\n    if (Nrankp(p) >= abs(m)) then\r\n      if (abs(m) == 0) then\r\n        Nmax = Nrankp(p)\r\n      else\r\n        Nmax = Nrankp(p) - abs(m) + 1\r\n      end if\r\n      Nstart = Nstart + Nmax\r\n    end if\r\n  end do\r\n  NmaxC = Nstart \r\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the maximum number of elements in a row of a matrix with a given rank and a given offset.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[0,5]", "case2": "[3,10]", "case3": "[-2,7]", "case4": "[10,15]", "case5": "[-5,20]", "result": ["5", "8", "6", "6", "16"]}, "code": "function dimension_row (m, Nrank) result (Nmax)\r\n  implicit none\r\n  integer :: m, Nrank, Nmax\r\n!\r\n  if (abs(m) == 0) then\r\n    Nmax = Nrank\r\n  else\r\n    Nmax = Nrank - abs(m) + 1\r\n  end if      \r\nend function"}
{"instruction": "Use Fortran to define a function that takes four integer inputs and returns a single integer output based on a specific indexing scheme.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,1,1,1]", "case2": "[2,3,4,2]", "case3": "[5,3,2,1]", "case4": "[10,5,8,3]", "case5": "[15,10,12,7]", "result": ["1.00000000", "33.0000000", "80.0000000", "1256.00000", "6628.00000"]}, "code": "function ijkl2intindex(i_, j_, k_, l_) result(r)\n! Index into the int2(:) array using the chemistry notation (ij|kl)\n! Here is how to iterate over all (ij|kl) combinations:\n!    ijkl = 1\n!    do i = 1, n\n!        do j = 1, i\n!            do k = 1, n\n!                do l = 1, k\n!                    if ((i-1)*i/2 + j < (k-1)*k/2 + l) cycle\n!                    call assert(ijkl2intindex(i, j, k, l) == ijkl)\n!                    ijkl = ijkl + 1\n!                end do\n!            end do\n!        end do\n!    end do\ninteger, intent(in) :: i_, j_, k_, l_\ninteger :: i, j, k, l\ninteger :: ij, kl\nif (i_ < j_) then\n    i = j_\n    j = i_\nelse\n    i = i_\n    j = j_\nend if\nif (k_ < l_) then\n    k = l_\n    l = k_\nelse\n    k = k_\n    l = l_\nend if\nij = (i-1)*i/2 + j\nkl = (k-1)*k/2 + l\nif (ij < kl) then\n    r = (kl-1)*kl/2 + ij\nelse\n    r = (ij-1)*ij/2 + kl\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that returns a value based on the input values of i, j, k, and l.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,5,5,5]", "case3": "[1,1,1,1]", "case4": "[2,2,2,2]", "case5": "[3,4,5,6]", "result": ["3", "5", "1", "2", "5"]}, "code": "function getnl(i, j, k, l) result(n)\ninteger, intent(in) :: i, j, k, l\nn = l\nif (i == j) n = min(k, n)\nif (i == k) n = min(j, n)\nif (i <= n .and. j < k) n = n - 1\nend function"}
{"instruction": "Use Fortran with C bindings to create a function that takes a character array as input and returns a pointer to a type.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'B'", "case3": "'C'", "case4": "'D'", "case5": "'E'", "result": ["7698864", "8288688", "16284080", "15104432", "17660336"]}, "code": "function c_chfl_residue(name) bind(C, name=\"chfl_residue\")\n    use iso_c_binding\n    \n    implicit none\n    type(c_ptr) :: c_chfl_residue\n    character(len=1, kind=c_char), dimension(*), intent(in) :: name\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function f90add(a, b) result(ret)\n  implicit none\n  integer :: a\n  integer :: b\n  integer :: ret\n  ret = a + b\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a white space character (space or tab).", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'\\t'", "case4": "'\\n'", "case5": "'\\r'", "result": ["F", "F", "F", "F", "F"]}, "code": "function IsWhiteSpace(C)\n    character, intent(in) :: C\n    logical IsWhiteSpace\n\n    IsWhiteSpace = (C==' ') .or. (C==char(9))\n\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,3]", "case3": "[21,7]", "case4": "[100,25]", "case5": "[50,10]", "result": ["5", "3", "7", "25", "10"]}, "code": "function gcd(m0,n0)\n    implicit none\n    integer :: gcd,m0,n0\n    integer :: m,n,mtmp,loop\n    if ( m0 >= n0 ) then\n      m=m0\n      n=n0\n    else\n      m=n0\n      n=m0\n    end if\n    do loop=1,10000\n      if ( n == 0 ) exit\n      mtmp = n\n      n = mod(m,n)\n      m = mtmp\n    end do\n    gcd = m\n  end function"}
{"instruction": "Use Fortran to create a function that sets the value of an element in an integer array at a given index.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["24", "7604512", "7538976", "7634112", "0"]}, "code": "function set(idx, val)\n  implicit none\n  integer, intent(in) :: idx, val\n  integer set\n  integer arr(100)\n\n  set = arr(idx)\n  arr(idx) = val\n  return\nend function"}
{"instruction": "Use Fortran to give me a function that returns the nonnegative remainder of integer division.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[107,50]", "case2": "[107,-50]", "case3": "[-107,50]", "case4": "[-107,-50]", "case5": "[0,5]", "result": ["7", "7", "43", "43", "0"]}, "code": "function i_modp ( i, j )\n\n!*******************************************************************************\n!\n!! I_MODP returns the nonnegative remainder of integer division.\n!\n!  Formula:\n!\n!    If\n!      NREM = I_MODP ( I, J )\n!      NMULT = ( I - NREM ) / J\n!    then\n!      I = J * NMULT + NREM\n!    where NREM is always nonnegative.\n!\n!  Comments:\n!\n!    The MOD function computes a result with the same sign as the\n!    quantity being divided.  Thus, suppose you had an angle A,\n!    and you wanted to ensure that it was between 0 and 360.\n!    Then mod(A,360) would do, if A was positive, but if A\n!    was negative, your result would be between -360 and 0.\n!\n!    On the other hand, I_MODP(A,360) is between 0 and 360, always.\n!\n!  Examples:\n!\n!        I     J     MOD  I_MODP    Factorization\n!\n!      107    50       7       7    107 =  2 *  50 + 7\n!      107   -50       7       7    107 = -2 * -50 + 7\n!     -107    50      -7      43   -107 = -3 *  50 + 43\n!     -107   -50      -7      43   -107 =  3 * -50 + 43\n!\n!  Modified:\n!\n!    02 March 1999\n!\n!  Author:\n!\n!    John Burkardt\n!\n!  Parameters:\n!\n!    Input, integer I, the number to be divided.\n!\n!    Input, integer J, the number that divides I.\n!\n!    Output, integer I_MODP, the nonnegative remainder when I is\n!    divided by J.\n!\n  implicit none\n\n  integer i\n  integer i_modp\n  integer j\n\n  if ( j == 0 ) then\n    write ( *, '(a)' ) ' '\n    write ( *, '(a)' ) 'I_MODP - Fatal error!'\n    write ( *, '(a,i6)' ) '  I_MODP ( I, J ) called with J = ', j\n    stop\n  end if\n\n  i_modp = mod ( i, j )\n\n  if ( i_modp < 0 ) then\n    i_modp = i_modp + abs ( j )\n  end if\n\n  return\nend function"}
{"instruction": "Use Fortran to create a function that counts the number of times a substring appears in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello world', 'l']", "case2": "['hello world', 'o']", "case3": "['hello world', '']", "case4": "['hello world', 'ld']", "case5": "['hello world', 'z']", "result": ["3", "2", "0", "1", "0"]}, "code": "function substrcount(str, substr)\n  character(len=*), intent(in) :: str\n  character(len=*), intent(in) :: substr\n  integer :: substrcount\n  integer :: pos\n  integer :: step\n  substrcount = 0\n  if (len(substr) == 0) then\n    return\n  else \n    pos = 1\n    do while(.true.)\n      step = index(str(pos:), substr)     \n      if (step == 0) exit\n      substrcount = substrcount + 1 \n      pos = pos + step - 1 + len(substr)\n    end do\n  end if\nend function"}
{"instruction": "Use Fortran to create a function that returns a legend associated with an integer input for printing VTK files.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[2,[4,5,6,7]]", "case3": "[1,[3,2,1]]", "case4": "[2,[5,4,3,2,1]]", "case5": "[1,[2,4,6,8]]", "result": ["rho1  =  fluid density of first component", "part  =  particle positions and orientations", "phase =  phase field of the two fluid components", "vel   =  vector velocity field of the fluid", "rho2  =  fluid density of second component"]}, "code": "function legendobs_vtk(iarg,printcodsub)\n \n!***********************************************************************\n!     \n!     LBsoft function for returning the legend_vtk which is associated\n!      tothe integer contained in the printcod array for vtk files\n!     \n!     licensed under the 3-Clause BSD License (BSD-3-Clause)\n!     author: M. Lauricella\n!     last modification October 2019\n!     \n!***********************************************************************\n \n  implicit none\n  \n  integer, intent(in) :: iarg\n  integer, intent(in), allocatable, dimension(:) :: printcodsub\n  \n  character(len=52) :: legendobs_vtk\n  \n  legendobs_vtk=repeat(' ',52)\n  if(printcodsub(iarg)==1)then\n    legendobs_vtk='rho1  =  fluid density of first component         '\n  elseif(printcodsub(iarg)==2)then\n    legendobs_vtk='rho2  =  fluid density of second component        '\n  elseif(printcodsub(iarg)==3)then\n    legendobs_vtk='phase =  phase field of the two fluid components  '\n  elseif(printcodsub(iarg)==4)then\n    legendobs_vtk='vel   =  vector velocity field of the fluid       '\n  elseif(printcodsub(iarg)==5)then\n    legendobs_vtk='part  =  particle positions and orientations      '\n  endif\n  legendobs_vtk=adjustl(legendobs_vtk)\n  \n  return\n  \n end function"}
{"instruction": "Use Fortran to give me a function for calculating the total charge density in a Lembege-Pellat current sheet.", "test_case": {"param_num": 9, "param_type": "real*4,real*4,real*4,real*4,real*4,real*4,real*4,real*4,real*4", "case1": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]", "case2": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]", "case4": "[2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0]", "case5": "[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5]", "result": ["0.452836037", "NaN", "-2.35040236", "1.97286510", "-2.21739173"]}, "code": "function charge_density(pot, Az, vDi, Ti0, Tib, vDe, Te0, Teb, nb) result(rho)\n    ! total charge density in Lembege-Pellat current sheet\n    implicit none\n    ! output\n    real :: rho\n    ! input\n    real, intent(in) :: pot, Az, vDi, Ti0, Tib, vDe, Te0, Teb, nb\n\n    rho = exp((-pot + vDi * Az) / Ti0) + nb * exp(-pot / Tib)&\n      & - exp((pot - vDe * Az) / Te0) - nb * exp(pot / Teb)\n    return\n  end function"}
{"instruction": "Use Fortran to define a function that calculates a gamma ratio based on input integers.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[10,20,30,40,50]", "case4": "[1,1,1,1,1]", "case5": "[100,200,300,400,500]", "result": ["11.570364157836526", "1.1283791670955126", "41898371.276442118", "2.1729954896813437", "NaN"]}, "code": "function Gammas_regular(m,mp,l,lp,bigL)\n        implicit none\n        INTEGER, INTENT(IN) :: m, mp, l, lp,bigL\n        REAL(kind=8) :: Gammas_regular\n\n        Gammas_regular = GAMMA((l+lp+bigL+2*m+2*mp+3.d0)/2.d0) &\n            / GAMMA(l+m+3.d0/2.d0) / GAMMA(lp+mp+3.d0/2.d0)\n\n    end function"}
{"instruction": "Use Fortran to define a function that calculates a specific mathematical expression using input integer and real variables.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[10,20,30,40,50]", "case4": "[1,1,1,1,1]", "case5": "[2,2,2,2,2]", "result": ["3.7048740949611996", "1.2732395447351628", "4398180.0074903863", "1.0531538892891450", "1.8395729013175404"]}, "code": "function Gammas_plusminus(m,mp,l,lp,bigL)\n        implicit none\n        INTEGER, INTENT(IN) :: m, mp, l, lp, bigL\n        REAL(kind=8) :: Gammas_plusminus\n\n        Gammas_plusminus =  GAMMA((l+lp+bigL+2*m+2*mp+2.d0)/2.d0) &\n            / GAMMA(l+m+3.d0/2.d0) / GAMMA(lp+mp+3.d0/2.d0)\n\n    end function"}
{"instruction": "Use Fortran to give me a function that updates a smoothing parameter based on the current value, the number of parameters estimated, and a specified smoothing parameter.", "test_case": {"param_num": 4, "param_type": "real*4,real*4,integer,integer", "case1": "[1.0,2.0,3,4]", "case2": "[0.5,0.5,2,1]", "case3": "[10.0,5.0,1,5]", "case4": "[3.14,2.71,4,2]", "case5": "[0.0,1.0,0,10]", "result": ["1.79999995", "0.500000000", "5.83333349", "2.85333347", "0.909090936"]}, "code": "function smooth_(alpha_upd,alpha,mdim,m_star)\n  real,intent(inout) :: alpha_upd\n  real,intent(in) :: alpha\n  integer,intent(in) :: mdim   ! no. parameters estimated\n  integer,intent(in) :: m_star ! smoothing parameter\n  ! note: here I take m_star := m_star * mdim\n  smooth_ = (m_star * alpha + alpha_upd) / (m_star + 1.0)\n  end function"}
{"instruction": "Use Fortran to create a function that takes a string and returns a copy of the string converted to uppercase.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'Hello World',11", "case2": "'Fortran is fun',15", "case3": "'Testing',7", "case4": "'1234567890',10", "case5": "'UPPERCASE',9", "result": ["HELLO WORLD", "FORTRAN IS FUN\u0000", "TESTING", "1234567890", "UPPERCASE"]}, "code": "function uppers(linei,ilen) result (string)\n  !     @(#)uppers: return copy of string converted to uppercase\n  !     Copyright 1996 (c), John S. Urban\n\n  ! put back in if length of input longer than length of output\n\n        character(len=*),intent(in) :: linei\n        integer,intent(in) :: ilen\n\n        character(len=ilen) :: string\n\n        character(len=1) :: let\n        integer ::  ilet\n        integer ::  iout\n        integer ::  i10\n\n        iout=1\n        string=\" \"\n\n        do i10=1,ilen,1\n           let=linei(i10:i10)\n           ilet=ichar(let)\n           ! lowercase a-z in ASCII is 97 to 122\n           ! uppercase a-z in ASCII is 65 to 90\n\n           if( (ilet >= 97) .and. (ilet <= 122))then\n              ! convert lowercase a-z to uppercase a-z\n              string(iout:iout)=char(ilet-32)\n           else\n              ! character is not an uppercase a-z, just put it in output\n              string(iout:iout)=let\n           endif\n\n           iout=iout+1\n        enddo\n\n        return\n\n  end function"}
{"instruction": "Use Fortran to give me a function that generates random numbers following a normal distribution using the Box-Muller method.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,1.0]", "case2": "[1.0,2.0]", "case3": "[2.0,3.0]", "case4": "[3.0,4.0]", "case5": "[4.0,5.0]", "result": ["0.20293817021123037", "3.1877192989467429", "1.3500379868657799", "4.4129443578606597", "4.3168367084054902"]}, "code": "function Gaussian_Box_Muller_method(x_bar_, sigma_square_)\n    ! Box-Muller \u6cd5\u4ea7\u751f\u670d\u4ece\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\n    implicit none\n    integer, parameter :: dp = selected_real_kind(8)\n    real(dp), parameter :: pi = acos(-1.d0)\n\n    real(dp), intent(in), optional :: x_bar_, sigma_square_ ! \u5747\u503c\u548c\u65b9\u5dee\n    real(dp) :: Gaussian_Box_Muller_method\n\n    real(dp) :: x_bar, sigma_square\n    real(dp) :: u, v\n\n    if (present(x_bar_)) then\n        x_bar = x_bar_\n    else\n        x_bar = 0.d0\n    end if\n    if (present(sigma_square_)) then\n        sigma_square = sigma_square_\n    else\n        sigma_square = 1.d0\n    end if\n\n    call random_number(u)\n    call random_number(v)\n    Gaussian_Box_Muller_method = sqrt(-2.d0 * log(u)) * cos(2.d0 * pi * v)\n    ! Gaussian_Box_Muller_method = sqrt(-2.d0 * log(u)) * sin(2.d0 * pi * v)\n    Gaussian_Box_Muller_method = Gaussian_Box_Muller_method * sqrt(sigma_square) + x_bar\nend function"}
{"instruction": "Use Fortran to give me a function that takes in three integer inputs and returns an integer output.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,2000]", "case2": "[31,12,2021]", "case3": "[29,2,2024]", "case4": "[30,4,2022]", "case5": "[31,6,2023]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function incdat(id,im,iy)\n      implicit none\n      integer, intent (in) :: id, im, iy\n      integer :: incdat\n    end function"}
{"instruction": "Use Fortran to give me a function that takes in a day, month, and year and returns the day of the week.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,2022]", "case2": "[31,12,2021]", "case3": "[29,2,2020]", "case4": "[30,4,2023]", "case5": "[15,6,2024]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function nwkday(id,im,iy)\n      implicit none\n      integer, intent (in) :: id,im,iy\n      integer :: nwkday\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function nxpixl(ix,iy)\n      implicit none\n      integer, intent (in) :: ix,iy\n      integer :: nxpixl\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,100]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function nypixl(ix,iy)\n      implicit none\n      integer, intent (in) :: ix,iy\n      integer :: nypixl\n    end function"}
{"instruction": "Use Fortran to define a function that counts the number of iterations in a loop from a large number down to a certain value with a given step size.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["2", "2", "2", "2", "2"]}, "code": "function test1(r, step)\n  implicit none\n  integer test1, r, step\n  integer k, n\n  k = 0\n  do n = HUGE(n) - r, HUGE(n), step\n    k = k + 1\n  end do\n  test1 = k\nend function"}
{"instruction": "Use Fortran to define a function named \"acc_get_property\" that takes three integer arguments and returns an integer value.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["1", "4", "7", "10", "13"]}, "code": "function acc_get_property_l (devicenum, devicetype, property) &\n        bind (C, name = \"acc_get_property\")\n      use iso_c_binding, only: c_int, c_size_t\n      implicit none (type, external)\n      integer (c_size_t) :: acc_get_property_l\n      integer (c_int), value :: devicenum\n      integer (c_int), value :: devicetype\n      integer (c_int), value :: property\n    end function"}
{"instruction": "Use Fortran to define a function named \"acc_get_property_string_l\" that takes three integer arguments and returns a pointer to a character.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["1", "4", "7", "10", "13"]}, "code": "function acc_get_property_string_l (devicenum, devicetype, property) &\n        bind (C, name = \"acc_get_property_string\")\n      use iso_c_binding, only: c_int, c_ptr\n      implicit none (type, external)\n      type (c_ptr) :: acc_get_property_string_l\n      integer (c_int), value :: devicenum\n      integer (c_int), value :: devicetype\n      integer (c_int), value :: property\n    end function"}
{"instruction": "Use Fortran to give me a function that wraps an integer value v within the range of 1 to size.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,7]", "case3": "[0,5]", "case4": "[15,10]", "case5": "[10,10]", "result": ["1.00000000", "5.00000000", "5.00000000", "5.00000000", "10.0000000"]}, "code": "function wrap(v, size) result(wrapped)\n        integer, intent(in) :: v, size\n\n        if (v .lt. 1) then\n            wrapped = v + size\n        else if (v .gt. size) then\n            wrapped = v - size\n        else\n            wrapped = v\n        end if\n    end function"}
{"instruction": "Use Fortran to define a function that calculates a unique number identifying a node or calculation point based on the element number, point number, and point type.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[2,3,2]", "case3": "[4,5,1]", "case4": "[6,2,2]", "case5": "[3,4,1]", "result": ["1", "11", "31", "33", "22"]}, "code": "function GetNoPt (e,k,type )\n    ! Description :\n    ! Recupere le numero unique identifiant un noeud ou un point de calcul.\n    implicit none\n    ! Inputs :\n    ! Numero de l'element\n    integer, intent(in)                                     :: e\n    ! Numero du point (calcul ou neud)                      \n    integer, intent(in)                                     :: k\n    ! Type de point (1 pour noeud, 2 pour gauss)            \n    integer, intent(in)                                     :: type\n    ! Output :                                              \n    integer                                                 :: getNoPt\n\n    ! Calcul du numero du point\n    ! Degres de liberte\n    if ( type == 1 ) then\n      getNoPt = 6*(e-1) + 3*(k-1) + 1\n      \n    ! Pts d'integration\n    else\n      getNoPt = 6*(e-1) + k + 1\n      if ( k >= 3 ) getNoPt = getNoPt + 1\n      \n    end if\n    \n    return\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the positive modulus of a and b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "0", "2"]}, "code": "function pmod(a, b) result(res)\n   implicit none\n   integer, intent(in) :: a, b\n   integer :: res\n\n   res = mod(b + mod(a,b), b)\n\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function f1 (x, y)\n    integer, intent (in) :: x, y\n    f1 = x + y\n  end function"}
{"instruction": "Use Fortran to create a function that takes in two integer arguments and returns the second argument.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2.00000000", "4.00000000", "0.00000000", "1.00000000", "4.00000000"]}, "code": "function apr_idx(nummat, k)\ninteger, intent(in) :: nummat, k\n\n  apr_idx = k\n\nend function"}
{"instruction": "Use Fortran to give me a function that takes in two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[5,1]", "case5": "[-2,4]", "result": ["3", "7", "0", "6", "2"]}, "code": "function mmom_idx(nummat, k)\ninteger, intent(in) :: nummat, k\n\n  mmom_idx = nummat + k\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the velocity index based on the number of materials and the direction.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.00000000", "7.00000000", "7.00000000", "11.0000000", "5.00000000"]}, "code": "function vel_idx(nummat, idir)\ninteger, intent(in) :: nummat, idir\n\n  vel_idx = 2*nummat + 1\n\nend function"}
{"instruction": "Use Fortran to give me a function that returns the index of an element in a list given its starting index, the size of the list, and the size of each sublist.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer(:)", "case1": "[1,2,[1,2,3]]", "case2": "[3,4,[1,2,3,4,5]]", "case3": "[3,2,[5,4,3]]", "case4": "[5,1,[1]]", "case5": "[2,4,[2,4,6,8]]", "result": ["0", "0", "0", "0", "0"]}, "code": "function getloc ( is, isg, sizelist )\n integer, intent(in) :: is, isg, sizelist(:)\n integer :: getloc, iloc, n\n   getloc = 0\n   iloc = isg\n   do n = 1, size(sizelist)\n      if ( is == iloc ) then\n          getloc = n\n          exit\n      else\n          iloc = iloc + sizelist(n)\n      endif\n   enddo\n end function"}
{"instruction": "Use Fortran to give me a function that calculates a score based on the inputs x and y.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["1", "9", "36", "100", "225"]}, "code": "function score(x,y)\n    implicit none\n    integer, intent(in) :: x,y\n    integer             :: u,v,i,j,score\n\n    score=0\n    do i=1,x\n       u=(x+1-i)\n       do j=1,y\n          v=(y+1-j)\n          score=score+(u*v)\n       end do\n    end do\n    \n  end function"}
{"instruction": "Use Fortran to create a function that maps a given itheta and nchi to the corresponding chease_chi_index.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,3]", "case2": "[8,0]", "case3": "[10,5]", "case4": "[6,6]", "case5": "[2,1]", "result": ["1", "4", "10", "3", "2"]}, "code": "function chease_chi_index(nchi,itheta)\n    integer, intent(in) :: nchi, itheta\n    integer :: chease_chi_index\n    ! when ichi = 0, itheta = (ntheta-1)/2 + 1\n    ! when itheta = 0, ichi = ntheta / 2\n    ! itheta  1 2 3 4 5 6 7 8 \n    ! ichi    5 6 7 8 1 2 3 4         \n    if (itheta > nchi/2) then \n       chease_chi_index = itheta - nchi/2\n    else\n       chease_chi_index = itheta + nchi/2\n    end if\n  end function"}
{"instruction": "Use Fortran to define a function that checks if a given integer has the same digit as another integer in the same position at least three times.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[123,456]", "case2": "[12345,6789]", "case3": "[123456,789]", "case4": "[123456789,987654321]", "case5": "[123456789,123456789]", "result": ["F", "F", "F", "F", "T"]}, "code": "function predicate2(n,m)\n    implicit none\n    integer, intent(in) :: n,m\n    integer             :: a,b,temp1,temp2,count\n    logical             :: predicate2\n\n    a=n\n    b=m\n    count=0\n    predicate2=.false.\n\n    temp2=mod(b,10)\n    do while (a>0)\n       temp1=mod(a,10)\n       if (temp1==temp2) then\n          b=b/10\n          temp2=mod(b,10)\n          count=count+1\n          if (count==3) then\n             predicate2=.true.\n             return\n          end if\n       end if\n       a=a/10\n    end do\n\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the day of the year given a date in the format of year, month, and day.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,1,1]", "case2": "[2021,2,28]", "case3": "[2021,3,1]", "case4": "[2020,12,31]", "case5": "[2000,2,29]", "result": ["1", "59", "60", "366", "60"]}, "code": "function day_of_year(iyear,imonth,iday)\n\n      implicit none\n\n      integer :: day_of_year\n      integer :: iyear,imonth,iday\n      logical :: IsLeapYear\n      integer, dimension(12) :: monthdays \n\n      if  ((mod(iyear,4).eq.0)     .and.                          &\n           (mod(iyear,100).ne.0).or.(mod(iyear,400).eq.0))then\n        IsLeapYear = .true.\n        monthdays = (/31,29,31,30,31,30,31,31,30,31,30,31/)\n      else\n        IsLeapYear = .false.\n        monthdays = (/31,28,31,30,31,30,31,31,30,31,30,31/)\n      endif\n\n      if(imonth.eq.1)then\n        day_of_year = iday\n      else\n        day_of_year = sum(monthdays(1:imonth-1)) + iday\n      endif\n\n      end function"}
{"instruction": "Use Fortran to create a function that checks if a string is non-empty and contains only whitespace characters (tab or blankspace).", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'  '", "case3": "'a'", "case4": "'a b'", "case5": "'a b c'", "result": ["F", "F", "F", "F", "F"]}, "code": "function str_is_space(str) result(res)\r\n    !! Returns `.true.` if `str` is non-empty and contains only whitespace\r\n    !! characters (tab or blankspace). Otherwise `.false.` is returned.\r\n    !!\r\n    !! *Note*: This function will return `.false.` for an empty string.\r\n\r\n    character(len=*), intent(in) :: str\r\n    logical :: res\r\n    integer :: lenstr\r\n    integer :: ich\r\n    integer :: i\r\n\r\n    lenstr = len(str)\r\n\r\n    if (len(str) == 0) then\r\n        res = .false.\r\n        return\r\n    end if\r\n\r\n    res = .true.\r\n\r\n    do i = 1, lenstr\r\n        ich = iachar(str(i:i))\r\n        select case(ich)\r\n        case (9,32)\r\n            res = .true.\r\n        case default\r\n            res = .false.\r\n            return\r\n        end select\r\n    end do\r\n\r\n    end function"}
{"instruction": "Use Fortran to create a function that converts an integer to a string using a specified format.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[123,'(i0)']", "case2": "[0,'(i0)']", "case3": "[99999999,'(i10)']", "case4": "[123,'(i5)']", "case5": "[123,'(a3)']", "result": ["123", "0", "99999999", "123", "{\u0000\u0000"]}, "code": "function str_from_inum(num, frmt) result(str)\r\n\r\n    integer, intent(in) :: num\r\n    character(len=:), allocatable :: str\r\n    character(len=*), optional, intent(in) :: frmt\r\n    character(len=:), allocatable :: frmt_\r\n    character(len=24) :: buf\r\n\r\n    frmt_ = '(i0)'\r\n    if (present(frmt)) frmt_ = frmt\r\n\r\n    write(buf, frmt_) num\r\n\r\n    str = trim(adjustl(buf))\r\n\r\n    end function"}
{"instruction": "This Fortran function takes a string, a set of characters, and an argument specifying which end of the string to strip, and returns a copy of the string with the specified characters removed from the specified end.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','lo','l'", "case2": "'hello world','lo','r'", "case3": "'hello world','lo','b'", "case4": "'hello world','abc','l'", "case5": "'hello world','abc','r'", "result": ["hello world", "hel", "hel", "hello world", ""]}, "code": "function str_strip(str, chars, ends) result (ostr)\r\n    !! Returns a copy of string `str` with the leading and trailing characters\r\n    !! removed. The `chars` argument is a string specifying the set of characters to\r\n    !! be removed.  The `chars` argument is not a prefix or suffix; rather, all\r\n    !! combinations of its values are stripped. If `ends = 'l'`, only leading\r\n    !! characters are removed, if `ends = 'r'`, only trailing characters are\r\n    !! removed, and if `ends = 'b'` both leading and trailing characters are\r\n    !! removed.\r\n\r\n    character(len=*), intent(in) :: str\r\n    character(len=*), intent(in) :: chars\r\n    character(len=1), intent(in) :: ends\r\n        !! {'l', 'r', 'b'} \r\n    character(len=:), allocatable :: ostr\r\n    integer :: lenstr\r\n    integer :: ibeg\r\n    integer :: iend\r\n\r\n    lenstr = len(str)\r\n\r\n    select case (ends)\r\n    case ('l')\r\n        ibeg = verify(str, chars)\r\n        iend = lenstr\r\n    case ('r')\r\n        ibeg = 1\r\n        iend = scan(str, chars)\r\n    case ('b')\r\n        ibeg = verify(str, chars)\r\n        iend = scan(str, chars)\r\n    case default\r\n        ibeg = 1\r\n        iend = lenstr\r\n    end select\r\n\r\n    if ((ibeg==0) .or. (iend==0)) then\r\n        ostr = ''\r\n    else\r\n        ostr = str(ibeg:iend)\r\n    end if\r\n\r\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given string starts with a given prefix, with optional start and finish positions.", "test_case": {"param_num": 3, "param_type": "character,character,integer", "case1": "['hello','he',1]", "case2": "['hello','lo',2]", "case3": "['hello','he',2,3]", "case4": "['hello','he',1,2]", "case5": "['hello','he',1,4]", "result": ["T", "F", "F", "T", "T"]}, "code": "function str_startswith(str, prefix, start, finish) result(res)\r\n    !! Returns `.true.` if the string `str` starts with `prefix`, otherwise\r\n    !! returns `.false.`. With optional `start`, test beginning at that position.\r\n    !! With optional `finish`, stop comparing beyond that position.\r\n\r\n    character(len=*), intent(in) :: str\r\n    character(len=*), intent(in) :: prefix\r\n    integer, optional, intent(in) :: start\r\n    integer, optional, intent(in) :: finish\r\n    logical :: res\r\n    integer :: ibeg\r\n    integer :: iend\r\n\r\n    ibeg = 1; iend = len(str)\r\n\r\n    if (present(start)) ibeg = start\r\n    if (present(finish)) iend = finish\r\n\r\n    !Return .false. if prefix is longer than str(ibeg:iend)\r\n    if (len(prefix) > (iend-ibeg+1)) then\r\n        res = .false.\r\n        return\r\n    end if\r\n\r\n    if (index(str(ibeg:iend), prefix) == 1) then\r\n        res = .true.\r\n    else\r\n        res = .false.\r\n    end if\r\n    \r\n    end function"}
{"instruction": "Use Fortran to create a function that takes in a month and year and returns the number of days in that month, accounting for leap years.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,2020]", "case2": "[4,2021]", "case3": "[2,2000]", "case4": "[5,1900]", "case5": "[12,2022]", "result": ["29.0000000", "30.0000000", "29.0000000", "31.0000000", "31.0000000"]}, "code": "function days_in_month(month, year)\n    integer, intent(in) :: month, year\n    \n    select case (month)\n    case (4,6,9,11)\n       days_in_month = 30\n    case (1,3,5,7,8,10,12)\n       days_in_month = 31\n    case (2)\n       if (mod(year, 4) == 0 .and.  &\n            (mod(year, 100) /= 0 .or. mod(year, 400) == 0)) then\n          days_in_month = 29\n       else\n          days_in_month = 28\n       end if\n    case default\n       stop \"Invalid input to days_in_month!\"\n    end select\n  end function"}
{"instruction": "Use Fortran to define a function that calculates a value based on the input parameters using mathematical operations and returns the result.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0]", "case4": "[2.0,3.0,4.0,5.0]", "case5": "[0.5,0.5,0.5,0.5]", "result": ["3.0000000000000000", "0.0000000000000000", "1.7320508075688772", "18.973665961010276", "0.31868871959954903"]}, "code": "function dadtau(axp_tau,O_mat_0,O_vac_0,O_k_0) \n    real(kind=8)::dadtau,axp_tau,O_mat_0,O_vac_0,O_k_0\n    dadtau = axp_tau*axp_tau*axp_tau *  &\n         &   ( O_mat_0 + &\n         &     O_vac_0 * axp_tau*axp_tau*axp_tau + &\n         &     O_k_0   * axp_tau )\n    dadtau = sqrt(dadtau)\n    return\n  end function"}
{"instruction": "Use Fortran to give me a function that returns the i-th bit of an integer a.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[4,2]", "case4": "[7,5]", "case5": "[8,4]", "result": ["1", "0", "0", "0", "1"]}, "code": "function ai(a,i)\nimplicit none\ninteger, intent(in) :: a, i\ninteger :: ai\n\nif (btest(a,i-1)) then\n  ai = 1\nelse\n  ai = 0\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that returns the nearest neighbours of a given site on a 2D lattice with periodic boundary conditions.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,10]", "case2": "[3,4,20]", "case3": "[5,6,30]", "case4": "[7,8,40]", "case5": "[9,10,50]", "result": ["3           0           2           4           0           0           0           0", "7           0           4           8           0           2           6           0", "11           0           6          12           0           4          10           0", "15           0           8          16           0           6          14           0", "19           0          10          20           0           8          18           0"]}, "code": "function nearest_neighbours(site, nx, nxny) result(nn)\n\n    integer, intent(in) :: site, nx, nxny\n\n    integer, dimension(8) :: nn\n\n    nn = 0\n\n    nn(1) = site+nx\n    nn(2) = site-nx\n\n    ! Check if near right or left edge\n    select case (mod(site,nx)) \n       case (0) ! right_edge\n          nn(3:5) = 0\n          nn(6) = site-1\n          nn(7) = nn(1)-1\n          nn(8) = nn(2)-1\n       case (1) ! left_edge\n          nn(3) = site+1\n          nn(4) = nn(1)+1\n          nn(5) = nn(2)+1\n          nn(6:8) = 0\n       case default\n          nn(3) = site+1\n          nn(4) = nn(1)+1\n          nn(5) = nn(2)+1\n          nn(6) = site-1\n          nn(7) = nn(1)-1\n          nn(8) = nn(2)-1\n    end select\n\n    where (nn > nxny) nn = 0\n    where (nn < 0)    nn = 0\n\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function f1 (x, y)\n    integer, intent (in) :: x, y\n    f1 = x + y\n  end function"}
{"instruction": "Use Fortran to give me a function that performs a bitwise AND operation on two integer inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0.00000000", "0.00000000", "2.00000000", "1.00000000", "0.00000000"]}, "code": "function f3 (x, y)\n    integer, intent (in) :: x, y\n    f3 = iand (x, y)\n  end function"}
{"instruction": "Use Fortran to define a function f(t,y) that returns the value of (1/(t**2))*(dsin(2*t) - 2*t*y)", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["-3.0907025731743181", "-2.5177970123494866", "NaN", "-0.42176084443557477", "-3.3534278839461025"]}, "code": "function f(t,y)\ndouble precision t,y,f,z,x\nx=2*t\nz=x*y\nf=(1/(t**2))*(dsin(x) - z)\nreturn\nend function"}
{"instruction": "Use Fortran to create a function that computes the index of a two-dimensional array given its row and column indices.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "9", "5", "11", "8"]}, "code": "function index2(i,j)\n\n    !// THIS IS JUST A SIMPLE FUNCTION TO COMPUTE INDICES.\n    !// I DON'T INCLUDE IT IN A SEPARATE ROUTINE BECAUSE IT IS A SMALL THING AND IT\n    !// WILL BE CALLED OVER AND OVER AGAIN, AND I DON'T WANT IT TO SLOW THE CODE DOWN.\n    integer,intent(in)::i,j\n    index2 = 0 \n    index2 = max(i,j)*(max(i,j)-1)/2 + min(i,j)\n\n  end function"}
{"instruction": "Use Fortran to create a function that computes an index based on two input integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "9", "5", "11", "8"]}, "code": "function index2_test(i,j)\n\n    !// THIS IS JUST A SIMPLE FUNCTION TO COMPUTE INDICES.\n    !// I DON'T INCLUDE IT IN A SEPARATE ROUTINE BECAUSE IT IS A SMALL THING AND IT\n    !// WILL BE CALLED OVER AND OVER AGAIN, AND I DON'T WANT IT TO SLOW THE CODE DOWN.\n    integer,intent(in)::i,j\n    index2_test = 0 \n    index2_test = max(i,j)*(max(i,j)-1)/2 + min(i,j)\n\n  end function"}
{"instruction": "Use Fortran to create a function that maps four different integers onto an index that runs from 0 to NC4, assuming that i > j > k > l.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,6,7,8]", "case3": "[10,9,8,7]", "case4": "[100,200,300,400]", "case5": "[0,0,0,0]", "result": ["4", "33", "209", "5103025", "0"]}, "code": "function index4(i,j,k,l)\n\n    !// THIS IS JUST A SIMPLE FUNCTION WHICH MAPS 4 DIFFERENT INTEGERS ONTO\n    !// AN INDEX WHICH RUNS FROM 0 TO NC4.  THIS FUNCTION ASSUMES THAT\n    !//  I > J > K > L\n    integer,intent(in)::i,j,k,l\n    index4 = 0 \n    index4 = (i-1)*(i-2)*(i-3)*(i-4)/24 + (j-1)*(j-2)*(j-3)/6 + (k-1)*(k-2)/2 + l - 1\n\n  end function"}
{"instruction": "Use Fortran to create a function that takes two integers and returns an index based on their values.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,1]", "case2": "[3,1]", "case3": "[4,2]", "case4": "[5,5]", "case5": "[1,3]", "result": ["1", "2", "5", "11", "2"]}, "code": "function index2m1(i,j)\n\n    !// GIVEN TWO UNEQUL INTEGERS, THIS COMPUTES AND INDEX WHERE THE PAIR\n    !// (2,1) RETURNS 1, (3,1) RETURNS 2, AND SO ON.\n    integer, intent(in)::i,j\n    index2m1 = 0\n    index2m1 = (max(i,j)-1)*(max(i,j)-2)/2 + min(i,j)\n\n  end function"}
{"instruction": "Use Fortran to give me a function for adding two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[0,1]", "case5": "[-5,-3]", "result": ["3.00000000", "7.00000000", "1.00000000", "1.00000000", "-8.00000000"]}, "code": "function add_integer(a, b)\n        integer :: a, b\n        add_integer = a + b\n    end function"}
{"instruction": "Use Fortran to give me a function for a+b that returns a real number.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.5,1.5]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "7.00000000", "7.00000000"]}, "code": "function add_real(a, b)\n        real :: a, b\n        add_real = a + b\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a lower and upper bound using the qsort algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["1.00000000", "13.0000000", "67.0000000", "120.000000", "49.0000000"]}, "code": "function qsort_rand( lower, upper )\n    integer                       :: lower, upper\n\n    real                          :: r\n\n    call random_number( r )\n    qsort_rand =  lower + nint(r * (upper-lower))\nend function"}
{"instruction": "Use Fortran to define a function that sets the gravity field for a given i,j,k coordinate and returns a status code.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,real*8,real*8,real*8", "case1": "[1,2,3,1.0,2.0,3.0]", "case2": "[0,0,0,0.0,0.0,0.0]", "case3": "[10,20,30,0.5,0.5,0.5]", "case4": "[100,200,300,1.0,1.0,1.0]", "case5": "[5,5,5,2.0,2.0,2.0]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_gravity_field(i,j,k,fx,fy,fz) result(ret)\n    implicit none\n    integer :: ret,i,j,k\n    real*8 :: fx,fy,fz\n    real*8 :: force(3)\n    ret = 0\nend function"}
{"instruction": "Use Fortran to give me a function that sets the parallel decomposition for a 3D grid with nx, ny, and nz dimensions.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,20,30]", "case2": "[100,200,300]", "case3": "[0,0,0]", "case4": "[1,2,3]", "case5": "[1000,2000,3000]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_parallel_decomposition(nx, ny, nz) result(ret)\n    implicit none\n    integer :: ret, ntotal\n    integer, intent(in) :: nx, ny, nz\n    ret = 0\nend function"}
{"instruction": "Use Fortran to define a function that returns the parallel decomposition of a 3D grid with dimensions nx, ny, and nz.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,20,30]", "case2": "[100,200,300]", "case3": "[0,0,0]", "case4": "[1,1,1]", "case5": "[1000,1000,1000]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function get_parallel_decomposition(nx, ny, nz) result(ret)\n    implicit none\n    integer :: ret, ntotal\n    integer, intent(out) :: nx, ny, nz\nend function"}
{"instruction": "Use Fortran to give me an internal function that calculates the location of an element in a one-dimensional array that represents a two-dimensional array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "7", "5", "11", "5"]}, "code": "function iloc (ind1,ind2)                           result(loc)\n         !--------------------------------------------------------------------------------------------------------------\n         ! This internal function dispenses with the need for a two-dimensional array for the interpolation. It replaces \n         ! astatement function in the original code.\n         !--------------------------------------------------------------------------------------------------------------\n         !\n         integer, intent(in) :: ind1, ind2\n         integer             :: loc\n         !\n         loc = (ind1*(ind1-1)) / 2 + ind2\n         !\n         end function"}
{"instruction": "Use Fortran to create a function that groups elements of an array based on their similarity and returns the number of elements in each group.", "test_case": {"param_num": 1, "param_type": "real*8(:)", "case1": "[1.0d0,2.0d0,2.0d0,3.0d0,3.0d0,3.0d0]", "case2": "[1.0d0,1.0d0,2.0d0,2.0d0,3.0d0,3.0d0]", "case3": "[1.0d0,2.0d0,3.0d0,4.0d0,5.0d0,6.0d0]", "case4": "[1.0d0,1.0d0,1.0d0,1.0d0,1.0d0,1.0d0]", "case5": "[1.0d0,2.0d0,3.0d0,4.0d0,5.0d0,6.0d0]", "result": ["1           2           3", "2           2           2", "1           1           1           1           1           1", "6", "1           1           1           1           1           1"]}, "code": "function make_groups(eigval) result(groups)\n      implicit none\n      real(8), intent(in)  :: eigval(:)\n      integer, allocatable :: groups(:)\n      integer              :: color(size(eigval))\n\n      integer :: i, beg, g_cnt, n_groups\n\n      g_cnt = 1\n      beg  = 1 \n\n      do while (beg <= size(eigval)) \n         i = beg\n         do while (abs(eigval(i) - eigval(beg)) < 1e-8  ) \n            color(i) = g_cnt\n            i = i + 1 \n            if(i > size(eigval)) exit\n         enddo \n         g_cnt = g_cnt + 1 \n         beg = i \n      enddo\n\n\n      n_groups = color(size(eigval))\n      allocate(groups(n_groups))\n\n      do i = 1,n_groups \n         groups(i) = count(i == color)\n      enddo \n   end function"}
{"instruction": "Use Fortran to give me a function for calculating the arcsin of an angle with a specified number of terms.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.5,5]", "case2": "[1.0,10]", "case3": "[0.0,3]", "case4": "[0.75,7]", "case5": "[0.25,15]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function arcsin1 (angle, terms) result (value) ! no explicit type\n\t\tdouble precision angle\n\t\tinteger terms\n\t\tdouble precision value\n\tend function"}
{"instruction": "Use Fortran to define a function that calculates the arcsine of an angle using a specified number of terms in the series expansion.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.5,5]", "case2": "[1.0,10]", "case3": "[0.0,3]", "case4": "[0.75,7]", "case5": "[0.25,2]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function arcsin2 (angle, terms) result (value) ! type + recurs\n\t\tdouble precision angle\n\t\tinteger terms\n\tend function"}
{"instruction": "Use Fortran to define a function that takes an angle and number of terms as input and returns a double precision value.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.5,3]", "case2": "[1.2,5]", "case3": "[2.5,2]", "case4": "[3.7,4]", "case5": "[4.9,1]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function as (angle, terms) result (value) ! type + recurs\n\t\tdouble precision angle\n\t\tinteger terms\n\tend function"}
{"instruction": "Use Fortran to define a function that takes an angle and number of terms as input and returns a double precision value.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.5,3]", "case2": "[1.2,5]", "case3": "[2.7,2]", "case4": "[3.14,10]", "case5": "[0.0,1]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function as1 (angle, terms) result (value ) ! recurs + type\n\t\tdouble precision angle\n\t\tinteger terms\n\tend function"}
{"instruction": "Use Fortran to give me a function that takes an angle and number of terms as input and returns a double precision value.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.0,0]", "case2": "[1.0,1]", "case3": "[2.0,2]", "case4": "[3.0,3]", "case5": "[4.0,4]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function as3 (angle, terms) result (value) ! no explicit type\n\t\tdouble precision angle\n\t\tinteger terms\n\t\tdouble precision value\n\tend function"}
{"instruction": "Use Fortran to give me a function that takes in three integer arguments and returns an integer value.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[10,-5,2]", "case5": "[-1,-2,-3]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function get_global_index(i,j,k)\n         integer,intent(in):: i,j,k\n         integer:: get_global_index\n      end function"}
{"instruction": "Use Fortran to create a function that changes the current working directory to the specified path.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'../'", "case3": "'./'", "case4": "'~/Desktop/'", "case5": "'C:/Users/'", "result": ["16087472", "15956400", "7371184", "16284080", "15563184"]}, "code": "function chdir_c(path) bind(C)\n      use, intrinsic :: ISO_C_Binding\n      integer(C_INT) :: chdir_c\n      character(kind=C_CHAR), dimension(*), intent(in) :: path\n    end function"}
{"instruction": "Use Fortran to create a function that renames a file using the C binding.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file1.txt','file2.txt'", "case2": "'file3.txt','file4.txt'", "case3": "'file5.txt','file6.txt'", "case4": "'file7.txt','file8.txt'", "case5": "'file9.txt','file10.txt'", "result": ["7633408", "7961088", "15956480", "8288768", "16218624"]}, "code": "function rename_c(src,dst) bind(C)\n      use, intrinsic :: ISO_C_Binding\n      integer(C_INT) :: rename_c\n      character(kind=C_CHAR), dimension(*), intent(in) :: src,dst\n    end function"}
{"instruction": "Use Fortran to create a function that creates a symbolic link from the source file to the destination file.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file1','file2'", "case2": "'file3','file4'", "case3": "'file5','file6'", "case4": "'file7','file8'", "case5": "'file9','file10'", "result": ["7436800", "16022016", "16415232", "15366656", "7043584"]}, "code": "function symlink_c(src,dst) bind(C)\n      use, intrinsic :: ISO_C_Binding\n      integer(C_INT) :: symlink_c\n      character(kind=C_CHAR), dimension(*), intent(in)  :: src,dst\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the number of grid cells assigned to each image in a parallel computing environment.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,2,3]", "case2": "[10,5,2]", "case3": "[100,10,11]", "case4": "[100,10,10]", "case5": "[100,10,9]", "result": ["3", "5", "9", "10", "11"]}, "code": "function my_n(n_global, me, nimg) result(n_local)\n       integer, intent(in) :: n_global, me, nimg\n       integer :: n_local\n\n       ! add 1 if this image is less than the remainder that need an extra grid cell\n       n_local = n_global / nimg + merge(1,0,me <= mod(n_global,nimg)  )\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the starting memory location for a given process in a parallel program.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,1,2]", "case2": "[10,2,2]", "case3": "[10,1,3]", "case4": "[10,3,3]", "case5": "[10,2,1]", "result": ["1", "6", "1", "8", "11"]}, "code": "function my_start(n_global, me, nimg) result(memory_start)\n        implicit none\n        integer, intent(in) :: n_global, me, nimg\n        integer :: memory_start\n        integer :: base_n\n\n        base_n = n_global / nimg\n\n        memory_start = (me-1)*(base_n) + min(me-1,mod(n_global,nimg)) + 1\n\n    end function"}
{"instruction": "Use Fortran to create a function named \"AL4SAN_Init_c\" that takes two integer arguments and returns an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,0]", "result": ["1", "3", "0", "-5", "2"]}, "code": "function AL4SAN_Init_c(cpus, gpus) &\n          & bind(c, name='AL4SAN_Init')\n            use iso_c_binding\n            implicit none\n            integer(kind=c_int) :: AL4SAN_Init_c\n            integer(kind=c_int), value :: cpus, gpus\n         end function"}
{"instruction": "Use Fortran to define a function named \"AL4SAN_Set_c\" that takes two integer arguments and returns an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function AL4SAN_Set_c(param, pval) &\n          & bind(c, name='AL4SAN_Set')\n            use iso_c_binding\n            implicit none\n            integer(kind=c_int) :: AL4SAN_Set_c\n            integer(kind=c_int), value :: param\n            integer(kind=c_int), value :: pval\n         end function"}
{"instruction": "Use Fortran to give me a function that takes an integer array and returns a new array with the square of each element.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[0,-1,2,5]", "case3": "[100,200,300,400]", "case4": "[10,-20,30,-40,50]", "case5": "[0]", "result": ["1           4           9", "0           1           4          25", "10000       40000       90000      160000", "100         400         900        1600        2500", "0"]}, "code": "function square(array) result (squared)\n    integer, intent (in) :: array(:)\n    integer :: squared(size(array))\n    integer :: i\n\n    do i = 1, size(array)\n       squared(i) = array(i)*array(i)\n    enddo\n  end function"}
{"instruction": "Use Fortran to define a function that checks for I/O errors and returns a logical value indicating whether an error occurred or not.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['open',0]", "case2": "['read',-1]", "case3": "['write',100]", "case4": "['close',2]", "case5": "['seek',-10]", "result": ["F", "T", "T", "T", "T"]}, "code": "function io_failure(action,ierr)\n        use iso_fortran_env, only: error_unit\n        character(len=*), intent(in) :: action\n        integer, intent(in) :: ierr\n        logical :: io_failure\n        character(len=*), parameter :: err_format = &\n        &  '(\"Error while \",a,\". error code = \",i0)'\n        \n        if (ierr == 0) then\n            io_failure = .FALSE.\n            return\n        end if\n        io_failure = .TRUE.\n        write (error_unit,err_format) action, ierr\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the remainder of p divided by n.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "0", "2"]}, "code": "function j(p,n)\n    implicit none\n    integer, intent(in) :: p,n\n    integer :: j\n    j=p-((p+n)/n-1)*n\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the remainder of p divided by n.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "0", "2"]}, "code": "function j(p,n)\n      implicit none\n      integer, intent(in) :: p,n\n      integer :: j\n      j=p-((p+n)/n-1)*n\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function add_integer(num1, num2)\n  implicit none\n  integer, intent(in) :: num1\n  integer, intent(in) :: num2\n  integer :: add_integer\n\n  add_integer = num1 + num2\n  return\nend function"}
{"instruction": "Use Fortran to give me a function that subtracts two integers and returns the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[0,0]", "case3": "[-5,-10]", "case4": "[100,-50]", "case5": "[2147483647,-2147483648]", "result": ["5", "0", "5", "150", "-1"]}, "code": "function subtract_integer(num1, num2)\n  implicit none\n  integer, intent(in) :: num1\n  integer, intent(in) :: num2\n  integer :: subtract_integer\n\n  subtract_integer = num1 - num2\n  return\nend function"}
{"instruction": "Use Fortran to create a function that multiplies two integers and returns the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,5]", "case3": "[-4,6]", "case4": "[10,-2]", "case5": "[0,0]", "result": ["6", "0", "-24", "-20", "0"]}, "code": "function multiply_integer(num1, num2)\n  implicit none\n  integer, intent(in) :: num1\n  integer, intent(in) :: num2\n  integer :: multiply_integer\n\n  multiply_integer = num1 * num2\n  return\nend function"}
{"instruction": "Use Fortran to give me a function that takes an array as input and returns the same array in reverse order.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.5,1.5,2.5,3.5]", "case3": "[1.0,2.0,3.0,4.0,5.0]", "case4": "[5.0,4.0,3.0,2.0,1.0]", "case5": "[0.0,0.0,0.0,0.0,0.0]", "result": ["3.00000000       2.00000000       1.00000000", "3.50000000       2.50000000       1.50000000      0.500000000", "5.00000000       4.00000000       3.00000000       2.00000000       1.00000000", "1.00000000       2.00000000       3.00000000       4.00000000       5.00000000", "0.00000000       0.00000000       0.00000000       0.00000000       0.00000000"]}, "code": "function reverse(x)\n        real, intent(in) :: x(:)\n        real :: reverse(size(x))\n\n        reverse = x(size(x):1:-1)\n    end function"}
{"instruction": "Use Fortran to create a function that takes an array of real numbers as input and returns their average.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0,1.0]", "case4": "[2.0,4.0,6.0,8.0]", "case5": "[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0]", "result": ["2.00000000", "0.00000000", "1.00000000", "5.00000000", "5.50000000"]}, "code": "function average(x)\n        real, intent(in) :: x(:)\n\n        average = sum(x) / size(x)\n    end function"}
{"instruction": "Use Fortran with C bindings to define a function that takes an integer and a communicator and returns a double.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function quad_compute ( n, comm ) bind ( c )\n      use iso_c_binding\n      integer ( c_int ), VALUE :: n\n      integer ( c_int ) :: comm\n      real ( c_double ) :: quad_compute\n    end function"}
{"instruction": "Use Fortran to create a function that calculates the maximum number of singles that a path with a certain number of levels and electrons can have.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0", "2", "3", "1", "0"]}, "code": "function maximum_singles(levels, number_electrons)\n  \n      !// THIS FUNCTION TELLS YOU THE MAXIMUM NUMBER A SINGLES\n      !// THAT A PATH WITH A CERTAIN NUMBER OF LEVELS AND A \n      !// A CERTAIN NUMBER OF ELECTRONS CAN HAVE\n      integer::maximum_singles\n      integer, intent(in)::levels, number_electrons\n  \n      if (levels >= number_electrons) then\n          maximum_singles = number_electrons \n      elseif (number_electrons <= 2*levels) then\n          maximum_singles = levels - (number_electrons - levels)\n      else\n          write(ioError,450) number_electrons,levels \n          450 format (1x,\"You have too many electrons and they won't fit!!\",/,&\n              1x,\"Number electrons =\",i4,/,&\n              1x,\"Number of levels =\",i4)\n                  stop\n      endif\n  \nend function"}
{"instruction": "Use Fortran to create a function that takes in two integer arguments and returns the remainder of the first argument divided by the second argument.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "3.00000000", "1.00000000", "0.00000000", "2.00000000"]}, "code": "function get_rank(rnk, n_ids)\n        integer, intent(in) :: rnk, n_ids\n        get_rank = modulo(rnk, n_ids)\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random string of specified length from a given set of characters.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['abcd',5]", "case2": "['123',3]", "case3": "['xyz',2]", "case4": "['abc',10]", "case5": "['1234567890',8]", "result": ["badba", "121", "zy", "caaababbbb", "62441735"]}, "code": "function random_string(chars,length) result(out)\n\n     !$@(#) M_random::random_string(3f): create random string composed of provided characters of specified length\n\n     character(len=*),intent(in)     :: chars\n     integer,intent(in)              :: length\n     character(len=:),allocatable    :: out\n        real                         :: x\n        integer                      :: ilen   ! length of list of characters\n        integer                      :: which\n        integer                      :: i\n        ilen=len(chars)\n        out=''\n        if(ilen.gt.0)then\n           do i=1,length\n              call random_number(x)\n              which=nint(real(ilen-1)*x)+1\n              out=out//chars(which:which)\n           enddo\n        endif\n     end function"}
{"instruction": "Use Fortran to create a function that takes a string and an integer as input and returns a hashed integer value.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello',5]", "case2": "['world',10]", "case3": "['fortran',3]", "case4": "['programming',7]", "case5": "['language',2]", "result": ["1.00000000", "4.00000000", "2.00000000", "6.00000000", "2.00000000"]}, "code": "function hashfun(string, hashcon)\n\n      ! Hashing function\n      ! Original by: Geert Prinsen\n      ! Module description: Modified version of the hashing system used\n      !                     in SOBEK_LITE/PLUVIUS. \n\n      character(*), intent(in)               :: string\n      integer, intent(in)                    :: hashcon\n      \n      integer                                :: ires\n      integer                                :: length\n      integer                                :: i\n      ires = 0\n      length = len_trim(string)\n\n      do i = 1, length\n         ires = ishft(ires,4) + ires+ iachar(string(i:i))\n      enddo\n      ires = iabs(ires)\n      ires = mod (ires, hashcon)\n      \n      if (ires == 0) ires = hashcon\n      \n      hashfun = ires\n\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 2D array element given its row and column indices and the size of the array.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[2,3,5]", "case3": "[4,2,8]", "case4": "[5,6,3]", "case5": "[7,4,2]", "result": ["0", "7", "25", "17", "15"]}, "code": "function iShiftKL(k,l,NdimE) \r\n\tinteger, intent(in) :: k,l,NdimE\r\n\tiShiftKL = (k-1)*NdimE + l - 1 \r\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the density of a gas using the EOS3 equation of state.", "test_case": {"param_num": 5, "param_type": "real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,0.5,1.5,2.0,300.0]", "case2": "[1.4,0.8,2.0,3.0,500.0]", "case3": "[1.33,1.0,1.0,1.0,273.0]", "case4": "[1.67,1.2,3.0,4.0,1000.0]", "case5": "[1.5,1.5,2.5,3.5,750.0]", "result": ["Infinity", "4.3750000000000011E-002", "2.9526029526029521E-002", "1.4539800995024877E-002", "1.6000000000000000E-002"]}, "code": "function eos3_density(gam, cp, p_c, pres, temp)\n\nreal*8, intent(in) :: gam, cp, p_c, pres, temp\n\nreal*8  :: eos3_density\n\n    eos3_density = gam * (pres + p_c) / ((gam - 1.0) * cp * temp)\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the total energy density given the specific heat ratio, critical pressure, pressure, density, and velocity.", "test_case": {"param_num": 5, "param_type": "real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0,5.0]", "case2": "[0.0,0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0,1.0]", "case4": "[2.0,3.0,4.0,5.0,6.0]", "case5": "[0.5,0.5,0.5,0.5,0.5]", "result": ["Infinity", "0.0000000000000000", "Infinity", "100.00000000000000", "-1.4375000000000000"]}, "code": "function eos3_rhoe(gam, p_c, pres, rho, u)\n\nreal*8, intent(in) :: gam, p_c, pres, rho, u\n\nreal*8  :: eos3_rhoe\n\n    eos3_rhoe = (pres + p_c)/(gam - 1.0) + (0.5*rho*u*u) + p_c;\n\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the pressure of a fluid using the EOS3 equation of state.", "test_case": {"param_num": 5, "param_type": "real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0,5.0]", "case2": "[0.5,1.0,2.0,3.0,4.0]", "case3": "[1.4,0.5,2.0,3.0,4.0]", "case4": "[1.4,2.0,1.0,3.0,4.0]", "case5": "[1.4,2.0,3.0,0.5,4.0]", "result": ["-2.0000000000000000", "6.0000000000000000", "-5.8999999999999986", "-4.7999999999999989", "-12.199999999999998"]}, "code": "function eos3_pr(gam, p_c, rho, rhoe, u)\n\nreal*8, intent(in) :: gam, p_c, rho, rhoe, u\n\nreal*8  :: eos3_pr\n\n    eos3_pr = (gam - 1.0) * (rhoe - 0.5*rho*u*u - p_c) - p_c;\n\nend function"}
{"instruction": "Use Fortran to give me a function for calculating the temperature using the EOS3 equation of state given the inputs gam, cp, p_c, rho, rhoe, and u.", "test_case": {"param_num": 6, "param_type": "real*8,real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0,5.0,6.0]", "case2": "[0.5,1.0,2.0,3.0,4.0,5.0]", "case3": "[1.4,0.71,0.5,2.0,3.0,4.0]", "case4": "[1.67,0.9,1.0,1.0,2.0,3.0]", "case5": "[1.33,1.0,0.5,4.0,3.0,2.0]", "result": ["-8.7500000000000000", "-5.9166666666666661", "-13.309859154929578", "-6.4944444444444436", "-1.8287500000000001"]}, "code": "function eos3_t(gam, cp, p_c, rho, rhoe, u)\n\nreal*8, intent(in) :: gam, cp, p_c, rho, rhoe, u\n\nreal*8  :: eos3_t\n\n    eos3_t = (rhoe - (0.5*rho*u*u) - p_c) * (gam/(rho * cp));\n\nend function"}
{"instruction": "Use Fortran to create a function that takes a single character input and returns an integer based on a select case statement.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'M'", "case2": "'F'", "case3": "'U'", "case4": "'T'", "case5": "'S'", "result": ["", "", "", "", ""]}, "code": "function ij_code(industry)\n\n        implicit none\n        character(len=1), intent(in) :: industry\n        integer :: ij_code\n\n        select case (industry)\n            case('M')\n                ij_code = 1\n            case('F')\n                ij_code = 2\n            case('U')\n                ij_code = 3\n            case('T')\n                ij_code = 4\n            case('S')\n                ij_code = 5\n            case default\n                stop 'Industry does not exists'\n        end select\n\n    end function"}
{"instruction": "Use Fortran to create a function that calculates the day of the year given a date in the format of year, month, and day.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2021,1,1]", "case2": "[2021,2,1]", "case3": "[2021,3,1]", "case4": "[2020,2,29]", "case5": "[2021,12,31]", "result": ["1", "32", "60", "60", "365"]}, "code": "function day_of_year(iyear,imonth,iday)\n\n      implicit none\n\n      !real(kind=4) :: day_of_year\n      integer :: day_of_year\n      integer :: iyear,imonth,iday\n      logical :: IsLeapYear\n      integer, dimension(12) :: monthdays \n\n      if  ((mod(iyear,4).eq.0)     .and.                          &\n           (mod(iyear,100).ne.0).or.(mod(iyear,400).eq.0))then\n        IsLeapYear = .true.\n        monthdays = (/31,29,31,30,31,30,31,31,30,31,30,31/)\n      else\n        IsLeapYear = .false.\n        monthdays = (/31,28,31,30,31,30,31,31,30,31,30,31/)\n      endif\n\n      if(imonth.eq.1)then\n        day_of_year = iday\n      else\n        day_of_year = sum(monthdays(1:imonth-1)) + iday\n      endif\n\n      end function"}
{"instruction": "Use Fortran to give me a function for calculating the concentration of a gas over time and distance based on given parameters.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["9.2736811330244934E-039", "9.2736811330244934E-039", "NaN", "9.2736811330244934E-039", "9.2736811330244934E-039"]}, "code": "function f(t,x) result(r)\n    double precision :: t, x\n    double precision :: r\n\n    r = (peak_h - ambient_h) * (t0 / (t+t0)) * &\n         dexp(-x / (FOUR * diffusion_coefficient * (t+t0))) + ambient_h\n\n  end function"}
{"instruction": "Use Fortran to give me a function for the bitwise AND operation between two integers a and b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function iand (a, b)\n    integer :: iand, a, b\n    iand = a + b\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function int_op(lhs, rhs) result(lhs_op_rhs)\n    integer, intent(in) :: lhs, rhs\n    integer :: lhs_op_rhs\n    lhs_op_rhs = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to give me a function that adds two integers and returns the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[-5,1]", "case5": "[0,4]", "result": ["3", "7", "1", "-4", "4"]}, "code": "function not_pure(lhs, rhs) result(lhs_op_rhs)\n    integer, intent(in) :: lhs, rhs\n    integer :: lhs_op_rhs\n    lhs_op_rhs = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns an integer array with one element that is the sum of the inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,-4]", "result": ["3", "7", "0", "-4", "-2"]}, "code": "function array_result(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer array_result(1)\n    array_result = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integers as input and returns their sum as an allocatable integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function allocatable_result(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer, allocatable :: allocatable_result\n    allocatable_result = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to create a function that takes two integer inputs, adds them together, and returns a pointer to the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function pointer_result(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer, pointer :: pointer_result\n    allocate(pointer_result, source=lhs + rhs )\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two optional integer arguments and returns their sum, or 0 if either argument is not present.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function optional_args(lhs, rhs) result(lhs_op_rhs)\n    integer, intent(in), optional :: lhs, rhs\n    integer lhs_op_rhs\n    if (present(lhs) .and. present(rhs)) then\n      lhs_op_rhs = lhs + rhs\n    else\n      lhs_op_rhs = 0\n    end if\n  end function"}
{"instruction": "Use Fortran to give me a function that adds two integers, one of which is a target variable.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[2147483647,1]", "case5": "[-2147483648,-1]", "result": ["3", "7", "0", "-2147483648", "2147483647"]}, "code": "function target_mismatch(lhs, rhs) result(lhs_op_rhs)\n    integer, intent(in), target  :: lhs\n    integer, intent(in) :: rhs\n    integer lhs_op_rhs\n    lhs_op_rhs = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[-5,1]", "case5": "[0,0]", "result": ["3", "7", "1", "-4", "0"]}, "code": "function value_mismatch(lhs, rhs) result(lhs_op_rhs)\n    integer, intent(in), value:: lhs\n    integer, intent(in) :: rhs\n    integer lhs_op_rhs\n    lhs_op_rhs = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to define a function that adds two integers asynchronously and returns the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,-2]", "case4": "[5,1]", "case5": "[0,4]", "result": ["3", "7", "1", "6", "4"]}, "code": "function asynchronous_mismatch(lhs, rhs) result(lhs_op_rhs)\n    integer, intent(in), asynchronous:: lhs\n    integer, intent(in) :: rhs\n    integer lhs_op_rhs\n    lhs_op_rhs = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to define a function that takes integer start and end points, integer base, and integer n and returns an integer array of length n or 0.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,10,5,2]", "case2": "[0,100,10,3]", "case3": "[1,1,1,10]", "case4": "[10,1,1,2]", "case5": "[1,100,100,10]", "result": ["8520016           0     8520016           0           0", "13893968           0    13893968           0           0           0           0           0           0           0", "6947152", "15794512", "15991120           0    15991120           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0  -100663046       25616    15991120           0    15991120           0           0           0           0           0"]}, "code": "function logspace_1_iint32_n_ibase(start, end, n, base) result(res)\n      integer, intent(in) :: start\n      integer, intent(in) :: end\n      integer, intent(in) :: n\n      integer, intent(in) :: base\n      ! integer endpoints + integer base = integer result\n      integer :: res(max(n, 0))\n    end function"}
{"instruction": "Use Fortran to define a function that calculates the exact solution for a 2D problem based on different input values of x, y, and k.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[0.5,0.5,1]", "case2": "[0.2,0.8,2]", "case3": "[0.7,0.3,3]", "case4": "[1.0,0.0,5]", "case5": "[0.0,1.0,2]", "result": ["0.25000000000000000", "2.5600000000000001E-002", "2.1608999999999993E-002", "0.84147098480789650", "0.0000000000000000"]}, "code": "function exact_solution2D(x,y,k)\n    implicit none\n    real(8)::exact_solution2D,y,x\n    integer(4)::k\nif (k==1) then\n    exact_solution2D =x*(1-x)\nendif\n!% Truong added 1-11-2016\n!% Neu truyen k=1, ham chi phu thuoc x nen nghiem xap xi ra sai\n\nif(k==2)then\n    exact_solution2D=x*(1-x)*y*(1-y)\nendif\n\nif (k==3) then\n    exact_solution2D =x**2*(1-x)*y*(1-y)**2\nendif\n\n!if (k==4) then\n!    u_ex=x*(1-x)^2*y^2*(1-y)\n!endif\n\nif (k==5) then\n    exact_solution2D = sin(x)*exp(y)\nendif\nend function"}
{"instruction": "Use Fortran to create a function that returns a socket file descriptor for a given domain, type, and protocol.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[2,1,6]", "case2": "[1,2,17]", "case3": "[3,3,0]", "case4": "[2,2,6]", "case5": "[1,1,0]", "result": ["2", "1", "3", "2", "1"]}, "code": "function socket(domain, type, protocol) bind(c, name=\"socket\")\n       use, intrinsic :: iso_c_binding\n       integer(kind=c_int) :: socket\n       integer(kind=c_int), value :: domain, type, protocol\n     end function"}
{"instruction": "Use Fortran to create a function that listens for incoming connections on a specified file descriptor with a specified queue size.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[100,200]", "case5": "[-5,10]", "result": ["1", "3", "0", "100", "-5"]}, "code": "function listen(listenfd, size) bind (c, name=\"listen\")\n       use, intrinsic :: iso_c_binding\n       integer(kind=c_int) :: listen\n       integer(kind=c_int), value :: listenfd\n       integer(kind=c_int), value :: size\n     end function"}
{"instruction": "Use Fortran to create a function that calculates the value of a specific element in Pascal's Triangle.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["10", "120", "35", "3003", "184756"]}, "code": "function pascalTriangle(a, b)\n      implicit none\n      integer :: pascalTriangle\n      integer, intent(in) :: a, b\n      integer i\n      pascalTriangle = 1\n      do i = 0, b - 1\n         pascalTriangle = pascalTriangle * (a - i) / (i + 1)\n      end do\n   end function"}
{"instruction": "Use Fortran to give me a function that determines the phase factor which appears from permutation of operators of second quantization.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[4,3,2,1]", "case3": "[1,3,2,4]", "case4": "[2,1,4,3]", "case5": "[3,2,1,4]", "result": ["1", "1", "-1", "1", "-1"]}, "code": "function anco_normal_phase(no_one,no_two,no_three,no_four)      result(phase)\n   !--------------------------------------------------------------------\n   ! Determinate the phase factor wich appear from permutation\n   ! of operators of second quantization\n   !\n   ! Calls:\n   !--------------------------------------------------------------------\n      !\n      integer, intent(in) :: no_one, no_two, no_three, no_four\n      integer             :: phase\n      !\n      phase = 1\n      if (no_one   > no_two)   phase = -phase\n      if (no_one   > no_three) phase = -phase\n      if (no_one   > no_four)  phase = -phase\n      if (no_two   > no_three) phase = -phase\n      if (no_two   > no_four)  phase = -phase\n      if (no_three > no_four)  phase = -phase\n      !\n   end function"}
{"instruction": "Use Fortran to define a function that takes an array of real numbers and returns a string of characters with a length of 30-32 or 15, depending on which is smaller, where each character is a number from 1 to 10 repeated consecutively, and then assign this string to the function name.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.5,1.5,2.5,3.5]", "case3": "[0.0,0.0,0.0]", "case4": "[1.0,2.0,3.0,4.0,5.0]", "case5": "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]", "result": ["012", "01234", "012", "0123456", "\u721au\u0000\u0000\u0000\u0000\u0000P\u0001u\u0000\u0000\u0000\u0000\u0000\u0000"]}, "code": "function my_string(x)\n         integer i\n         real, intent(in) :: x(:)\n         character(0) h4(1:minval([(i,i=30,32), 15]))\n         character(0) sv1(size(x,1):size(h4))\n         character(0) sv2(2*lbound(sv1,1):size(h4))\n         character(lbound(sv2,1)-3) my_string\n\n         do i = 1, len(my_string)\n            my_string(i:i) = achar(modulo(i-1,10)+iachar('0'))\n         end do\n      end function"}
{"instruction": "Use Fortran to create a function that takes an integer n and a double precision number and returns an array of n elements, all equal to the input number.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[5, 3.0]", "case2": "[10, 2.5]", "case3": "[1, 0.0]", "case4": "[0, 1.0]", "case5": "[100, 1.23456789]", "result": ["3.0000000000000000        3.0000000000000000        3.0000000000000000        3.0000000000000000        3.0000000000000000", "2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000        2.5000000000000000", "0.0000000000000000", "", "1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999        1.2345678899999999"]}, "code": "function repeat(n, number)result(vector)\nimplicit none\ninteger, intent(in) :: n\ndouble precision,intent(in) :: number\ndouble precision, dimension(n) :: vector\nvector = number\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the number of rows or columns of a distributed matrix block that are assigned to a given process.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[10,2,0,0,4]", "case2": "[100,20,1,0,8]", "case3": "[50,5,2,1,16]", "case4": "[200,25,3,2,32]", "case5": "[500,50,4,3,64]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function numroc(n, nb, iproc, isrcproc, nprocs)\n            integer :: numroc\n            integer :: n, nb, iproc, isrcproc, nprocs\n        end function"}
{"instruction": "Use Fortran to give me an internal function that calculates the location of an element in a one-dimensional array that represents a two-dimensional array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "7", "5", "11", "5"]}, "code": "function iloc (ind1,ind2)                           result(loc)\n         !--------------------------------------------------------------------------------------------------------------\n         ! This internal function dispenses with the need for a two-dimensional array for the interpolation. It replaces a\n         ! statement function in the original code.\n         !--------------------------------------------------------------------------------------------------------------\n         !\n         integer, intent(in) :: ind1, ind2\n         integer             :: loc\n         !\n         loc = (ind1*(ind1-1)) / 2 + ind2\n         !\n         end function"}
{"instruction": "Use Fortran to create a function that determines if three input integers can form a triangle.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[3,4,5]", "case2": "[2,2,5]", "case3": "[1,1,1]", "case4": "[0,0,0]", "case5": "[10,20,30]", "result": ["T", "F", "T", "T", "T"]}, "code": "function is_triangle(i1,i2,i3)                            result(yes)\n   !--------------------------------------------------------------------------------------------------------------------\n   ! Returns .true. if the lengths i1, i2, and i3 may form a triangle  and .false. otherwise.\n   !--------------------------------------------------------------------------------------------------------------------\n      !\n      integer, intent(in) :: i1, i2, i3\n      logical             :: yes\n      !\n      if (i1 <= i2+i3   .and.   i2 <= i3+i1   .and.   i3 <= i1+i2) then\n         yes = .true.\n      else\n         yes = .false.\n      end if\n      !\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 2D array given the row, column, and number of columns in the array.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["4", "28", "70", "130", "208"]}, "code": "function num(i, j, nx)\n\n    implicit none\n\n    integer :: num, i, j, nx\n    num = i+(j-1)*nx\n\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 1D array given the number of elements in each row and the index of the element.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10, 25]", "case2": "[5, 10]", "case3": "[100, 1000]", "case4": "[1, 1]", "case5": "[50, 500]", "result": ["3", "2", "10", "1", "10"]}, "code": "function invert_num_j(nx, num)\n\n    implicit none\n\n    integer :: num, nx\n    integer :: invert_num_j\n    invert_num_j = floor((num-1)/real(nx))+1\n\n  end function"}
{"instruction": "Use Fortran to give me a function that appends a string to a path using the posix separator.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'path/to/folder/','file.txt'", "case2": "'C:/Users/','Documents/report.docx'", "case3": "'','file.txt'", "case4": "'path/to/folder/',''", "case5": "'',''", "result": ["", "", "", "", ""]}, "code": "function join(path, other)\n!! returns path_t object with other appended to self using posix separator\ncharacter(:), allocatable :: join\ncharacter(*), intent(in) :: path, other\nend function"}
{"instruction": "Use Fortran to create a function that takes a path and splits it into up to 1000 parts, discarding all path separators except the leftmost if present.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'path/to/file'", "case3": "'path/to/folder/'", "case4": "'file.txt'", "case5": "'path/to/folder/file.txt'", "result": ["", "", "", "", ""]}, "code": "function parts(path)\n!! split path into up to 1000 parts (arbitrary limit)\n!! all path separators are discarded, except the leftmost if present\ncharacter(*), intent(in) :: path\ncharacter(:), allocatable :: parts(:)\nend function"}
{"instruction": "Use Fortran to create a function that takes a file path as input and returns the same path without redundant file separators (\"/\").", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'dir/'", "case3": "'dir/file.txt'", "case4": "'dir//file.txt'", "case5": "'dir/subdir/file.txt'", "result": ["", "", "", "", ""]}, "code": "function drop_sep(path)\n!! drop redundant \"/\" file separators\ncharacter(*), intent(in) :: path\ncharacter(:), allocatable :: drop_sep\nend function"}
{"instruction": "Use Fortran to create a function that replaces the suffix of a file path with a new suffix.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','new.txt'", "case2": "'file.dat','new.dat'", "case3": "'file.txt','new.dat'", "case4": "'file.dat','new.txt'", "case5": "'file.txt','new'", "result": ["", "", "", "", ""]}, "code": "function with_suffix(path, new)\n!! replace file suffix with new suffix\ncharacter(*), intent(in) :: path,new\ncharacter(:), allocatable :: with_suffix\nend function"}
{"instruction": "Use Fortran to create a function that reads a text file and returns its contents as a character string, with an optional maximum length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'file.txt',10", "case2": "'data.txt',100", "case3": "'output.txt',50", "case4": "'input.txt',200", "case5": "'test.txt',25", "result": ["", "", "", "", ""]}, "code": "function read_text(filename, max_length)\n!! read text file\ncharacter(*), intent(in) :: filename\ncharacter(:), allocatable :: read_text\ninteger, optional :: max_length\nend function"}
{"instruction": "Use Fortran to define a function that returns a value based on the input values of al, ar, lplus, and lminu.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,1.0,2.0]", "case3": "[1.0,1.0,0.0,0.0]", "case4": "[0.0,1.0,0.0,1.0]", "case5": "[2.5,3.5,2.5,3.5]", "result": ["3.0000000000000000", "1.5000000000000000", "0.0000000000000000", "1.0000000000000000", "2.5000000000000000"]}, "code": "function al_star(lplus, lminu, al, ar)\n  real*8, intent(in) :: al, ar, lplus, lminu\n  real*8 :: al_star\n\n  if (dabs(lplus) .gt. 1.0e-10) then\n    al_star = al\n  elseif (dabs(lminu) .gt. 1.0e-10) then\n    al_star = ar\n  else\n    al_star = 0.5 * (al+ar)\n  end if\n\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer arguments and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function myadd(iarg1, iarg2)\n  implicit none\n  integer :: myadd\n  integer, intent(in) :: iarg1, iarg2\n  myadd = iarg1 + iarg2\nend function"}
{"instruction": "Use Fortran to define a function that checks for errors and returns a logical value indicating whether an error occurred or not.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['open',0]", "case2": "['read',-1]", "case3": "['write',100]", "case4": "['close',2]", "case5": "['seek',-10]", "result": ["F", "T", "T", "T", "T"]}, "code": "function failure(action,ierr)\n        use iso_fortran_env, only: error_unit\n        character(len=*), intent(in) :: action\n        integer, intent(in) :: ierr\n        logical :: failure\n        character(len=*), parameter :: err_format = &\n        &  '(\"Error while \",a,\". error code = \",i0)'\n        \n        if (ierr == 0) then\n            failure = .FALSE.\n            return\n        end if\n        failure = .TRUE.\n        write (error_unit,err_format) action, ierr\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the triangular number given the number of states and ranks.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,3]", "case2": "[10,2]", "case3": "[1,1]", "case4": "[0,5]", "case5": "[100,10]", "result": ["35", "55", "1", "0", "268"]}, "code": "function get_triangular_number(nstates, nranks) result(triangular_number)\n        integer, intent(in) :: nstates, nranks\n        integer :: triangular_number\n\n        integer :: idx\n\n        triangular_number = nstates\n        do idx = 1, nranks-1\n            triangular_number = triangular_number*(nstates+idx)\n        end do\n\n        do idx = nranks, 2, -1\n            triangular_number = triangular_number/idx\n        end do\n    end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if x equals x0 and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,0]", "case3": "[5,5]", "case4": "[10,5]", "case5": "[-3,-3]", "result": ["1.00000000", "1.00000000", "1.00000000", "0.00000000", "1.00000000"]}, "code": "function delta(x0, x) result(d)\n\n  integer, intent(in) :: x, x0\n\n  if (x .eq. x0) then\n     d = 1d0\n  else\n     d = 0d0\n  end if\n\n  return\nend function"}
{"instruction": "Use Fortran to create a function that computes binomial coefficients given two non-negative integers n and k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,5]", "case3": "[7,3]", "case4": "[15,7]", "case5": "[20,10]", "result": ["10.000000000000000", "252.00000000000000", "35.000000000000000", "6435.0000000000000", "184756.00000000000"]}, "code": "function binomial(n, k) result(bc)\n    !> Compute binomial coefficients.\n    !> n - Non-negative integer (n > 0).\n    !> k - Non-negative integer (k < n).\n    !> bc - Binomial coefficient.\n    \n    ! Input\n    integer, intent(in) :: n, k\n    \n    ! Output\n    double precision :: bc\n    \n    ! Working\n    integer :: i, kk\n    \n    if ((k .lt. 0) .or. ( k .gt. n)) then\n        bc = 0.0d0\n        return\n    end if\n    if ((k .eq. 0) .or. ( k .eq. n)) then\n        bc = 1.0d0\n        return\n    end if\n    kk = min(k, n - k)\n    bc = 1.0d0\n    do i = 0, kk - 1\n        bc = bc * dble(n - i) / dble(i + 1)\n    end do\n    \nend function"}
{"instruction": "Use Fortran to create a function that concatenates a filename to a path specifier.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['/home/user/','file.txt']", "case2": "['/usr/local/','bin']", "case3": "['/','usr']", "case4": "['/home/user/','']", "case5": "['','file.txt']", "result": ["/home/user//file.txt", "/usr/local//bin", "//usr", "/home/user//", "/file.txt"]}, "code": "function io_pathConcat (spath,sfilename) result (sfile)\n\n  !<description>\n    ! Concatenates a filename to a path specifier.\n  !</description>\n\n  !<input>\n    ! Path to the file.\n    character(len=*), intent(in) :: spath\n\n    ! Name of the file (or directory)\n    character(len=*), intent(in) :: sfilename\n  !</input>\n\n  !<result>\n    ! Path + filename to a specific file (or directory).\n    character(len=len_trim(spath)+len_trim(sfilename)+1) :: sfile\n  !</result>\n\n  !</function>\n\n    sfile = trim(spath)//\"/\"//trim(sfilename)\n\n  end function"}
{"instruction": "Use Fortran to give me a function that returns true if a is less than b and false otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["T", "T", "F", "F", "T"]}, "code": "function less_i(a,b) result(r)\r\n    logical :: r\r\n    integer, intent(in) :: a, b\r\n    r = a < b\r\n  end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n         \r\n         implicit none\r\n         logical :: r\r\n         integer, intent(in) :: a, b\r\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           \r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           \r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-4]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n         implicit none\r\n         logical :: r\r\n         integer, intent(in) :: a, b\r\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           \r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)         \r\n         implicit none\r\n         logical :: r\r\n         integer, intent(in) :: a, b\r\n       end function"}
{"instruction": "Use Fortran to create a function that takes a directory and an integer and returns a string with the directory and integer formatted in a specific way.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'dir',1", "case2": "'home',2", "case3": "'usr',3", "case4": "'var',4", "case5": "'tmp',5", "result": ["dirm000001/", "homem000002/", "usrm000003/", "varm000004/", "tmpm000005/"]}, "code": "function directory_read_data_macro(basedir, imacro) result(r)\n    implicit none\n    character(*), intent(in) :: basedir\n    integer, intent(in) :: imacro\n    character(256) :: r\n    write(r, '(a,a,i6.6,a)') trim(basedir), 'm', imacro, '/'\n    return\nend function"}
{"instruction": "Use Fortran to give me a function that compares two strings and returns a logical value.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','worlds'", "case3": "'fortran','FORTRAN'", "case4": "'',''", "case5": "'123','456'", "result": ["T", "T", "T", "T", "T"]}, "code": "function strcmp(str1,str2)\n\t\t\tIMPLICIT NONE\n\t\t\tCHARACTER(LEN=:), ALLOCATABLE, INTENT(in) :: str1,str2\n\t\t\tLOGICAL strcmp\n\t\tend function"}
{"instruction": "Use Fortran to give me a function that compares two strings and returns a logical value.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','worlds'", "case3": "'fortran','FORTRAN'", "case4": "'',''", "case5": "'123','456'", "result": ["T", "T", "T", "T", "T"]}, "code": "function strcmp(str1,str2)\n\t\t\tIMPLICIT NONE\n\t\t\tCHARACTER(LEN=:), ALLOCATABLE, INTENT(in) :: str1,str2\n\t\t\tLOGICAL strcmp\n\t\tend function"}
{"instruction": "Use Fortran to give me a function that takes three integer inputs and returns their sum as a real number plus one.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,-50,25]", "case4": "[2147483647,-2147483648,0]", "case5": "[-2147483648,2147483647,1]", "result": ["7.00000000", "1.00000000", "76.0000000", "0.00000000", "1.00000000"]}, "code": "function add(i,j,k)\n    integer ,intent(in) :: i,j,k\n    add = real(i+j+k)+1.\n  end function"}
{"instruction": "Use Fortran to give me a function that takes three integer inputs and returns their sum as a real number.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[-1,-2,-3]", "case5": "[2147483647,-2147483648,0]", "result": ["6.00000000", "0.00000000", "600.000000", "-6.00000000", "-1.00000000"]}, "code": "function add2(i,j,k)\n    integer ,intent(in) :: i,j,k\n    add2 = real(i+j+k)\n  end function"}
{"instruction": "Use Fortran to create a function that checks if the index i is greater than the length of the character string u.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',3", "case2": "'world',7", "case3": "'fortran',8", "case4": "'test',2", "case5": "'cases',5", "result": ["F", "T", "T", "F", "F"]}, "code": "function is_eof(u,i)\n    character(len=*), intent(in) :: u\n    integer, intent(in) :: i\n    logical :: is_eof\n\n    is_eof=i>len(u)\n  end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value indicating whether the first integer is greater than the second.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,2]", "result": ["F", "F", "F", "T", "F"]}, "code": "function gt_int(x,y) result (ordered)\n! Arguments\ninteger, intent(in) :: x\ninteger, intent(in) :: y\n  \n! Result\nlogical :: ordered\n\n! Compare\nif (x > y) then\n   ordered = .true.\nelse\n   ordered = .false.\nend if\n\nend function"}
{"instruction": "Use Fortran to give me a function that returns 1 if image is less than or equal to remainder, and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,0]", "case3": "[10,5]", "case4": "[100,200]", "case5": "[500,1000]", "result": ["1", "1", "0", "1", "1"]}, "code": "function overflow(image,remainder) result(filler)\n    integer, intent(in) :: image,remainder\n    integer :: filler\n    filler = merge(1,0,image<=remainder)\n  end function"}
{"instruction": "Use Fortran to define a function that renames a variable in a netCDF file.", "test_case": {"param_num": 3, "param_type": "integer,integer,character", "case1": "[1,2,'new_var_name']", "case2": "[3,4,'temperature']", "case3": "[5,1,'new_name']", "case4": "[2,3,'new']", "case5": "[4,5,'new_var']", "result": ["12", "11", "8", "3", "7"]}, "code": "function nf90_rename_var(ncid, varid, newname)\n    integer,             intent( in) :: ncid, varid\n    character (len = *), intent( in) :: newname\n    integer                          :: nf90_rename_var\n    \n!   nf90_rename_var = nf_rename_var(ncid, varid, newname)\n  end function"}
{"instruction": "Use Fortran to define a function that calculates a value based on input parameters and returns the result.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0]", "case4": "[2.0,3.0,4.0,5.0]", "case5": "[0.5,0.5,0.5,0.5]", "result": ["3.0000000000000000", "0.0000000000000000", "1.7320508075688772", "18.973665961010276", "0.31868871959954903"]}, "code": "function dadtau(axp_tau,O_mat_0,O_vac_0,O_k_0) \n  real(kind=8)::dadtau,axp_tau,O_mat_0,O_vac_0,O_k_0\n  dadtau = axp_tau*axp_tau*axp_tau *  &\n       &   ( O_mat_0 + &\n       &     O_vac_0 * axp_tau*axp_tau*axp_tau + &\n       &     O_k_0   * axp_tau )\n  dadtau = sqrt(dadtau)\n  return\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the average of a logical array.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.true.,.false.]", "case4": "[.false.]", "case5": "[.true.,.true.,.false.,.false.]", "result": ["0.666666687", "0.00000000", "0.800000012", "0.00000000", "0.500000000"]}, "code": "function average_logical(x) result(res)\n    ! Returns an average of a real array x.\n    ! Overloaded by the generic function average.\n    logical, intent(in) :: x(:)\n    res = real(count(x), kind=kind(res)) / size(x)\n  end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["1", "1", "1", "1", "1"]}, "code": "function NDELTA(i,j)\n\n      implicit none\n\n      integer :: i,j\n      integer :: NDELTA\n\n      NDELTA=0\n      if (i==j) NDELTA=1\n\n      end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function g1(a,b) result (c)\n   integer, intent(in) :: a, b\n   integer :: c\n   c = a + b\n end function"}
{"instruction": "Use Fortran to create a function that divides y by x, but stops and throws an error if x is zero.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,0]", "case3": "[6,3]", "case4": "[10,5]", "case5": "[8,2]", "result": ["0.00000000", "", "2.00000000", "2.00000000", "4.00000000"]}, "code": "function getx(y,x)\n    integer, intent(in):: y,x\n    integer, volatile :: allowed\n    if( x .eq. 0 ) stop 'DIVIDE BY ZERO'\n    getx = y/x\n  end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp (a, b) result(ret)\n         integer, intent(in) :: a, b\n         logical ret\n       end function"}
{"instruction": "Use Fortran to define a function that loops through a range of integers, sets a logical variable to true if the integer is less than 12 or greater than 17, and returns the last integer in the range.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,5]", "case4": "[10,20]", "case5": "[15,25]", "result": ["9", "14", "4", "19", "24"]}, "code": "function bar (a, b)\n    integer, intent (in) :: a, b\n    integer :: bar\n    common /blk/ q, e\n    integer :: q, r, d, s\n    logical :: e\n    s = 7\n!$omp taskloop lastprivate (s)\n    do d = a, b - 1\n      if (d < 12 .or. d > 17) then\n!$omp atomic write\n        e = .true.\n      end if\n      s = d\n    end do\n!$omp end taskloop\n    bar = s\n  end function"}
{"instruction": "Use Fortran to create a function that multiplies two integers and returns a string with the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,5]", "case3": "[-1,4]", "case4": "[10,2]", "case5": "[7,7]", "result": ["('ok  6')", "('ok  0')", "('ok -4')", "('ok 20')", "('ok 49')"]}, "code": "function mul (i1, i2)\n        character(20) mul\n        intent(in) :: i1,i2\n        integer prod\n        prod=i1*i2\n        write(mul,100) prod\n100     format(\"('ok \",i2,\"')\")\n      end function"}
{"instruction": "Use Fortran to give me a function that calculates the periodic index of an element in a circular array of size n.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0", "2", "0", "2", "1"]}, "code": "function p_index(i,n) result(p)\n    implicit none\n    integer, intent(in) :: i,n\n    integer :: p\n    p=i-(i/(n/2+2))*n-1\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of an element in a 1D array given its position and the length of the array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "0", "2"]}, "code": "function i_index(p,n) result(j)\n    implicit none\n    integer, intent(in) :: p,n\n    integer :: j\n    j=p-((p+n)/n-1)*n\n  end function"}
{"instruction": "Use Fortran to create a function that determines if the sum of the digits of a, b, and a*b is greater than 9.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["T", "T", "T", "T", "T"]}, "code": "function ineligible(a,b)\n    implicit none\n    integer, intent(in) :: a,b\n    logical             :: ineligible\n\n    ineligible=(digits(a)+digits(b)+digits(a*b) > 9)\n  end function"}
{"instruction": "Use Fortran to define a function that checks if an error occurred and prints an error message if it did.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'test',0", "case2": "'test',1", "case3": "'test',-1", "case4": "'test',100", "case5": "'test',-100", "result": ["F", "T", "T", "T", "T"]}, "code": "function failure(msg,ierr)\n        use, intrinsic :: iso_fortran_env, only: error_unit\n        character(len=*), intent(in) :: msg\n        integer, intent(in) :: ierr\n        logical :: failure\n        \n        failure = (ierr /= 0)\n        if (failure) then\n            write(error_unit,*) trim(msg),': ierr = ',ierr\n        end if\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a control character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_control(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    select case(iachar(c))\n      case (0:31,127)\n        is_control = .true.\n      case default\n        is_control = .false.\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a hexadecimal digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'0'", "case2": "'A'", "case3": "'f'", "case4": "'9'", "case5": "'g'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_hex_digit(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    select case(iachar(c))\n      case (48:57,65:70,97:102)\n        is_hex_digit = .true.\n      case default\n        is_hex_digit = .false.\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a punctuation mark.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "' '", "case4": "'?'", "case5": "'/'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_punctuation(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    select case(iachar(c))\n      case (33:47,58:64,91:96,123:126)\n        is_punctuation = .true.\n      case default\n        is_punctuation = .false.\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that tests whether a given character is graphical or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'1'", "case4": "'&'", "case5": "'Z'", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_graphical(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    select case(iachar(c))\n      case (33:126)\n        is_graphical = .true.\n      case default\n        is_graphical = .false.\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that tests whether a given character is a whitespace character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'\\n'", "case4": "'\\t'", "case5": "'1'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_white(c)\n    character(len=1), intent(in) :: c !! The character to test.\n    select case(iachar(c))\n      case (9:13,32)\n        is_white = .true.\n      case default\n        is_white = .false.\n    end select\n  end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[0,0]", "case4": "[5,5]", "case5": "[10,10]", "result": ["1", "0", "1", "1", "1"]}, "code": "function kd(i,j)\ninteger, intent(in) :: i,j\ninteger :: kd\nkd=0\nif(i.eq.j) then\nkd = 1\nelse \nkd = 0\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the Levi-Civita symbol for three indices i, j, and k.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[2,3,1]", "case3": "[3,1,2]", "case4": "[1,3,2]", "case5": "[2,1,3]", "result": ["1", "1", "1", "-1", "-1"]}, "code": "function per(i,j,k)\ninteger,intent(in) :: i,j,k\ninteger :: per\nper=0\nif((i.eq.1).and.(j.eq.2).and.(k.eq.3)) then\nper = 1\nelse if((i.eq.2).and.(j.eq.3).and.(k.eq.1)) then\nper = 1\nelse if((i.eq.3).and.(j.eq.1).and.(k.eq.2)) then\nper = 1\nelse if((i.eq.1).and.(j.eq.3).and.(k.eq.2)) then\nper = -1\nelse if((i.eq.2).and.(j.eq.1).and.(k.eq.3)) then\nper = -1\nelse if((i.eq.3).and.(j.eq.2).and.(k.eq.1)) then\nper = -1\nelse\n        per=0\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that pads a string with spaces on the right side to a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 10", "case2": "'world', 5", "case3": "'fortran', 7", "case4": "'test', 4", "case5": "'pad', 3", "result": ["hello", "world", "fortran", "test", "pad"]}, "code": "function chr_rPad(theString, theSize) result(retString)\n  character(len=*), intent(in)  :: theString\n  integer,          intent(in)  :: theSize\n  character(len=:), allocatable :: retString\n  integer                       :: inSize\n  inSize = len(theString)\n  if(inSize > 0 .and. inSize < theSize) then\n    retString = theString(1:inSize)//repeat(\" \",theSize-inSize)\n  else\n    retString = theString\n  end if\nend function"}
{"instruction": "Use Fortran to give me a function that pads or cuts a string to a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 10", "case2": "'world', 5", "case3": "'fortran', 7", "case4": "'test', 2", "case5": "'pad', 3", "result": ["hello", "world", "fortran", "te", "pad"]}, "code": "function chr_lPadCut(theString, theSize) result(retString)\n  character(len=*), intent(in) :: theString\n  integer,          intent(in) :: theSize\n  character(len=theSize) :: retString\n  integer                :: inSize\n  inSize = len(theString)\n  if(inSize > theSize) then\n    retString = theString(1:theSize)\n  elseif(inSize > 0) then\n    retString = repeat(\" \",theSize-inSize)//theString(1:inSize)\n  else\n    retString = repeat(\" \",theSize)\n  end if\nend function"}
{"instruction": "Use Fortran to create a function that pads or cuts a string to a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 10", "case2": "'fortran', 5", "case3": "'testing', 7", "case4": "'pad', 3", "case5": "'cut', 2", "result": ["hello", "fortr", "testing", "pad", "cu"]}, "code": "function chr_rPadCut(theString, theSize) result(retString)\n  character(len=*), intent(in) :: theString\n  integer,          intent(in) :: theSize\n  character(len=theSize) :: retString\n  integer                :: inSize\n  inSize = len(theString)\n  if(inSize > theSize) then\n    retString = theString(1:theSize)\n  elseif(inSize > 0) then\n    retString = theString(1:inSize)//repeat(\" \",theSize-inSize)\n  else\n    retString = repeat(\" \",theSize)\n  end if\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning the result as an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function add( a, b )\n      integer               :: add\n      integer, intent( in ) :: a, b\n      add = a + b\n    end function"}
{"instruction": "Use Fortran to create a function that counts the number of iterations in a loop from a large number down to a certain value with a given step size.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["2", "2", "2", "2", "2"]}, "code": "function test1(r, step)\n  implicit none\n  integer test1, r, step\n  integer k, n\n  k = 0\n  do n = HUGE(n) - r, HUGE(n), step\n    k = k + 1\n  end do\n  test1 = k\nend function"}
{"instruction": "Use Fortran to define a function that takes two character strings and returns the result of calling the `verify` function with the strings and a `kind` parameter of 4.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','FORTRAN'", "case3": "'',''", "case4": "'test',''", "case5": "'','test'", "result": ["1.00000000", "1.00000000", "0.00000000", "1.00000000", "0.00000000"]}, "code": "function verify_test(s1, s2)\n! CHECK: %[[VAL_2:.*]] = fir.alloca !fir.box<!fir.heap<i32>>\n! CHECK: %[[VAL_3:.*]]:2 = fir.unboxchar %[[VAL_0]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n! CHECK: %[[VAL_4:.*]]:2 = fir.unboxchar %[[VAL_1]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n! CHECK: %[[VAL_5:.*]] = fir.alloca i32 {bindc_name = \"verify_test\", uniq_name = \"_QFverify_testEverify_test\"}\n! CHECK: %[[VAL_6:.*]] = arith.constant 4 : i32\n! CHECK: %[[VAL_7:.*]] = fir.absent !fir.box<i1>\n! CHECK: %[[VAL_8:.*]] = fir.embox %[[VAL_3]]#0 typeparams %[[VAL_3]]#1 : (!fir.ref<!fir.char<1,?>>, index) -> !fir.box<!fir.char<1,?>>\n! CHECK: %[[VAL_9:.*]] = fir.embox %[[VAL_4]]#0 typeparams %[[VAL_4]]#1 : (!fir.ref<!fir.char<1,?>>, index) -> !fir.box<!fir.char<1,?>>\n! CHECK: %[[VAL_10:.*]] = fir.zero_bits !fir.heap<i32>\n! CHECK: %[[VAL_11:.*]] = fir.embox %[[VAL_10]] : (!fir.heap<i32>) -> !fir.box<!fir.heap<i32>>\n! CHECK: fir.store %[[VAL_11]] to %[[VAL_2]] : !fir.ref<!fir.box<!fir.heap<i32>>>\n! CHECK: %[[VAL_12:.*]] = fir.address_of(@_QQcl.{{[0-9a-z]+}}) : !fir.ref<!fir.char<1,{{[0-9]*}}>>\n! CHECK: %[[VAL_13:.*]] = arith.constant {{[0-9]+}} : i32\n! CHECK: %[[VAL_14:.*]] = fir.convert %[[VAL_2]] : (!fir.ref<!fir.box<!fir.heap<i32>>>) -> !fir.ref<!fir.box<none>>\n! CHECK: %[[VAL_15:.*]] = fir.convert %[[VAL_8]] : (!fir.box<!fir.char<1,?>>) -> !fir.box<none>\n! CHECK: %[[VAL_16:.*]] = fir.convert %[[VAL_9]] : (!fir.box<!fir.char<1,?>>) -> !fir.box<none>\n! CHECK: %[[VAL_17:.*]] = fir.convert %[[VAL_7]] : (!fir.box<i1>) -> !fir.box<none>\n! CHECK: %[[VAL_18:.*]] = fir.convert %[[VAL_12]] : (!fir.ref<!fir.char<1,{{[0-9]*}}>>) -> !fir.ref<i8>\n! CHECK: %[[VAL_19:.*]] = fir.call @_FortranAVerify(%[[VAL_14]], %[[VAL_15]], %[[VAL_16]], %[[VAL_17]], %[[VAL_6]], %[[VAL_18]], %[[VAL_13]]) : (!fir.ref<!fir.box<none>>, !fir.box<none>, !fir.box<none>, !fir.box<none>, i32, !fir.ref<i8>, i32) -> none\n! CHECK: %[[VAL_20:.*]] = fir.load %[[VAL_2]] : !fir.ref<!fir.box<!fir.heap<i32>>>\n! CHECK: %[[VAL_21:.*]] = fir.box_addr %[[VAL_20]] : (!fir.box<!fir.heap<i32>>) -> !fir.heap<i32>\n! CHECK: %[[VAL_22:.*]] = fir.load %[[VAL_21]] : !fir.heap<i32>\n! CHECK: fir.store %[[VAL_22]] to %[[VAL_5]] : !fir.ref<i32>\n! CHECK: fir.freemem %[[VAL_21]]\n! CHECK: %[[VAL_23:.*]] = fir.load %[[VAL_5]] : !fir.ref<i32>\n! CHECK: return %[[VAL_23]] : i32\n  character(*) :: s1, s2\n  verify_test = verify(s1, s2, kind=4)\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 2D array given the row, column, and number of columns in the array.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["4", "28", "70", "130", "208"]}, "code": "function num(i, j, nx)\n\n    implicit none\n\n    integer :: num, i, j, nx\n    num = i+(j-1)*nx\n\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 1D array given the number of elements in each row and the element number.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10, 25]", "case2": "[5, 10]", "case3": "[100, 1000]", "case4": "[1, 1]", "case5": "[50, 500]", "result": ["3", "2", "10", "1", "10"]}, "code": "function invert_num_j(nx, num)\n\n    integer :: num, nx\n    integer :: invert_num_j\n    invert_num_j = floor((num-1)/real(nx))+1\n\n  end function"}
{"instruction": "Use Fortran to give me a function for subtracting b from a and returning the result.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["-1", "-1", "1", "4", "-2"]}, "code": "function contract(a,b) result(c)\n         integer, intent(in) :: a, b\n         integer             :: c\n         c = a - b\n      end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "5", "6", "6"]}, "code": "function just_sum(a, b)\n    integer, intent(in) :: a, b\n\n    just_sum = a + b\n  end function"}
{"instruction": "Use Fortran to give me a function that checks if a character is a blank space or a tab.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'  '", "case4": "'\\t'", "case5": "'\\n'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_blank(c) result(r)\n    logical :: r\n    character, intent(in) :: c\n    r = ( c == ' ' .or. ichar(c) == 9 )\n  end function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is a space.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'\\t'", "case4": "'\\n'", "case5": "'\\r'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_space(c) result(r)\n    logical :: r\n    character, intent(in) :: c\n    r = ( c == ' ' .or. (ichar(c) >= 9 .and. ichar(c) < 13) )\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a printable ASCII character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'&'", "case4": "'1'", "case5": "'Z'", "result": ["T", "T", "T", "T", "T"]}, "code": "function is_graph(c) result(r)\n    logical :: r\n    character, intent(in) :: c\n    r = (ichar(c) > 32 .and. ichar(c) <= 126 )\n  end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if im is less than or equal to excess, otherwise return 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,0]", "case3": "[5,3]", "case4": "[10,20]", "case5": "[100,50]", "result": ["1", "1", "0", "1", "0"]}, "code": "function overflow(im, excess) result(extra_datum)\n      integer, intent(in) :: im, excess\n      integer extra_datum\n      extra_datum= merge(1,0,im<=excess)\n    end function"}
{"instruction": "Use Fortran to give me a function for the Gaspari-Cohn correlation function with input variables z and c.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["0.63281245040707290", "0.34479375957519043", "-Infinity", "46.575006763637063", "0.54361618420821278"]}, "code": "function gaspari_cohn_mid(z, c) result(f)\n    real(kind=8), intent(in)::z, c\n    real(kind=8)::f\n    f = 1./12*(z/c)**5 - 0.5*(z/c)**4 + 5./8*(z/c)**3 &\n        + 5./3*(z/c)**2 - 5*z/c - 2./3*c/z + 4\n  end function"}
{"instruction": "Use Fortran to give me a function for the Gaspari-Cohn correlation function.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[0.0,4.0]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["0.68489584326744080", "1.0000000000000000", "-7.8124105930328369E-003", "-431.29166567325592", "0.62716346973185710"]}, "code": "function gaspari_cohn_close(z, c) result(f)\n    real(kind=8), intent(in)::z, c\n    real(kind=8)::f\n    f = -0.25*(z/c)**5 + 0.5*(z/c)**4 + 5./8*(z/c)**3 - 5./3*(z/c)**2 + 1\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer array and returns the number of unique elements in the array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[1,1,1,1,1]", "case3": "[1,2,3,4,5,1,2,3,4,5]", "case4": "[1,2,3,4,5,5,4,3,2,1]", "case5": "[1,2,3,4,5,5,4,3,2,1,6,7,8,9,10]", "result": ["5", "1", "5", "5", "10"]}, "code": "function number_unique_elements(list_int)\n    integer, intent(in) :: list_int(:)\n    logical :: mask(size(list_int))\n    integer :: number_unique_elements, i\n    mask = .true.\n\n    do i = size(list_int), 2, -1\n       mask(i) = .NOT. (ANY(list_int(:i-1) == list_int(i)))\n    enddo\n    number_unique_elements = COUNT(mask)\n\n    return\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the right-hand side of a Poisson equation with given parameters.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.5,0.5]", "case2": "[0.0,1.0]", "case3": "[1.0,0.0]", "case4": "[0.25,0.75]", "case5": "[0.75,0.25]", "result": ["-1.1840846448189289E-030", "0.0000000000000000", "0.0000000000000000", "78.956835208714864", "78.956835208714864"]}, "code": "function g(x,y)\n\n    ! the RHS of the Poisson equation we are solving\n\n    implicit none\n\n    double precision :: g, x, y\n    double precision, parameter :: pi = 3.14159265358979323846d0\n\n    g = -2.d0*(2.0*pi)**2 * sin(2.0*pi*x) * sin(2.0*pi*y)\n\n    return\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the analytic solution to an equation using the input values x and y.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.5,0.5]", "case2": "[0.25,0.75]", "case3": "[0.75,0.25]", "case4": "[0.0,0.0]", "case5": "[1.0,1.0]", "result": ["1.4996607218221374E-032", "-1.0000000000000000", "-1.0000000000000000", "0.0000000000000000", "5.9986428872885498E-032"]}, "code": "function true(x,y)\n\n    ! the analytic solution to our equation\n\n    implicit none\n\n    double precision true, x, y\n    double precision, parameter :: pi = 3.14159265358979323846d0\n  \n    true = sin(2.0*pi*x) * sin(2.0*pi*y)\n  \n    return\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the tax on a mortgage payment given the loan amount, interest rate, and location.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,0.0,0.0]", "case4": "[0.0,1.0,0.0]", "case5": "[0.0,0.0,1.0]", "result": ["1.00000000", "0.00000000", "1.00000000", "0.00000000", "0.00000000"]}, "code": "function FnTaxM(ly,mort,loc)\n\ndouble precision, intent(in)    :: ly,mort,loc\ndouble precision                :: lyp\ndouble precision                :: intpay\n    !Calculate how much of payment was interest\n    intpay = (grm*mort+grl*loc)*MortDeduct\n    lyp = ly-intpay\n    lyp = max(lyp,0.0d0)\n    FnTaxM=min(ly-ltax*ly**(1.0d0-tautax),lyp-ltax*lyp**(1.0d0-tautax))\n\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates a mortgage payment based on the mortgage rate, the number of years left to pay, and an extra payment amount.", "test_case": {"param_num": 2, "param_type": "real*8,integer", "case1": "[0.05,30]", "case2": "[0.08,40]", "case3": "[0.02,50]", "case4": "[0.1,60]", "case5": "[0.06,70]", "result": ["Infinity", "Infinity", "Infinity", "Infinity", "Infinity"]}, "code": "function FnPm(mort,age)\n\ndouble precision, intent(in)    :: mort\ninteger, intent(in)             :: age\ninteger                         :: payleft\n\n    payleft = Jtot-age+1+payextra\n    FnPm = mort*grm*((1.0d0+grm)**payleft)/((1.0d0+grm)**payleft - 1.0d0)\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates a value based on input parameters and returns the result.", "test_case": {"param_num": 4, "param_type": "real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.5,2.5,3.5,4.5]", "case4": "[0.5,0.25,0.125,0.0625]", "case5": "[10.0,20.0,30.0,40.0]", "result": ["3.0000000000000000", "0.0000000000000000", "8.4312476834689178", "0.19263793759278050", "5515.4328932550707"]}, "code": "function dadtau(axp_tau,O_mat_0,O_vac_0,O_k_0) \n  real(kind=8)::dadtau,axp_tau,O_mat_0,O_vac_0,O_k_0\n  dadtau = axp_tau*axp_tau*axp_tau *  &\n       &   ( O_mat_0 + &\n       &     O_vac_0 * axp_tau*axp_tau*axp_tau + &\n       &     O_k_0   * axp_tau )\n  dadtau = sqrt(dadtau)\n  return\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a lower and upper bound using C binding.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[0,100]", "case3": "[-5,5]", "case4": "[100,200]", "case5": "[0,0]", "result": ["1", "0", "-5", "100", "0"]}, "code": "function randomgen(lower, upper) result(rn) bind(C)\n      use, intrinsic :: iso_c_binding, only: c_int\n      integer(c_int), intent(in), value :: lower, upper\n      integer(c_int) :: rn\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,3]", "case3": "[21,14]", "case4": "[100,25]", "case5": "[50,30]", "result": ["5", "3", "7", "25", "10"]}, "code": "function gcd(a, b) result (tempb)\n    implicit none\n    integer, intent(in) :: a, b\n    integer :: tempa, tempb, place_holder\n    \n    tempa = a\n    tempb = b\n    \n    do while (.not.tempa.eq.0)\n    \n        place_holder = tempa\n    \n        if (tempa.eq.0) then\n            exit\n        end if\n    \n        tempa = mod(tempb,tempa)\n        tempb = place_holder\n    \n    end do\n    \nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a letter and returns a boolean value.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_letter(ch) result(res)\r\n\r\n! Returns .true. if ch is a letter and .false. otherwise\r\n\r\ncharacter :: ch\r\nlogical :: res\r\n\r\nselect case(ch)\r\ncase('A':'Z','a':'z')\r\n  res=.true.\r\ncase default\r\n  res=.false.\r\nend select\r\nreturn\r\n\r\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a digit and false otherwise.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_digit(ch) result(res)\r\n\r\n! Returns .true. if ch is a digit (0,1,...,9) and .false. otherwise\r\n\r\ncharacter :: ch\r\nlogical :: res\r\n\r\nselect case(ch)\r\ncase('0':'9')\r\n  res=.true.\r\ncase default\r\n  res=.false.\r\nend select\r\nreturn\r\n\r\nend function"}
{"instruction": "Use Fortran to create a function that calculates the cumulative sum of an input array using a formula that involves adding each element to the previous one and dividing by 2.", "test_case": {"param_num": 1, "param_type": "real*8(:)", "case1": "[1.0d0,2.0d0,3.0d0]", "case2": "[0.0d0,1.0d0,2.0d0,3.0d0]", "case3": "[1.0d0,2.0d0]", "case4": "[0.0d0,0.0d0,0.0d0,0.0d0]", "case5": "[1.0d0,1.0d0,1.0d0,1.0d0,1.0d0]", "result": ["0.0000000000000000        1.5000000000000000        4.0000000000000000", "0.0000000000000000       0.50000000000000000        2.0000000000000000        4.5000000000000000", "0.0000000000000000        1.5000000000000000", "0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "0.0000000000000000        1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000"]}, "code": "function cumsum(input) result (output)\n            double precision, intent(in) :: input(:)\n            double precision :: output(size(input))\n\n            integer :: i\n\n            output(1) = 0\n            do i = 2, size(input)\n                output(i) = output(i-1) + 0.5d0*(input(i) + input(i-1))\n            end do\n        end function"}
{"instruction": "Use Fortran to create a function that takes two integer inputs and returns a 2x2 array filled with the value 33.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-1,5]", "case5": "[2147483647,-2147483648]", "result": ["33          33          33          33", "33          33          33          33", "33          33          33          33", "33          33          33          33", "33          33          33          33"]}, "code": "function bar(i,j)\n    integer, intent(in) :: i,j\n    integer, dimension(2,2) :: bar\n    bar = 33\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the number of triangles that can be formed given a range of values for the sides of the triangle.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,5,1]", "case2": "[1,10,2]", "case3": "[3,7,1]", "case4": "[2,8,3]", "case5": "[4,12,2]", "result": ["28", "22", "34", "7", "32"]}, "code": "function number_of_triangles(nkmin,nkmax,step)\n      implicit none\n      integer number_of_triangles\n      integer i,j,l,nkmin,nkmax,step,nT\n      nT=0\n      do i=nkmin,nkmax,step\n        do j=nkmin,i,step\n          do l=max(nkmin,abs(i-j)),j,step\n            nT=nT+1\n          enddo\n        enddo\n      enddo\n      number_of_triangles=nT\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the median of an array of integers.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[10,20,30,40,50,60]", "case3": "[1,2,3,4,5,6,7,8,9]", "case4": "[100,200,300,400,500,600,700,800,900,1000]", "case5": "[5,4,3,2,1]", "result": ["3.00000000", "3.00000000", "5.00000000", "5.00000000", "3.00000000"]}, "code": "function median_int(x) result(xm)\n\n    integer, intent(in) :: x(:)\n\n    xm = ceiling(size(x)/2.0)\n       \n  end function"}
{"instruction": "Use Fortran to give me a function that implements the Box-Muller transform to generate normally distributed random numbers.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,0.5]", "case2": "[0.2,0.8]", "case3": "[0.9,0.1]", "case4": "[0.6,0.4]", "case5": "[0.3,0.7]", "result": ["0.00000000", "0.554414570", "0.371374130", "-0.817728221", "-0.479519010"]}, "code": "function boxmuller(n, m)\n  real(4) :: n, m\n  real(4) :: boxmuller\n  real(4) :: pi = 3.14159265359\n\n  boxmuller = sqrt(-2.0*log(n)) * cos(2.0*pi*m)\nend function"}
{"instruction": "Use Fortran to define a C-compatible function that takes a character array as input and returns a pointer to a C structure.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'H'", "case2": "'He'", "case3": "'Li'", "case4": "'Be'", "case5": "'C'", "result": ["11237808", "17201584", "14252464", "7698864", "15366576"]}, "code": "function c_chfl_atom(name) bind(C, name=\"chfl_atom\")\n    use iso_c_binding\n    \n    implicit none\n    type(c_ptr) :: c_chfl_atom\n    character(len=1, kind=c_char), dimension(*), intent(in) :: name\nend function"}
{"instruction": "Use Fortran to create a function that checks if a string is a section-type string and returns the section name.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'[1,2]','[3,4]'", "case2": "'[3,4]','[1,2]'", "case3": "'[2,4]','[5,1]'", "case4": "'[1,2]','[1,2]'", "case5": "'[3,4]','[2,4]'", "result": ["T", "T", "T", "T", "T"]}, "code": "function isSection(sString, sSection) result(lIsSection)\n\n        ! Routine arguments\n        character(len=*), intent(in)    :: sString\n        character(len=*), intent(out)   :: sSection\n        logical                         :: lIsSection\n\n\t\t! Locals\n        integer     :: iPos\n        integer     :: iLast\n\n\t\t! Check first and last character are compatible with a section-type string\n        iPos = verify(sString, ' ')\n        iLast = len_trim(sString)\n        if(iPos >= 1 .and. iPos <= iLast) then\n            ! Some blanks before the string real beginning: parse from there\n            lIsSection = sString(iPos:iPos) == '[' .and. sString(iLast:iLast) == ']'\n            if(lIsSection) then\n                sSection = sString((iPos+1):(iLast-1))\n            else\n                sSection = ' '\n            end if\n        else\n            ! String begins with a non-blank\n            lIsSection = sString(1:1) == '[' .and. sString(iLast:iLast) == ']'\n            if(lIsSection) then\n                sSection = sString(1:(iLast-1))\n            else\n                sSection = ' '\n            end if\n        end if\n\n    end function"}
{"instruction": "Use Fortran to give me a function for numerical integration using the Simpson's 3/8 rule.", "test_case": {"param_num": 5, "param_type": "real*8,real*8,real*8,real*8,real*8", "case1": "[1.0,2.0,3.0,0.0,1.0]", "case2": "[0.0,0.0,0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,0.0,1.0]", "case4": "[1.0,2.0,3.0,1.0,2.0]", "case5": "[1.0,2.0,3.0,0.0,0.0]", "result": ["2.00000000", "0.00000000", "1.00000000", "2.00000000", "0.00000000"]}, "code": "function Quad(f1,f2,f3,xl,xr)\n    real*8 :: f1, f2, f3, xl, xr\n    real*8, parameter :: wt1=0.55555555555555555555555555555556d0\n    real*8, parameter :: wt2=0.88888888888888888888888888888889d0\n    real*8, parameter :: wt3=0.55555555555555555555555555555556d0\n    Quad = 0.5d0*(xr-xl)*(wt1*f1 + wt2*f2 + wt3*f3)\n  end function"}
{"instruction": "Use Fortran to create a function that takes a character as input and returns a string of characters from 'a' to the input character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'1'", "case2": "'2'", "case3": "'3'", "case4": "'4'", "case5": "'5'", "result": ["", "", "", "", ""]}, "code": "function f5 (c)\r\n    character(len=1_8) :: c\r\n    character(len=scan('123456789', c)) :: f5\r\n    integer :: i\r\n    do i = 1, len (f5)\r\n       f5(i:i) = char (i+96)\r\n    end do\r\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given string starts with a given pattern.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','he'", "case2": "'world','wor'", "case3": "'fortran','for'", "case4": "'python','py'", "case5": "'','a'", "result": ["T", "T", "T", "T", "F"]}, "code": "function does_start_with(str,pattern) result (r)\n\n    character(len=*), intent(in) :: str\n    character(len=*), intent(in) :: pattern\n    logical :: r\n\n    if (len(str)<len(pattern)) then       ! if str is shorter than pattern\n      r = .false.  \n    else    \n      r = (str(1:len(pattern))==pattern)  ! otherwise, compare \n    end if\n \n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the number of rows or columns of a distributed matrix block that are assigned to a given process.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[10,2,0,0,4]", "case2": "[20,5,1,0,8]", "case3": "[30,3,2,1,6]", "case4": "[40,4,3,2,2]", "case5": "[50,6,4,3,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function numroc(nn, nb, iproc, isrcproc, nproc)\n      integer, intent(in) :: nn, nb, iproc, isrcproc, nproc\n      integer :: numroc\n    end function"}
{"instruction": "Use Fortran to give me a function that maps a global index to a local index for a given processor in a parallel computing environment.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[10,20,30,40,50]", "case3": "[100,200,300,400,500]", "case4": "[1000,2000,3000,4000,5000]", "case5": "[10000,20000,30000,40000,50000]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function indxl2g(indxglob, nb, iproc, isrcproc, nprocs)\n      integer :: indxl2g\n      integer, intent(in) :: indxglob, nb, iproc, isrcproc, nprocs\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the number of elements to be processed by each CPU in a parallel program.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,0,4]", "case2": "[10,3,4]", "case3": "[100,0,10]", "case4": "[100,9,10]", "case5": "[100,5,20]", "result": ["2", "4", "10", "10", "5"]}, "code": "function calculate_nelements_at_cpu(nelements_total, myrank, nbproc) result(nelements)\n  integer, intent(in) :: nelements_total, myrank, nbproc\n  integer :: nelements\n\n  nelements = nelements_total / nbproc\n\n  if (myrank == nbproc - 1 .and. mod(nelements_total, nbproc) /= 0) then\n    ! Last rank gets the remaining elements.\n    nelements = nelements + mod(nelements_total, nbproc)\n  endif\nend function"}
{"instruction": "Use Fortran to create a function that takes a character input and returns it as output.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'c'", "case4": "'d'", "case5": "'e'", "result": ["'", "'", "'", "'", "'"]}, "code": "function t0(value)\n         character :: value\n         character :: t0\n         t0 = value\n       end function"}
{"instruction": "Use Fortran to create a function that takes a single character as input and returns it as output.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'c'", "case4": "'d'", "case5": "'e'", "result": ["'", "'", "'", "'", "'"]}, "code": "function t1(value)\n         character(len=1) :: value\n         character(len=1) :: t1\n         t1 = value\n       end function"}
{"instruction": "Use Fortran to create a function that checks if an item is in a list.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[4,[5,6,7,8]]", "case3": "[2,[1,3]]", "case4": "[5,[5,5,5,5,5]]", "case5": "[3,[2,4,6,8]]", "result": ["T", "F", "F", "T", "F"]}, "code": "function inlist(item,ilist)\n    \n    integer :: item,ilist(:)\n    ! Local variables\n    integer :: n\n    logical :: inlist\n\n    ! --------------------------------------------------------------------------\n\n    inlist = .false.\n    do n=1,size(ilist)\n       if(item == ilist(n)) inlist = .true.\n    enddo\n    \n  end function"}
{"instruction": "Use Fortran to create a function that gets the value of an environment variable and returns it, or returns a default value if the variable is not set.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'VAR1','default1'", "case2": "'VAR2',''", "case3": "'VAR3','default3'", "case4": "'VAR4','default4'", "case5": "'VAR5','default5'", "result": ["default1", "", "default3", "default4", "default5"]}, "code": "function get_var(var, dflt) result(l)\n            character (len=*), intent(in):: var\n            character (len=*), intent(in):: dflt\n            character (len=:), allocatable:: l\n\n            character (len=1000):: raw\n            integer:: n, s\n\n            call get_environment_variable(name=var, value=raw, & \n                                          length=n, status=s)\n            if (s .eq. 0) then\n                ! value var exists and either has no value or its value is \n                ! assigned to raw\n                if (n .gt. 0) then \n                    allocate(character (len=n):: l)\n                    l = trim(raw)\n                    return\n                end if\n            end if\n            ! in case the env.var not set or empty, return its default value\n            n = len(dflt)\n            allocate(character (len=n):: l)\n            l = dflt\n            return\n        end function"}
{"instruction": "Use Fortran to give me a function that calculates the power of a number given a base and an exponent.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[2.0,3.0]", "case2": "[4.5,0.0]", "case3": "[0.0,5.0]", "case4": "[1.0,-2.0]", "case5": "[-2.0,3.0]", "result": ["8.0000000000000000", "1.0000000000000000", "0.0000000000000000", "1.0000000000000000", "-8.0000000000000000"]}, "code": "function fpow(xbase, xexponent) result(y)\n  REAL*8, intent(in) :: xbase\n  REAL*8, intent(in) :: xexponent\n  REAL*8 :: y\n  y = xbase ** xexponent\nend function"}
{"instruction": "Use Fortran to define a function that takes an integer state and an integer Ntrace as input and returns an integer iRED that is the result of calling another function Ibits with arguments state, 0, and Norb*(Nlat-Ntrace).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "0", "3", "5", "0"]}, "code": "function get_reduced_state(state,Ntrace) result(iRED)\n    integer :: state, Ntrace\n    integer :: iRED\n    iRED= Ibits(state,0,Norb*(Nlat-Ntrace))\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the value of itrace based on the values of state, Norb, Nlat, Ntrace, and Nimp.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_tracing_state(state,Ntrace) result(itrace)\n    integer :: state, Ntrace\n    integer :: itrace\n    itrace= Ibits(state,Norb*(Nlat-Ntrace),Nimp)\n  end function"}
{"instruction": "Use Fortran to give me a function that converts a binary number i into a configuration vector ivec of length Ntot.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[3,15]", "case4": "[8,30]", "case5": "[2,25]", "result": ["1           0           0           0           0           0           0           0           0           0", "1           0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "1           1           0           0           0           0           0           0           0           0           0           0           0           0           0", "0           0           0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0"]}, "code": "function bdecomp(i,Ntot) result(ivec)\n    integer :: Ntot,ivec(Ntot),l,i\n    logical :: busy\n    !this is the configuration vector |1,..,Ns,Ns+1,...,Ntot>\n    !obtained from binary decomposition of the state/number i\\in 2^Ntot\n    do l=0,Ntot-1\n       busy=btest(i,l)\n       ivec(l+1)=0\n       if(busy)ivec(l+1)=1\n    enddo\n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient of n1 and n2.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,0]", "case2": "[5,3]", "case3": "[10,5]", "case4": "[7,2]", "case5": "[15,7]", "result": ["1", "10", "252", "21", "6435"]}, "code": "function binomial(n1,n2) result(nchoos)\n    real(8) :: xh\n    integer :: n1,n2,i\n    integer :: nchoos\n    xh = 1.d0\n    if(n2<0) then\n       nchoos = 0\n       return\n    endif\n    if(n2==0) then\n       nchoos = 1\n       return\n    endif\n    do i = 1,n2\n       xh = xh*dble(n1+1-i)/dble(i)\n    enddo\n    nchoos = int(xh + 0.5d0)\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer array as input and returns an integer array with the square of each element.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[0,-1,2,5]", "case3": "[100,200,300,400]", "case4": "[0]", "case5": "[1,2,3,4,5]", "result": ["16743632           0    16712016", "15040064           0    15008080           0", "16678464           0    16646480           0", "6913600", "14712384           0    14680400           0           5"]}, "code": "function square_v(x)\t\t!\"vector\" version\n    integer, dimension(:), intent(in) :: x\n    integer, dimension(size(x)) :: square_v\n    end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns a value calculated using a formula involving those inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2.00000000", "6.00000000", "4.00000000", "5.00000000", "5.00000000"]}, "code": "function p(i, j)\n    integer, intent(in) :: i, j\n    p = (i-1)*(ny+1) + j\n    end function"}
{"instruction": "Use Fortran to define a function that takes three integer inputs and returns a calculated value based on those inputs.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["36.0000000", "237.000000", "438.000000", "639.000000", "840.000000"]}, "code": "function p(i, j, k)\n    integer, intent(in) :: i, j, k\n    p = (i-1)*(ny+1)*(nz+1) + (j-1)*(nz+1) + k\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the quadratic expression n^2 + in + j, but returns 0 if the absolute value of i is greater than or equal to 1000 or the absolute value of j is greater than 1000.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["14.0000000", "65.0000000", "152.000000", "275.000000", "434.000000"]}, "code": "function quadratic_primes(i, j, n)\n        integer, intent(in) :: i, j, n\n\n        if (abs(i) >= 1000 .or. abs(j) > 1000) then\n            quadratic_primes = 0\n            return\n        end if\n        quadratic_primes = n**2 + i*n + j\n    end function"}
{"instruction": "Use Fortran to give me a function that checks if a given string starts with another given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','he']", "case2": "['world','wor']", "case3": "['fortran','fort']", "case4": "['','']", "case5": "['abc','']", "result": ["1", "1", "1", "1", "1"]}, "code": "function  starts(string1, string2) result(answer)\n      implicit none\n      character(len=*), intent(in) :: string1\n      character(len=*), intent(in) :: string2\n      integer :: answer\n      answer = 0\n      if(len(string2)>len(string1)) return\n      if(string1(1:len(string2))==string2) answer = 1\n   end function"}
{"instruction": "Use Fortran to give me a function that checks if string2 is at the end of string1.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','lo']", "case2": "['world','ld']", "case3": "['fortran','an']", "case4": "['python','py']", "case5": "['programming','ing']", "result": ["1", "1", "1", "0", "1"]}, "code": "function  ends(string1, string2) result(answer)\n      implicit none\n      character(len=*), intent(in) :: string1\n      character(len=*), intent(in) :: string2\n      integer :: answer\n      answer = 0\n      if(len(string2)>len(string1)) return\n      if(string1(len(string1)-len(string2)+1:)==string2) answer = 1\n   end function"}
{"instruction": "Use Fortran to give me a function that takes a single character as input and returns a logical value.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["T", "T", "T", "T", "T"]}, "code": "function match_i(char_) result(matches)\n            implicit none\n\n            character(len=1), intent(in) :: char_\n            logical :: matches\n        end function"}
{"instruction": "Use Fortran to give me a function that calculates the difference between consecutive elements of an input array.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.0,0.0,0.0]", "case3": "[1.0,1.0,1.0,1.0]", "case4": "[1.0,2.0,3.0,4.0,5.0]", "case5": "[0.5,1.5,2.5,3.5]", "result": ["1.00000000       1.00000000", "0.00000000       0.00000000", "0.00000000       0.00000000       0.00000000", "1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000"]}, "code": "function diff_rv(x) result(d)\nreal, intent(in) :: x(:)\nreal  :: d(size(x)-1)\nd = x(2:) - x(:size(x)-1)\nend function"}
{"instruction": "Use Fortran to create a function that determines whether a point is inside an object, given the coordinates of the point and the object.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,0.0]", "case2": "[1.0,1.0]", "case3": "[2.0,2.0]", "case4": "[3.0,3.0]", "case5": "[4.0,4.0]", "result": ["F", "F", "F", "F", "F"]}, "code": "function inside_obj(x1pos,x2pos)\n\n    !------------------------------------------------------------\n    !-------DETERMINES WHETHER OR NOT A POINT IS INSIDE THE OBJECT\n    !------------------------------------------------------------\n\n\n    real(8), intent(in) :: x1pos,x2pos\n\n    real(8) :: r\n\n    logical :: inside_obj\n\n\n    r=sqrt((x1pos-x1ctr)**2+(x2pos-x2ctr)**2)\n    if (r<robj) then\n      inside_obj=.true.\n    else\n      inside_obj=.false.\n    end if\n\n  end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,0]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function red_f(a, b)\n      integer :: a, b, red_f\n      intent(in) :: a, b\n    end function"}
{"instruction": "Use Fortran to define a function that takes an array of double precision numbers as input and returns a double precision number.", "test_case": {"param_num": 2, "param_type": "real*8(:)", "case1": "[[1.0,2.0,3.0],[4.0,5.0,6.0]]", "case2": "[[0.0,0.0],[1.0,1.0],[2.0,2.0],[3.0,3.0]]", "case3": "[[1.0,2.0],[3.0,4.0],[5.0,6.0]]", "case4": "[[0.0,0.0,0.0,0.0],[1.0,1.0,1.0,1.0]]", "case5": "[[1.0,2.0,3.0,4.0,5.0],[6.0,7.0,8.0,9.0,10.0]]", "result": ["3.2699794057880403E-317", "3.2699794057880403E-317", "3.2699794057880403E-317", "3.2699794057880403E-317", "3.2699794057880403E-317"]}, "code": "function f(x)\n                        double precision, intent(in) :: x(:)\n                        double precision             :: f\n                    end function"}
{"instruction": "Use Fortran to create a function that takes an integer and a key and returns a hash value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[20,10]", "case3": "[15,7]", "case4": "[30,20]", "case5": "[5,3]", "result": ["6", "11", "8", "21", "4"]}, "code": "function hashfunc(nkey,dat)\n integer :: dat,nkey,hashfunc\n hashfunc=ABS(mod(dat,nkey))+1\nend function"}
{"instruction": "Use Fortran to create a function that returns a pointer to an FMM wrapper with specified integer values for mult_order, max_pts, init_depth, pbc, and regularize.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[3,4,2,1,0]", "case2": "[5,10,3,0,1]", "case3": "[2,8,1,1,0]", "case4": "[4,6,4,0,1]", "case5": "[1,3,5,1,1]", "result": ["3", "5", "2", "4", "1"]}, "code": "function create_fmm_wrapper(mult_order, max_pts, init_depth, pbc, regularize) result(fmm_wrapper) &\n         bind(C, name=\"create_fmm_wrapper\")\n         use iso_c_binding\n         implicit none\n         type(c_ptr):: fmm_wrapper\n         integer(c_int), value :: mult_order\n         integer(c_int), value :: max_pts\n         integer(c_int), value :: init_depth\n         integer(c_int), value :: pbc\n         integer(c_int), value :: regularize\n      end function"}
{"instruction": "Use Fortran to give me a function that takes an integer array and returns the product of all its elements.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[4,5,6,7]", "case3": "[8,9,10,11,12]", "case4": "[13,14,15,16,17,18]", "case5": "[19,20,21,22,23,24,25]", "result": ["6", "840", "95040", "13366080", "-1872239296"]}, "code": "function prodVector(vector) result(vecprod)\n    intrinsic :: size\n    integer, intent(in) :: vector(:)\n    integer vecprod, i\n\n    vecprod = 1\n    do i = 1, size(vector)\n      vecprod = vecprod*vector(i)\n    end do\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two positive integers a and b using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[100,75]", "case4": "[50,30]", "case5": "[7,21]", "result": ["5.00000000", "5.00000000", "25.0000000", "10.0000000", "7.00000000"]}, "code": "function gcd(a, b)\n\ninteger, intent(in) :: a, b\ninteger :: x,y,z\n\nif (a < 1 .or. b < 1) error stop \"autogrid:gcd positive integers only\"\n\nx = a\ny = b\nz = modulo(x, y)\ndo while (z /= 0)\n  x = y\n  y = z\n  z = modulo(x, y)\nend do\ngcd = y\n\nend function"}
{"instruction": "Use Fortran to define a function that takes in two real numbers x and y as input and returns their product as output.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.7]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function surface(x,y) result(z)\r\n    real,intent(in) :: x,y\r\n    real :: z\r\n    end function"}
{"instruction": "Use Fortran to create a function that retrieves the value of an environment variable, with an optional default value if the variable is not defined.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'HOME','/home/user/'", "case2": "'USER','user'", "case3": "'','/usr/local/'", "case4": "'PATH','/usr/bin/'", "case5": "'TMP','/tmp/'", "result": ["/home/user/", "user", "/usr/local/", "D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;D:\\Miniconda3\\bin;D:\\Miniconda3\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;C:\\Program Files\\Microsoft\\jdk-11.0.16.101-hotspot\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0;D:\\;D:\\fortran\\mingw64\\bin;C:\\Users\\98365\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;.;D:\\PyCharm 2023.2.1\\bin;.;D:\\Microsoft VS Code\\bin;D:\\Miniconda3\\Library\\Bin", "C:\\Users\\98365\\AppData\\Local\\Temp"]}, "code": "function system_getenv(name,default) result(value)\n\n! ident_36=\"@(#)M_system::system_getenv(3f): call get_environment_variable as a function with a default value(3f)\"\n\ncharacter(len=*),intent(in)          :: name\ncharacter(len=*),intent(in),optional :: default\ninteger                              :: howbig\ninteger                              :: stat\ncharacter(len=:),allocatable         :: value\n\n   if(NAME.ne.'')then\n      call get_environment_variable(name, length=howbig, status=stat, trim_name=.true.)  ! get length required to hold value\n      if(howbig.ne.0)then\n         select case (stat)\n         case (1)     ! print *, NAME, \" is not defined in the environment. Strange...\"\n            value=''\n         case (2)     ! print *, \"This processor doesn't support environment variables. Boooh!\"\n            value=''\n         case default ! make string to hold value of sufficient size and get value\n            if(allocated(value))deallocate(value)\n            allocate(character(len=max(howbig,1)) :: VALUE)\n            call get_environment_variable(name,value,status=stat,trim_name=.true.)\n            if(stat.ne.0)VALUE=''\n         end select\n      else\n         value=''\n      endif\n   else\n      value=''\n   endif\n   if(value.eq.''.and.present(default))value=default\n\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "-4", "-1"]}, "code": "function add(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer :: add\n\n    add = lhs + rhs\n  end function"}
{"instruction": "Use Fortran to give me a function for lhs-rhs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["-1", "-1", "1", "4", "-2"]}, "code": "function sub(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer :: sub\n\n    sub = lhs - rhs\n  end function"}
{"instruction": "Use Fortran to give me a function for multiplying two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,3]", "case2": "[0,0]", "case3": "[5,6]", "case4": "[10,0]", "case5": "[0,10]", "result": ["6", "0", "30", "0", "0"]}, "code": "function mul(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer :: mul\n\n    mul = lhs * rhs\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the modulus of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[15,4]", "case3": "[20,7]", "case4": "[100,9]", "case5": "[50,12]", "result": ["1", "3", "6", "1", "2"]}, "code": "function md(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    integer :: md\n\n    md = mod(lhs, rhs)\n  end function"}
{"instruction": "Use Fortran to create a function that checks if an integer is in a list of integers.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3]]", "case2": "[4,[5,6,7,8]]", "case3": "[2,[1,3]]", "case4": "[5,[5,5,5,5,5]]", "case5": "[3,[0]]", "result": ["T", "F", "F", "T", "F"]}, "code": "function inlist(item,ilist)\n!!! dummy arguments\n    integer :: item,ilist(:)\n! local variables\n    integer :: n\n    logical :: inlist\n\n    inlist = .false.\n    do n=1,size(ilist)\n       if(item == ilist(n)) inlist = .true.\n    enddo\n\n  end function"}
{"instruction": "Use Fortran to give me a function that returns the index of an item in a list.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2,3,4,5]]", "case2": "[3,[5,4,3,2,1]]", "case3": "[3,[1,2,3,4,5]]", "case4": "[5,[5,5,5,5,5]]", "case5": "[2,[1,2,3,4,5]]", "result": ["1", "3", "3", "5", "2"]}, "code": "function where_inlist(item,ilist)\n!!! dummy arguments\n    integer :: item,ilist(:)\n! local variables\n    integer :: n\n    integer :: where_inlist\n\n    do n=1,size(ilist)\n       if(item == ilist(n)) where_inlist = n\n    enddo\n\n  end function"}
{"instruction": "Use Fortran to define a function that takes in two real numbers k and kc, calculates the exponential of -(k/kc)^10, and returns the result as a real number.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["0.99902391418197567", "0.85086178118451516", "1.0000000000000000", "0.0000000000000000", "0.99094628691141140"]}, "code": "function lambda_test(k,kc) result(l)\n\t\tImplicit None\n\t\tReal * 8, intent(in) :: k, kc\n\t\tReal * 8 :: l\n\t\tl = exp(-(k/kc)**10)\n\t\treturn\n\tend function"}
{"instruction": "Use Fortran to give me a function that takes an array and returns a new array with the elements in reverse order.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[10,20,30,40,50]", "case3": "[100,200,300,400,500]", "case4": "[1,2,3,4,5,6,7,8,9,10]", "case5": "[5,4,3,2,1]", "result": ["5           4           3           2           1", "50          40          30          20          10", "500         400         300         200         100", "10           9           8           7           6           5           4           3           2           1", "1           2           3           4           5"]}, "code": "function reverse(a)\r\n\tinteger :: a(:), reverse(size(a))\r\n\tinteger :: n, i\r\n\t\tn = size(a)\r\n\t\tdo i = 1, n\r\n\t\t\treverse(i) = a(n-i+1)\r\n\t\tenddo\t\t\r\n\tend function"}
{"instruction": "Use Fortran to create a function that concatenates a string and an integer and returns the resulting string.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello', 123]", "case2": "['world', 456]", "case3": "['fortran', 789]", "case4": "['programming', 101112]", "case5": "['language', 131415]", "result": ["hello123", "world456", "fortran789", "programming101112", "language131415"]}, "code": "function numcat_local(S, num)\r\n        character(LEN=*) S\r\n        character(LEN=1024) numcat_local, numstr\r\n        integer num\r\n\r\n        write (numstr, *) num\r\n        numcat_local = trim(S) // trim(adjustl(numstr))\r\n\r\n    end function"}
{"instruction": "Use Fortran to create a function that returns a pointer to a type that contains integer and boolean values for a 2D wall with periodic boundary conditions.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,6,7,8]", "case3": "[9,10,11,12]", "case4": "[13,14,15,16]", "case5": "[17,18,19,20]", "result": ["1", "5", "9", "13", "17"]}, "code": "function create_fmm_wrapperwall2d(mult_order, max_pts, init_depth, pbc) result(fmm_wrapper) &\n         bind(C, name=\"create_fmm_wrapperwall2d\")\n         use iso_c_binding\n         implicit none\n         type(c_ptr):: fmm_wrapper\n         integer(c_int), value :: mult_order\n         integer(c_int), value :: max_pts\n         integer(c_int), value :: init_depth\n         integer(c_int), value :: pbc\n      end function"}
{"instruction": "Use Fortran to create a function named \"cvodecreate\" that takes two integer arguments and returns a pointer to a memory location.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function cvodecreate(m1,m2) bind(c,name='CVodeCreate')\n      use iso_c_binding\n      integer(C_INT),value::m1 !< ODE method\n      integer(C_INT),value::m2 !< nonlinear equation method\n      type(C_PTR)::cvodecreate !< value of the memory pointer\n    end function"}
{"instruction": "Use Fortran to create a function that returns the index of the first non-blank character in the iwrd'th non-blank word in a string, or returns len if the iwrd'th word is not found.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'Hello World', 1", "case2": "'Hello World', 2", "case3": "'Hello World', 3", "case4": "'Hello World', 0", "case5": "'Hello World', 10", "result": ["1", "7", "11", "11", "11"]}, "code": "function begwrd(string,iwrd) result (rvint)\r\n  character(len=*), intent(in) :: string\r\n  integer, intent(in)          :: iwrd\r\n  integer                      :: rvint\r\n  !\r\n  ! Returns the index of the first non-blank character in the iwrd'th\r\n  ! non-blank word (word are seperated by spaces, tabs or commas).\r\n  ! Returns len if iwrd'th word is not found.\r\n  !\r\n  integer   :: i, nword\r\n  logical*2 :: wasblk\r\n  intrinsic :: len\r\n  !\r\n  wasblk=.true.\r\n  nword= 0\r\n  do i=1,len(string)\r\n     if(string(i:i).eq.' ' .or. string(i:i).eq.',' .or. string(i:i).eq.'  ') then\r\n       !\r\n       ! Current character is blank\r\n       !\r\n       wasblk=.true.\r\n     else\r\n       if(wasblk)  nword=nword+1\r\n       wasblk=.false.\r\n       if(nword.eq.iwrd) then\r\n         rvint=i\r\n         return\r\n       endif\r\n     endif\r\n  enddo\r\n  rvint= len(string)\r\n  return\r\n  end function"}
{"instruction": "Use Fortran to create a function that returns the index of the last non-blank character in the iwrd'th non-blank word (words are separated by spaces, tabs or commas) or returns len if the iwrd'th word is not found.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'Hello World', 1", "case2": "'Hello World', 2", "case3": "'Hello World', 3", "case4": "'Hello World', 0", "case5": "'Hello World', 10", "result": ["5", "11", "11", "11", "11"]}, "code": "function endwrd(string,iwrd) result (rvint)\r\n  character(len=*), intent(in) :: string\r\n  integer, intent(in)          :: iwrd\r\n  integer                      :: rvint\r\n  !\r\n  ! Returns the index of the last non-blank character in the iwrd'th\r\n  ! non-blank word (word are seperated by spaces, tabs or commas).\r\n  ! Returns len if iwrd'th word is not found.\r\n  !\r\n  integer   :: i, nword\r\n  logical*2 :: wasblk\r\n  intrinsic :: len\r\n  !\r\n  wasblk=.true.\r\n  nword= 0\r\n  do i=1,len(string)\r\n     if(string(i:i).eq.' ' .or. string(i:i).eq.',' .or. string(i:i).eq.'  ') then\r\n       !\r\n       ! Current character is blank\r\n       !\r\n       wasblk=.true.\r\n       if(nword.eq.iwrd) RETURN\r\n     else\r\n       if(wasblk) nword=nword+1\r\n       wasblk= .false.\r\n       if(nword.eq.iwrd) rvint=i\r\n     endif\r\n  enddo\r\n  rvint= len(string)\r\n  return\r\n  end function"}
{"instruction": "Use Fortran to create a function that takes a character array as input and returns an integer value.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'b'", "case3": "'c'", "case4": "'d'", "case5": "'e'", "result": ["14973360", "14645680", "16021936", "7502256", "15301040"]}, "code": "function gdk_keyval_from_name(keyval_name) bind(c)\nuse iso_c_binding, only: c_int, c_char\ninteger(c_int) :: gdk_keyval_from_name\ncharacter(kind=c_char), dimension(*) :: keyval_name\nend function"}
{"instruction": "Use Fortran to create a function that returns a pointer to a GdkVisual object based on the specified depth and visual type.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function gdk_visual_get_best_with_both(depth, visual_type) bind(c)\nuse iso_c_binding, only: c_ptr, c_int\ntype(c_ptr) :: gdk_visual_get_best_with_both\ninteger(c_int), value :: depth\ninteger(c_int), value :: visual_type\nend function"}
{"instruction": "Use Fortran to create a function that takes a character array and an integer as input and returns a pointer to a C integer.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello',0]", "case2": "['world',1]", "case3": "['fortran',0]", "case4": "['programming',1]", "case5": "['language',0]", "result": ["8616448", "15235584", "13728256", "13793792", "16284160"]}, "code": "function gdk_atom_intern(atom_name, only_if_exists) bind(c)\nuse iso_c_binding, only: c_ptr, c_char, c_int\ntype(c_ptr) :: gdk_atom_intern\ncharacter(kind=c_char), dimension(*) :: atom_name\ninteger(c_int), value :: only_if_exists\nend function"}
{"instruction": "Use Fortran to define a function that determines the type of angular distribution coefficients based on input values of ith, mb, and lamb.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[0,1,2]", "case2": "[1,2,3]", "case3": "[2,3,4]", "case4": "[3,4,5]", "case5": "[4,5,6]", "result": ["27", "20", "21", "21", "21"]}, "code": "function jtypa (ith, mb, lamb)\n\n! ======================================================================\n!\n!     Determining type of angular distribution coefficients a(n,k).\n!     mb = baryon number.\n!\n!    Called by: DIRECT8\n!\n!    CEM95 written by S. G. Mashnik\n!    Edited by A. J. Sierk,  LANL  T-2  February, 1996.\n!    Edited by A. J. Sierk, LANL T-16, October, 2003.\n!    Edited by AJS, LANL T-2, December, 2011.\n!\n! ======================================================================\n\n    use, intrinsic :: iso_fortran_env, only: int32\n\n    implicit none\n    integer(int32), intent(in   ) ::  ith\n    integer(int32), intent(in   ) ::  mb\n    integer(int32), intent(in   ) ::  lamb\n    integer(int32)                ::  jtypa\n\n! ======================================================================\n\n    if (ith.ne.0) then\n!   iks = 7 cross section:\n       if (mb <= 1) then\n!   pi + N:\n          if (lamb > 1) then\n             jtypa = 25\n          else\n             jtypa = 24\n          endif\n       else\n!   N + N\n          if (lamb <= 1 .or. lamb == 3) then\n             jtypa = 20\n          else\n             jtypa = 21\n          endif\n       endif\n    else\n!   iks = 4, 5, or 6 cross section:\n       if (mb <= 1) then\n!   pi + N:\n          if (lamb <= 1) then\n             jtypa = 26\n          else\n             jtypa = 27\n          endif\n       else\n!   N + N\n          if (lamb <= 1 .or. lamb == 3) then\n             jtypa = 22\n          else\n             jtypa = 23\n          endif\n       endif\n    endif\n    return\n\n! ======================================================================\n  end function"}
{"instruction": "Use Fortran to create a function that takes an array and a maximum value, and returns an array of all integers from 1 to the maximum value that are not in the input array.", "test_case": {"param_num": 2, "param_type": "integer(:),integer", "case1": "[[1,2,3],5]", "case2": "[[1,2,3,4,5],10]", "case3": "[[1,3,5,7],8]", "case4": "[[2,4,6,8,10],12]", "case5": "[[1,2,3,4,5,6,7,8,9],15]", "result": ["4           5", "6           7           8           9          10", "2           4           6           8", "1           3           5           7           9          11          12", "10          11          12          13          14          15"]}, "code": "function selectOthers(notArray, max) result(res)\n            implicit none\n            integer, dimension(:), intent(in) :: notArray\n            integer, intent(in) :: max\n            integer, dimension(:), allocatable :: res \n\n            integer :: i, numOut, index\n            numOut = max - size(notArray)\n            allocate(res(numOut))\n\n            index = 1\n            do i = 1, max \n                if(.not. any(notArray == i)) then\n                    res(index) = i\n                    index = index + 1\n                endif\n            enddo\n        end function"}
{"instruction": "Use Fortran to give me a function that returns true if lhs is not equal to rhs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,3]", "case3": "[2,2]", "case4": "[5,5]", "case5": "[0,0]", "result": ["1", "0", "0", "0", "0"]}, "code": "function ne_ii(lhs, rhs)\n    integer, intent(in) :: lhs, rhs\n    ne_ii = lhs /= rhs\n  end function"}
{"instruction": "Use Fortran to give me a function that compares two character strings and returns a logical value indicating whether they are not equal.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','fortran'", "case3": "'',''", "case4": "'abc','def'", "case5": "'123','12345'", "result": ["1", "0", "0", "1", "1"]}, "code": "function ne_aa(lhs, rhs)\n    character(len=*), intent(in) :: lhs, rhs\n    ne_aa = lhs /= rhs\n  end function"}
{"instruction": "Use Fortran to define a function that calculates the triangular factor Delta(ja,jb,jc) and returns 0 if the triangular condition fails and 1 otherwise.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[3,4,5]", "case2": "[2,2,2]", "case3": "[1,2,3]", "case4": "[5,5,5]", "case5": "[10,20,30]", "result": ["1", "1", "0", "1", "0"]}, "code": "function triangle(i2a,i2b,i2c)                          result(Delta)\n   !--------------------------------------------------------------------------------------------------------------------\n   ! Calculates the tringular factor Delta(ja,jb,jc). The arguments in this integer function are i2a = 2*ja+1, ... \n   ! The result is 0 if the triangular condition failes and 1 otherwise. \n   !--------------------------------------------------------------------------------------------------------------------\n      !\n      integer, intent(in)  :: i2a, i2b, i2c\n      integer              :: Delta, i\n      !\n      i = i2b - i2c\n      if (i2a >= abs(i) + 1  .and.   i2a <= i2b + i2c - 1) then\n         Delta = 1\n      else\n         Delta = 0\n      end if\n      !\n   end function"}
{"instruction": "Use Fortran to create a function that takes a string input and returns an integer based on the first letter of the string.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'s'", "case2": "'p'", "case3": "'d'", "case4": "'s*'", "case5": "'f'", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_principal_number(orb)\n    implicit none\n\n    character(len=*),intent(in) :: orb\n    integer(kind=4) :: get_principal_number\n    character(len=8)   :: temp\n\n    temp = trim(adjustl(orb))\n\n    if (temp(1:1) .eq. 's') then\n        get_principal_number = 1\n    else if (temp(1:1) .eq. 'p') then\n        get_principal_number = 2\n    else if (temp(1:1) .eq. 'd') then\n        get_principal_number = 3\n    end if\n        \n    if (temp(1:2) .eq. 's*') then\n        get_principal_number = 4\n    end if\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a triangle with sides i, j, and k is a right triangle.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[3,4,5]", "case2": "[5,12,13]", "case3": "[7,24,25]", "case4": "[8,15,17]", "case5": "[9,40,41]", "result": ["1", "1", "1", "1", "1"]}, "code": "function is_right_triangle(i, j, k)\n        integer, intent(in) :: i, j, k\n\n        is_right_triangle = .false.\n        if (i**2 + j**2 == k**2) then\n            is_right_triangle = .true.\n        end if\n    end function"}
{"instruction": "Use Fortran to create a function that splits a string into an array of substrings based on a given separator character.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello,world!',''", "case2": "'','/'", "case3": "'a,b,c,d,e,f,g','/'", "case4": "'',' '", "case5": "'1,2,3,4,5,6,7,8,9','/'", "result": ["", "", "", "", ""]}, "code": "function split_string(string,separator)\n        implicit none\n        character(len=*),intent(in) :: string\n        character(1),intent(in) :: separator\n        character(len=len(string)), dimension(:), allocatable :: split_string\n\n        character(len=len(string)), dimension(:), allocatable :: temp_split_string\n\n        integer :: i,j,k\n\n\n        allocate(split_string(0))\n        temp_split_string = split_string\n        i = 0\n        k = 0\n        do \n            j = index(string(i+1:),separator)\n            if(trim(adjustl(string(i+1:i+j)))=='') exit\n\n            k = k+1 \n            deallocate(split_string)\n            allocate(split_string(k))\n            split_string(:k-1) = temp_split_string\n            deallocate(temp_split_string)\n            split_string(k) = trim(adjustl(string(i+1:i+j))) \n            temp_split_string = split_string\n\n            i = i+j\n        end do\n\n    end function"}
{"instruction": "Use Fortran to create a function that returns the index of the first character in a string that is not a valid floating point number character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'+'", "case2": "'-'", "case3": "'1.23'", "case4": "'e'", "case5": "'abc'", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function foo(expr)\n    character(*), intent(in) :: expr\n    character(*), parameter  :: chrs = '-+.0123456789eEdD'\n\n    foo = index(chrs, expr)\n  end function"}
{"instruction": "Use Fortran to define a function that takes an integer array and its length as input and returns an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[1,[1,2]]", "case2": "[3,[3,4,5]]", "case3": "[2,[1,2]]", "case4": "[4,[5,4,3,2]]", "case5": "[1,[10]]", "result": ["6618572", "6618572", "6618572", "6618572", "6618572"]}, "code": "function OPS_GetIntInput(numData, iData)\n         integer       :: OPS_GetIntInput\n         integer       :: numData\n         integer       :: iData(*)\n        end function"}
{"instruction": "Use Fortran to give me a function that returns the locations of the true positions in a logical array.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.true.]", "case4": "[.false.,.true.,.false.,.true.,.false.]", "case5": "[.true.,.false.,.false.,.true.,.false.,.true.]", "result": ["1           3", "", "1           2           3           4", "2           4", "1           4           6"]}, "code": "function truloc(tf) result(ipos)\r\n! return the locations of the true positions in tf(:)\r\nlogical, intent(in) :: tf(:)\r\ninteger             :: ipos(count(tf))\r\ninteger             :: i,j,ntrue\r\nntrue = size(ipos)\r\nj = 1\r\nif (ntrue == 0) return\r\ndo i=1,size(tf)\r\n   if (tf(i)) then\r\n      ipos(j) = i\r\n      if (j == ntrue) return\r\n      j = j + 1\r\n   end if\r\nend do\r\nend function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns a real number calculated using a specific formula.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0.12500000000000000", "3.1250000000000000E-002", "5.2631578947368418E-002", "3.7037037037037035E-002", "4.1666666666666664E-002"]}, "code": "function eval_A(i, j)\nreal*8 :: eval_A\ninteger, intent(in) :: i, j\nreal*8 :: di, dj\ninteger :: d\ndi = real(i,8)\ndj = real(j,8)\neval_A = 1.d0 / (0.5d0 * ((di + dj) * (di + dj + 1.d0)) + di + 1.d0)\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a lower and upper bound using the quicksort algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["9.00000000", "13.0000000", "51.0000000", "191.000000", "15.0000000"]}, "code": "function qsort_rand( lower, upper )\n      integer               :: lower, upper\n      real(8)               :: r\n      call random_number(r)\n      qsort_rand =  lower + nint(r * (upper-lower))\n    end function"}
{"instruction": "Use Fortran to give me a function that compares two integers f and g and returns -1 if f<g and 1 if f>g.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,2]", "result": ["-1", "-1", "1", "1", "1"]}, "code": "function compare(f,g)\n      implicit none\n      integer               :: f,g\n      integer               :: compare\n      if(f<g) then\n         compare=-1\n      else\n         compare=1\n      endif\n    end function"}
{"instruction": "Use Fortran to create a function that searches for the index of the first value in an increasing array that is greater or equal to a given value.", "test_case": {"param_num": 2, "param_type": "integer(:),integer", "case1": "[[1,2,3,4,5], 3]", "case2": "[[1,2,3,4,5], 6]", "case3": "[[1,2,3,4,5], 0]", "case4": "[[1,2,3,4,5,6,7,8,9], 5]", "case5": "[[1,3,5,7,9], 4]", "result": ["3", "6", "1", "5", "3"]}, "code": "function search_sorted_first_integer(x, v) result(hi)\n    !+ Returns the index of the first value in `x` greater or equal to `v`.\n    !+ Returns `length(x)+1` if `v` is greater then all values in `x`.\n    integer, dimension(:), intent(in) :: x\n        !+ Monotonically increasing array\n    integer, intent(in)               :: v\n        !+ Value to search\n\n    integer :: hi, lo, m\n\n    lo = 0\n    hi = size(x)+1\n\n    do while (lo.lt.(hi-1))\n        m = rshift(lo+hi,1)\n        if(x(m).lt.v) then\n            lo = m\n        else\n            hi = m\n        endif\n    enddo\n\nend function"}
{"instruction": "Use Fortran to define a function that calculates nu(M,N,K) based on a specific equation in Johnson 1980, which involves factorials and a conditional statement.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[3,5,2]", "case3": "[7,3,4]", "case4": "[10,11,12]", "case5": "[6,7,8]", "result": ["-1.00000000", "3.00000000", "15.0000000", "0.00000000", "0.00000000"]}, "code": "function nu_M_N_K(M, N, K) result(nu)\n        ! Calculates nu(M,N,K) based on Eq. (D.51) in Johnson 1980\n\n        implicit none\n\n        integer,intent(in) :: M, N, K\n        real :: nu\n\n        integer :: mm, nn, kk, i\n\n        ! Check for even M or N\n        if (mod(M, 2) .eq. 0 .or. mod(N, 2) .eq. 0) then\n            nu = 0\n        else\n             \n            ! Initialize\n            mm = 1\n            nn = 1\n            kk = 1\n\n            ! Run factorials (ish. not sure what you'd call these...)\n            if (.not. M .eq. 1) then\n                do i=1,M-2,2\n                    mm = mm*i\n                end do\n            end if\n\n            if (.not. N .eq. 1) then\n                do i=1,N-2,2\n                    nn = nn*i\n                end do\n            end if\n\n            do i=K-2,K-M-N,2\n                kk = kk*i\n            end do\n\n            ! Calculate nu\n            nu = mm*nn/kk\n\n        end if\n\n    end function"}
{"instruction": "Use Fortran to concatenate two strings s1 and s2 and return the result.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','programming'", "case3": "'','fortran'", "case4": "'programming',''", "case5": "'',''", "result": ["helloworld", "fortranprogramming", "fortran", "programming", ""]}, "code": "function strcat(s1, s2) result(res)\n    character(len=*), intent(in) :: s1, s2\n    character(len=:), allocatable :: res\n    res = s1 // s2\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given string is comprised of only spaces or tabs.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'  '", "case3": "'a'", "case4": "'a b'", "case5": "'   \t   '", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_space(a)\n        !\n        !  Checks if string is comprised of just space(s)\n        !\n        !  Record of revisions:\n        !      Date       Programmer          Description of change\n        !      ====       ==========          =====================\n        !    06/26/14     K. Holcomb           Original Code\n        !\n\n        ! Data dictionary: calling arguments\n        character(len = *), intent(in) :: a ! Input string\n\n        ! Data dictionary: local variables\n        integer :: n        ! Looping index\n        integer :: numchars ! Length of string\n\n        ! Check length of string\n        numchars = len(a)\n        if (numchars == 0) then\n            is_space = .false.\n            return\n        endif\n\n        ! Cycle through characters and check for spaces\n        do n = 1, numchars\n            if (a(n:n) == ' ' .or. a(n:n) == '\\t') then\n                is_space = .true.\n            else\n                is_space = .false.\n                return\n            endif\n        enddo\n\n    end function"}
{"instruction": "This Fortran function checks if a given string is in a set of characters and returns a boolean value.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','helo'", "case2": "'world','word'", "case3": "'fortran','python'", "case4": "'123','456'", "case5": "'abc','def'", "result": ["1", "1", "1", "0", "0"]}, "code": "function is_in(string, set)\n        !checks whether input string is in set of characters\n        !Inputs:\n        !    string:  input string to check\n        !    set:     set of characters to check against\n        !Outputs:\n        !    is_in:   is string in set of characters?\n\n        character(len = *), intent(in)  :: string\n        character(len = *), intent(in)  :: set\n\n        if (scan(string, set) == 0) then\n            is_in = .false.\n        else\n            is_in = .true.\n        endif\n\n    end function"}
{"instruction": "Use Fortran to give me a function that takes in three integer inputs and returns a logical output.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["T", "T", "T", "T", "T"]}, "code": "function prc_is_allowed (flv, hel, col) result (is_allowed)\n       logical :: is_allowed\n       integer, intent(in) :: flv, hel, col\n     end function"}
{"instruction": "Use Fortran to create a function that finds the index of the first character in a string that is not in a given set of characters.", "test_case": {"param_num": 3, "param_type": "character,character,integer", "case1": "['hello','abcde',3]", "case2": "['world','12345',2]", "case3": "['','xyz',1]", "case4": "['123','456',4]", "case5": "['abc','def',0]", "result": ["T", "T", "F", "T", "T"]}, "code": "function FindFirstNotInSet(str, set, idx) result (status)\n    character(len=*), intent(in) :: str\n    character(len=*), intent(in) :: set\n    integer, intent(out) :: idx\n    logical :: status\n    integer :: i\n\n    idx = 0\n    do i = 1, len(str), 1\n      if (scan(str(i:i), set) == 0) then\n        idx = i\n        exit\n      end if\n    end do\n\n    if (0 < idx) then\n      status = .true.\n    else\n      status = .false.\n    end if\n\n  end function"}
{"instruction": "Use Fortran to create a function that renames a file using the C library function \"rename\".", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['old_file.txt','new_file.txt']", "case2": "['file1.txt','file2.txt']", "case3": "['file3.txt','file4.txt']", "case4": "['file5.txt','file6.txt']", "case5": "['file7.txt','file8.txt']", "result": ["7109120", "14711296", "15563264", "15497728", "7436800"]}, "code": "function c_rename(old_filename, new_filename) bind(c,name=\"rename\")\n        use iso_c_binding, only: c_int, c_char\n        character(kind=c_char)      :: old_filename(*)\n        character(kind=c_char)      :: new_filename(*)\n        integer(c_int)              :: c_rename\n    end function"}
{"instruction": "Use Fortran to give me a function that returns the index of the first occurrence of a given integer in an array.", "test_case": {"param_num": 2, "param_type": "integer(:),integer", "case1": "[[1,2,3,4,5],3]", "case2": "[[1,2,3,4,5],6]", "case3": "[[1,2,3,4,5],1]", "case4": "[[1,2,3,4,5],5]", "case5": "[[1,2,3,4,5],2]", "result": ["3", "0", "1", "5", "2"]}, "code": "function first_loc(v1,s1) result(s)\n  integer,dimension(:),intent(in)::v1\n  integer,intent(in)::s1\n  integer::s,i\n  s=0\n  do i=1,size(v1)\n    select case(v1(i)-s1)\n    case(0)\n      s=i\n      return\n    end select\n  end do\nend function"}
{"instruction": "Use Fortran to create a function that returns a character string, either the input string or a default string if no input is given.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'Hello', 'World'", "case2": "'Fortran', 'Programming'", "case3": "'', 'Empty'", "case4": "'Default', ''", "case5": "'Optional', 'Parameter'", "result": ["World", "Programming", "Empty", "", "Parameter"]}, "code": "function PresentDefault_S(default, S) result(Sout)\n    character(LEN=*), intent(in), target :: default\n    character(LEN=*), intent(in), target, optional :: S\n    character(LEN=:), pointer :: Sout\n\n    if (present(S)) then\n        SOut => S\n    else\n        SOut => default\n    end if\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between Nmin and Nmax.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,5]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["10", "6", "5", "170", "-1"]}, "code": "function random_integer(Nmin,Nmax)\n!==============================================================================!\n!Randomly generate an integer in the range Nmin-Nmax\n!==============================================================================!\n!Nmin           ==>minimum index value\n!Nmax           ==>maximum index value\n!a              ==>uniform pseudo-random number\n!==============================================================================!\nimplicit none\ninteger :: Nmin, Nmax, random_integer\ndouble precision :: a\n!==============================================================================!\ncall random_number(a)\nrandom_integer = floor(a*(Nmax-Nmin+1))+Nmin\nend function"}
{"instruction": "Use Fortran to create a function that takes a lowercase letter as input and returns the uppercase version of that letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'z'", "case4": "'Z'", "case5": "'1'", "result": ["'", "'", "'", "'", "'"]}, "code": "function UpperCase(letter) result(L)\r\n     character (len = *), intent (in) :: letter\r\n     character (len = 1)              :: L\r\n\r\n     character (len = 27), parameter :: Lower = \"_abcdefghijklmnopqrstuvwxyz\", &\r\n                                        Upper = \"_ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n     integer :: k\r\n\r\n     k = index(Lower, letter)\r\n     if (k > 0) then\r\n       L = Upper(k:k)\r\n     else\r\n       L = letter\r\n     end if\r\n     return\r\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the minimum number of coins needed to represent a given amount using a set of available coins.", "test_case": {"param_num": 2, "param_type": "integer, integer(:)", "case1": "[10, [1, 5, 10]]", "case2": "[25, [1, 5, 10, 25]]", "case3": "[100, [1, 2, 5, 10, 20, 50, 100]]", "case4": "[1, [1, 5, 10]]", "case5": "[0, [1, 5, 10]]", "result": ["1", "1", "1", "1", "0"]}, "code": "function nr_change_coins(amount, coins) result(nr_coins)\n        implicit none\n        integer, value :: amount\n        integer, dimension(:), intent(in) :: coins\n        integer :: nr_coins\n        integer :: coin_nr, coin\n\n        nr_coins = 0\n        do coin_nr = size(coins), 1, -1\n            coin = coins(coin_nr)\n            nr_coins = nr_coins + amount/coin\n            amount = mod(amount, coin)\n        end do\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function f(a, b) result(r)\ninteger, intent(in) :: a, b\nr = a + b\nend function"}
{"instruction": "Use Fortran to create a function that returns a value from an array based on a mode and a number.", "test_case": {"param_num": 3, "param_type": "integer(:),integer,integer", "case1": "[[1,2,3],1,2]", "case2": "[[4,5,6,7],2,3]", "case3": "[[8,9,10],1,1]", "case4": "[[11,12,13,14,15],3,4]", "case5": "[[16,17],2,1]", "result": ["2", "7", "1", "15", "17"]}, "code": "function getVarByMode(mem, mode, num) result(r)\n    integer, intent(in) :: mode, num\n    integer :: r\n    integer, dimension(:), intent(in) :: mem\n    if(mode == 1) then\n        r = num\n    else\n        r = mem(num + 1)\n    end if\n    return\n  end function"}
{"instruction": "Use Fortran to give me a function that counts the number of times a substring appears in a given string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','l'", "case2": "'world','o'", "case3": "'fortran','z'", "case4": "'','a'", "case5": "'hello',''", "result": ["1", "1", "0", "0", "0"]}, "code": "function countsubstring(s1, s2) result(c)\n      character(*), intent(in) :: s1, s2\n      integer :: c, p, posn\n\n      c = 0\n      if(len(s2) == 0) return\n      p = 1\n      do\n        posn = index(s1(p:), s2)\n        if(posn == 0) return\n        c = c + 1\n        p = p + posn + len(s2)\n      end do\n    end function"}
{"instruction": "Use Fortran to create a function that takes a lowercase character as input and returns the uppercase version of that character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'z'", "case4": "'1'", "case5": "' '", "result": ["'", "'", "'", "'", "'"]}, "code": "function uppercase(str) result (strup)\n  character(len=1), intent(in) :: str\n  character(len=1) :: strup\n  strup=str\n  if ((ichar(str) >= ichar(\"a\")) .and. (ichar(str) <= ichar(\"z\"))) then \n     strup = char(ichar(\"A\")+ichar(str)-ichar(\"a\"))\n  end if\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[21,14]", "case4": "[100,75]", "case5": "[50,30]", "result": ["5", "5", "7", "25", "10"]}, "code": "function gcd(v, t)\n  integer :: gcd\n  integer, intent(in) :: v, t\n  integer :: c, b, a\n\n  b = t\n  a = v\n  do\n     c = mod(a, b)\n     if ( c == 0) exit\n     a = b\n     b = c\n  end do\n  gcd = b ! abs(b)\nend function"}
{"instruction": "Use Fortran to define a function that returns a Kronecker delta for two input indices i and j.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,1]", "case4": "[2,1]", "case5": "[1,2]", "result": ["1.0000000000000000", "1.0000000000000000", "0.0000000000000000", "0.0000000000000000", "0.0000000000000000"]}, "code": "function deltaij(i,j)\n      integer :: i,j\n      real*8 :: deltaij\n      ! i : direcci\u00f3n del receptor {1;2} x,z\n      ! j : direcci\u00f3n de la fuente {1;2} x,z\n      \n      deltaij = real(0,8)\n      ! 1,1\n      if (i .eq. j) then\n        deltaij = real(1,8)\n!       return\n      end if\n!     print*,\"delta\",i,j,\"=\",deltaij\n      ! 3,2\n!     if ((i .eq. 3) .and. (j .eq. 2)) then\n!       deltaij = 1\n!       return\n!     end if \n      end function"}
{"instruction": "Use Fortran to create a function that returns the value of the third peg in a Towers of Hanoi puzzle given the starting and ending pegs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "-1", "1", "0", "0"]}, "code": "function get_aux_stack(from, to) result(aux)\n        implicit none\n        integer, value :: from, to\n        integer :: aux\n\n        aux = 6 - from - to\n    end function"}
{"instruction": "Use Fortran to define a function that calculates the Cauchy prior distribution given a random number r, location parameter x0, and scale parameter gamma.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[1.0,2.0,3.0]", "case2": "[0.5,1.0,0.1]", "case3": "[0.0,0.0,1.0]", "case4": "[0.25,0.5,2.0]", "case5": "[0.75,1.0,0.5]", "result": ["-68631995.286569372", "1.0000000000000000", "22877332.428856459", "-1.5000000874227819", "1.5000000218556955"]}, "code": "function CauchyPrior(r,x0,gamma)\n\n      \timplicit none\n\n      \tdouble precision r,x0,gamma,CauchyPrior\n      \treal Pi\n      \tparameter(Pi=3.141592654)\n\n      \tCauchyPrior=x0+gamma*tan(Pi*(r-0.5))\n\nend function"}
{"instruction": "Use Fortran to give me a function that generates an array of equally spaced numbers between a start and stop value with a specified number of elements.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,5]", "case2": "[0.0,10.0,3]", "case3": "[1.0,5.0,1]", "case4": "[0.0,1.0,0]", "case5": "[1.0,2.0,0]", "result": ["1.0000000000000000        1.2500000000000000        1.5000000000000000        1.7500000000000000        2.0000000000000000", "0.0000000000000000        5.0000000000000000        10.000000000000000", "", "", ""]}, "code": "function linspace(start,stop,num,istart,iend,mesh) result(array)\n    real(8)          :: start,stop,step,array(num)\n    integer          :: num,i\n    logical,optional :: istart,iend\n    logical          :: startpoint_,endpoint_\n    real(8),optional :: mesh\n    if(num<0)stop \"linspace: N<0, abort.\"\n    startpoint_=.true.;if(present(istart))startpoint_=istart\n    endpoint_=.true.;if(present(iend))endpoint_=iend\n    if(startpoint_.AND.endpoint_)then\n       if(num<2)stop \"linspace: N<2 with both start and end points\"\n       step = (stop-start)/real(num-1,8)\n       forall(i=1:num)array(i)=start + real(i-1,8)*step\n    elseif(startpoint_.AND.(.not.endpoint_))then\n       step = (stop-start)/real(num,8)\n       forall(i=1:num)array(i)=start + real(i-1,8)*step\n    elseif(.not.startpoint_.AND.endpoint_)then\n       step = (stop-start)/real(num,8)\n       forall(i=1:num)array(i)=start + real(i,8)*step\n    else\n       step = (stop-start)/real(num+1,8)\n       forall(i=1:num)array(i)=start + real(i,8)*step\n    endif\n    if(present(mesh))mesh=step\n  end function"}
{"instruction": "Use Fortran to define a function that reads the dimensions of a tiling grid from an environment variable and returns a logical value indicating success or failure.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[0,0]", "case3": "[100,200]", "case4": "[999,888]", "case5": "[1,1]", "result": ["F", "F", "F", "F", "F"]}, "code": "function get_grid_dims(nx, ny) result(success)\n    implicit none\n    integer, intent(inout) :: nx, ny\n    logical :: success\n    character(len=20) :: lstr\n    integer :: idx, ierr\n\n    success = .FALSE.\n\n    call get_environment_variable(NAME='GOCEAN_OMP_GRID', VALUE=lstr, &\n                                  STATUS=ierr)\n\n    if(ierr /= 0)return\n\n    ! We expect the string to have the format 'AxB' where A and B are\n    ! integers.\n    idx = index(lstr, 'x')\n    if(idx == 0)then\n       write (*,\"(/'shallow_omp_mod::get_grid_dims: failed to parse ' &\n                 &  'GOCEAN_OMP_GRID string: ',(A))\") TRIM(lstr)\n       write (*,\"('   -  will use defaults for dimensions of tiling grid')\")\n       return\n    endif\n\n    read(lstr(1:idx-1),*,iostat=ierr) nx\n    if(ierr /= 0)return\n\n    read(lstr(idx+1:),*,iostat=ierr) ny\n    if(ierr == 0)success = .TRUE.\n\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a spin-orbital given the spin and orbital indices.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[4,2]", "case4": "[5,5]", "case5": "[10,3]", "result": ["", "", "", "", ""]}, "code": "function so2j_index(ispin,iorb) result(isporb)\n    integer :: ispin,iorb\n    integer :: isporb\n    if(iorb>Norb)stop \"error so2j_index: iorb>Norb\"\n    if(ispin>Nspin)stop \"error so2j_index: ispin>Nspin\"\n    isporb=(ispin-1)*Nspin + iorb\n  end function"}
{"instruction": "Use Fortran to define a function that returns the global domain size in x and y dimensions and sets the value of ret to 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[0,0]", "case3": "[100,200]", "case4": "[500,1000]", "case5": "[999,888]", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_domain_size(x_, y_) result(ret)\n  integer :: ret\n  integer, intent(out) :: x_, y_\n  x_ = nx_global\n  y_ = ny_global\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that sets the value of an element in an array to a given value.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,0.5]", "case2": "[3,1.0]", "case3": "[2,2.5]", "case4": "[5,3.14]", "case5": "[10,4.2]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_dz(k, dz_) result(ret)\n  integer :: ret\n  integer, intent(in) :: k\n  real*8, intent(in) :: dz_\n  dz(k)=dz_\n  ret=0\nend function"}
{"instruction": "Use Fortran to give me a function that calculates a specific mathematical formula using two input values.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[0.0,0.0]", "case4": "[-1.0,1.0]", "case5": "[2.5,-3.5]", "result": ["-0.750000000", "-2.00000000", "0.00000000", "0.00000000", "-1.50000000"]}, "code": "function sedlo(a,b) result(c)\n\timplicit none\n\treal,intent(in) :: a,b\n\treal :: c\n\tc = (a*a-b*b)/4\nend function"}
{"instruction": "Use Fortran to give me a function that returns an array of integers from 1 to n excluding the elements in the input array.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[5,[1,3]]", "case2": "[10,[2,4,6,8]]", "case3": "[7,[1,2,3,4]]", "case4": "[3,[1,2,3]]", "case5": "[6,[2,4,6]]", "result": ["2           4           5", "1           3           5           7           9          10", "5           6           7", "", "1           3           5"]}, "code": "function i_null(n, index) result(non)\n    integer, intent(in) :: n, index(:)\n    integer, allocatable :: non(:)\n    integer i, k, nk\n    nk = size(index)\n    k = 0\n    allocate(non(n-nk))\n    do i=1, n\n        if ( any(index==i) ) then\n        else\n            k = k + 1\n            non(k) = i\n        end if\n    end do\n    end function"}
{"instruction": "Use Fortran to create a function that takes a character string and an integer, concatenates them, and returns the result as a new string.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',12345", "case2": "'world',67890", "case3": "'fortran',9876", "case4": "'test',54321", "case5": "'code',24680", "result": ["hello12345", "world67890", "fortran09876", "test54321", "code24680"]}, "code": "function unique(name,myid)\n    character (len=*) name\n    character (len=20) unique\n    character (len=80) temp\n    integer myid\n    write(temp,\"(a,i5.5)\")trim(name),myid\n    unique=temp\n    return\nend function"}
{"instruction": "Use Fortran to create a function that takes in two integer inputs, N and ne, and returns a connectivity matrix of size (N+1,ne).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[5,15]", "case3": "[100,200]", "case4": "[0,0]", "case5": "[1,1]", "result": ["7668048           0     7699648           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0  -184549131       54502     7668048           0     7668048           0 -1310841488       32764 -1310749232       32764           0           0  -234880782       54501     7668048           0     7668048           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "15761312           0    15728976           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0", "15597904           0    15630272           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "", "8224672           0"]}, "code": "function connectivity_matrix(N,ne)\n            integer, intent(in)                                :: N, ne\n            integer connectivity_matrix(N+1,ne)\n        end function"}
{"instruction": "Use Fortran to create a function that takes in two integer inputs, N and ne, and returns a connectivity matrix of size (N+1,ne).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[5,15]", "case3": "[100,200]", "case4": "[0,0]", "case5": "[1,1]", "result": ["7995728           0     8027328           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0  -184549131       60715     7995728           0     7995728           0 -1310841488       32764 -1310749232       32764           0           0  -234880782       60712     7995728           0     7995728           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "13074336           0    13042000           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0", "8061264           0     8093632           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "", "7438240           0"]}, "code": "function connectivity_matrix(N,ne)\n            integer, intent(in)                                :: N, ne\n            integer connectivity_matrix(N+1,ne)\n        end function"}
{"instruction": "Use Fortran to create a new spinbox widget with minimum and maximum values specified by uimin and uimax, and return a pointer to the widget.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function uiNewSpinbox(uimin, uimax) result(ret)  BIND(C, name='uiNewSpinbox')\n    use iso_c_binding\n    integer(c_int), value :: uimin, uimax\n    type(c_ptr) :: ret\n  end function"}
{"instruction": "Use Fortran to create a new slider with minimum value uimin and maximum value uimax.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function uiNewSlider(uimin, uimax) result(ret)  BIND(C, name='uiNewSlider')\n    use iso_c_binding\n    integer(c_int), value :: uimin, uimax\n    type(c_ptr) :: ret\n  end function"}
{"instruction": "Use Fortran to create a function that returns an absolute path by concatenating a relative path with a top-level path.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','/home/user/'", "case2": "'../file.txt','/home/user/'", "case3": "'file.txt','/home/user/documents/'", "case4": "'file.txt','/home/user/documents/'", "case5": "'file.txt','/home/user/documents/'", "result": ["", "", "", "", ""]}, "code": "function make_absolute(path, top_path)\n!! if path is absolute, return expanded path\n!! if path is relative, top_path / path\n!!\n!! idempotent iff top_path is absolute\n\ncharacter(:), allocatable :: make_absolute\ncharacter(*), intent(in) :: path, top_path\nend function"}
{"instruction": "Use Fortran to create a function that returns the relative path of b with respect to a, or an empty string if b is not a subpath of a.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'path/to/a/file','path/to/a/file'", "case2": "'path/to/a/file','path/to/another/file'", "case3": "'path/to/a/file','path/to/a/directory/'", "case4": "'path/to/a/file','path/to/a/directory'", "case5": "'path/to/a/file','path/to/a/directory/../file'", "result": ["", "", "", "", ""]}, "code": "function relative_to(a, b)\n!! returns b relative to a\n!! if b is not a subpath of a, returns \"\" empty string\n!!\n!! reference: C++ filesystem relative\n!! https://en.cppreference.com/w/cpp/filesystem/relative\n\ncharacter(*), intent(in) :: a, b\ncharacter(:), allocatable :: relative_to\nend function"}
{"instruction": "Use Fortran to create a function that replaces the suffix of a file path with a new suffix.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','new.txt'", "case2": "'file.dat','new.dat'", "case3": "'file.txt','new.dat'", "case4": "'file.dat','new.txt'", "case5": "'file.txt','new'", "result": ["", "", "", "", ""]}, "code": "function with_suffix(path, new)\n!! replace file suffix with new suffix\ncharacter(*), intent(in) :: path,new\ncharacter(:), allocatable :: with_suffix\nend function"}
{"instruction": "Use Fortran to give me a function for the exponential integral function of order n and argument x.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[0,0.5]", "case2": "[1,1.0]", "case3": "[2,2.5]", "case4": "[3,3.0]", "case5": "[4,4.5]", "result": ["1.2130613194252668", "0.21938393439552312", "1.9797703948200993E-002", "8.9306465560178017E-003", "1.3743407967380626E-003"]}, "code": "function expint_1(n,x) result(expint)\n    implicit none\n    integer,intent(in) :: n\n    real(8),intent(in) :: x\n    real(8) :: expint\n    integer,parameter :: maxit=200\n    real(8),parameter :: esp=1.d-12, big=huge(x)*esp\n    real(8),parameter :: euler=0.577215664901532860606512d0\n    integer :: i,nm1,j\n    real(8) :: a,b,c,d,del,fact,h,arsum\n \n    if ( .not.(n>=0.and.x>=0.d0.and.(x>0.d0.or.n>1)) ) then\n       write(*,*) 'Bad arguments in expint.f'\n       stop\n    end if\n \n    if ( n==0 ) then\n       expint=exp(-x)/x\n       return\n    end if\n    nm1=n-1\n    if ( x==0.d0 ) then\n       expint=1.d0/nm1\n    else if ( x>1.d0 ) then\n       b=x+n\n       c=big\n       d=1.d0/b\n       h=d\n       do i=1,maxit\n          a=-i*(nm1+i)\n          b=b+2.d0\n          d=1.d0/(a*d+b)\n          c=b+a/c\n          del=c*d\n          h=h*del\n          if ( abs(del-1.d0)<=esp ) exit\n       end do\n       if ( i>maxit ) then\n          write(*,*) 'Continued fraction failed in expint.f'\n          stop\n       end if\n       expint=h*exp(-x)\n    else\n       if ( nm1/=0 ) then\n          expint=1.d0/nm1\n       else\n          expint=-log(x)-euler\n       end if\n       fact=1.d0\n       do i=1,maxit\n          fact=-fact*x/i\n          if ( i/=nm1 ) then\n             del=-fact/(i-nm1)\n          else\n             arsum = 0.d0\n             do j=1,nm1\n                arsum = arsum + 1.d0/j\n             end do\n             del = fact*(-LOG(x)-euler+arsum)\n          end if\n          expint=expint+del\n          if ( abs(del)<abs(expint)*esp ) exit\n       end do\n       if ( i>maxit ) then\n          write(*,*) 'series failed in expint.f'\n          stop\n       end if\n    end if\n\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the minimum number of digits required to represent a given number in a given base.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,2]", "case2": "[100,10]", "case3": "[1000,16]", "case4": "[255,8]", "case5": "[65535,2]", "result": ["4", "3", "3", "3", "16"]}, "code": "function MinLen(n, base)\n    implicit none\n    ! Passed parameters\n    integer, intent(in) :: n, base\n    ! Returned value\n    integer :: MinLen\n    ! local variable\n    integer :: num\n    num = n\n    MinLen = 1\n    do while (num >= base)\n       num = num / base\n       MinLen = MinLen + 1\n    end do\n  end function"}
{"instruction": "Use Fortran to create a function that converts an integer to a string with an optional width parameter.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[0,5]", "case2": "[100,-10]", "case3": "[123456789,10]", "case4": "[-987654321,15]", "case5": "[0,3]", "result": ["0", "100", "123456789", "-987654321", "0"]}, "code": "function to_string(val, width) result(string)\n    integer, intent(in) :: val\n    integer, intent(in), optional :: width\n    character(len=:), allocatable :: string\n    integer, parameter :: buffer_len = range(val)+2\n    character(len=buffer_len) :: buffer\n    integer :: pos\n    integer :: n\n    character(len=1), parameter :: numbers(0:9) = &\n      [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\n    if (val == 0) then\n      string = numbers(0)\n      return\n    end if\n\n    n = abs(val)\n    buffer = \"\"\n\n    pos = buffer_len + 1\n    do while (n > 0)\n      pos = pos - 1\n      buffer(pos:pos) = numbers(mod(n, 10))\n      n = n/10\n    end do\n    if (val < 0) then\n      pos = pos - 1\n      buffer(pos:pos) = '-'\n    end if\n\n    if (present(width)) then\n      string = repeat(\" \", max(width-(buffer_len+1-pos), 0)) // buffer(pos:)\n    else\n      string = buffer(pos:)\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that adds two real numbers and binds it to a C function named \"fortranAdd\".", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.5]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["3.0000000000000000", "8.0000000000000000", "5.5000000000000000", "6.0000000000000000", "6.5000000000000000"]}, "code": "function add(x, y) bind(c, name = 'fortranAdd') result(z)\n\tuse iso_c_binding\n\treal(c_double) :: x, y, z\n    z = x + y\nend function"}
{"instruction": "Use Fortran to define a function that scans two strings and returns the result with a specified kind.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','language'", "case3": "'test','cases'", "case4": "'foo','bar'", "case5": "'alpha','beta'", "result": ["3.00000000", "6.00000000", "2.00000000", "0.00000000", "1.00000000"]}, "code": "function scan_test(s1, s2)\ncharacter(*) :: s1, s2\n! CHECK: %[[tmpBox:.*]] = fir.alloca !fir.box<!fir.heap<i32>>\n! CHECK-DAG: %[[c:.*]]:2 = fir.unboxchar %[[s]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n! CHECK-DAG: %[[cBox:.*]] = fir.embox %[[c]]#0 typeparams %[[c]]#1 : (!fir.ref<!fir.char<1,?>>, index) -> !fir.box<!fir.char<1,?>>\n! CHECK-DAG: %[[cBoxNone:.*]] = fir.convert %[[cBox]] : (!fir.box<!fir.char<1,?>>) -> !fir.box<none>\n! CHECK-DAG: %[[c2:.*]]:2 = fir.unboxchar %[[ss]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n! CHECK-DAG: %[[cBox2:.*]] = fir.embox %[[c2]]#0 typeparams %[[c2]]#1 : (!fir.ref<!fir.char<1,?>>, index) -> !fir.box<!fir.char<1,?>>\n! CHECK-DAG: %[[cBoxNone2:.*]] = fir.convert %[[cBox2]] : (!fir.box<!fir.char<1,?>>) -> !fir.box<none>\n! CHECK-DAG: %[[backOptBox:.*]] = fir.absent !fir.box<i1>\n! CHECK-DAG: %[[backBox:.*]] = fir.convert %[[backOptBox]] : (!fir.box<i1>) -> !fir.box<none>\n! CHECK-DAG: %[[kindConstant:.*]] = arith.constant 4 : i32\n! CHECK-DAG: %[[resBox:.*]] = fir.convert %[[tmpBox:.*]] : (!fir.ref<!fir.box<!fir.heap<i32>>>) -> !fir.ref<!fir.box<none>>\n! CHECK: fir.call @{{.*}}Scan(%[[resBox]], %[[cBoxNone]], %[[cBoxNone2]], %[[backBox]], %[[kindConstant]], {{.*}}) : (!fir.ref<!fir.box<none>>, !fir.box<none>, !fir.box<none>, !fir.box<none>, i32, !fir.ref<i8>, i32) -> none\nscan_test = scan(s1, s2, kind=4)\n! CHECK-DAG: %[[tmpAddr:.*]] = fir.box_addr\n! CHECK: fir.freemem %[[tmpAddr]]\nend function"}
{"instruction": "Use Fortran to define a function that performs a character-by-character comparison of two strings and returns a logical array indicating the positions where the strings differ.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','code'", "case3": "'test','cases'", "case4": "'parameter','selection'", "case5": "'list','types'", "result": ["5.00000000", "2.00000000", "3.00000000", "8.00000000", "4.00000000"]}, "code": "function scan_test2(s1, s2)\ncharacter(*) :: s1, s2\n! CHECK: %[[st:[^:]*]]:2 = fir.unboxchar %[[s]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n! CHECK: %[[sst:[^:]*]]:2 = fir.unboxchar %[[ss]] : (!fir.boxchar<1>) -> (!fir.ref<!fir.char<1,?>>, index)\n! CHECK: %[[a1:.*]] = fir.convert %[[st]]#0 : (!fir.ref<!fir.char<1,?>>) -> !fir.ref<i8>\n! CHECK: %[[a2:.*]] = fir.convert %[[st]]#1 : (index) -> i64\n! CHECK: %[[a3:.*]] = fir.convert %[[sst]]#0 : (!fir.ref<!fir.char<1,?>>) -> !fir.ref<i8>\n! CHECK: %[[a4:.*]] = fir.convert %[[sst]]#1 : (index) -> i64\n! CHECK: = fir.call @_FortranAScan1(%[[a1]], %[[a2]], %[[a3]], %[[a4]], %{{.*}}) : (!fir.ref<i8>, i64, !fir.ref<i8>, i64, i1) -> i64\nscan_test2 = scan(s1, s2, .true.)\nend function"}
{"instruction": "Use Fortran to define a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["1.00000000", "1.00000000", "1.00000000", "1.00000000", "1.00000000"]}, "code": "function qtools_Dij(i,j) result(rval)\n    integer :: i,j\n    rval = 0\n    if(i==j) rval = 1\nend function"}
{"instruction": "Use Fortran to create a function that finds the index of the first occurrence of a substring within a string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world','world'", "case2": "'fortran is fun','is'", "case3": "'testing','test'", "case4": "'','test'", "case5": "'fortran','fort'", "result": ["7", "9", "1", "0", "1"]}, "code": "function index(string_, substring_) result(idx)\ncharacter(len=*), intent(in) :: string_\ncharacter(len=*), intent(in) :: substring_\ninteger :: i, j, k, pos\nlogical :: found\nfound = .true.\nidx = 0\ni = 1\ndo while (i < len(string_) .and. found)\n    k = 0\n    j = 1\n    do while (j < len(substring_) .and. found)\n        pos = i + k\n        if( string_(pos:pos) /= substring_(j:j) ) then\n            found = .false.\n        end if\n        k = k + 1\n        j = j + 1\n    end do\n    if( found ) then\n        idx = i\n        found = .false.\n    else\n        found = .true.\n    end if\n    i = i + 1\nend do\nend function"}
{"instruction": "Use Fortran to create a function that converts a specified range of characters in a string to lowercase.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "'Hello World',1,5", "case2": "'Fortran is Fun',7,9", "case3": "'Testing',2,6", "case4": "'123456789',3,8", "case5": "'Testing',1,7", "result": ["hello World", "Fortran is Fun", "Testing", "123456789", "testing"]}, "code": "function lower(str,begin,end) result (string)\n    ! Changes a string to lowercase over specified range\n    ! Author: John S. Urban\n    ! License: Public Domain\n\n    character(*), intent(In)     :: str\n    character(len(str))          :: string\n    integer,intent(in),optional  :: begin, end\n    integer                      :: i\n    integer                      :: ibegin, iend\n    string = str\n\n    ibegin = 1\n    if (present(begin))then\n        ibegin = max(ibegin,begin)\n    endif\n\n    iend = len_trim(str)\n    if (present(end))then\n        iend= min(iend,end)\n    endif\n\n    do i = ibegin, iend                               ! step thru each letter in the string in specified range\n        select case (str(i:i))\n        case ('A':'Z')\n            string(i:i) = char(iachar(str(i:i))+32)     ! change letter to miniscule\n        case default\n        end select\n    end do\n\nend function"}
{"instruction": "Use Fortran to give me a function that compares two text strings, one of which can have wildcards ('*' or '?').", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','hello']", "case2": "['hello','h*llo']", "case3": "['hello','h?llo']", "case4": "['hello','h*l?o']", "case5": "['hello','h*llo*']", "result": ["T", "T", "T", "T", "T"]}, "code": "function matchw(tame,wild)\n\ncharacter(len=*),parameter::ident_6=\"&\n&@(#)M_strings::matchw(3f): function compares text strings, one of which can have wildcards ('*' or '?').\"\n\nlogical                    :: matchw\ncharacter(len=*)           :: tame       ! A string without wildcards\ncharacter(len=*)           :: wild       ! A (potentially) corresponding string with wildcards\ncharacter(len=len(tame)+1) :: tametext\ncharacter(len=len(wild)+1) :: wildtext\ncharacter(len=1),parameter :: NULL=char(0)\ninteger                    :: wlen\ninteger                    :: ti, wi\ninteger                    :: i\ncharacter(len=:),allocatable :: tbookmark, wbookmark\n! These two values are set when we observe a wildcard character.  They\n! represent the locations, in the two strings, from which we start once we've observed it.\n   tametext=tame//NULL\n   wildtext=wild//NULL\n   tbookmark = NULL\n   wbookmark = NULL\n   wlen=len(wild)\n   wi=1\n   ti=1\n   do                                            ! Walk the text strings one character at a time.\n      if(wildtext(wi:wi) == '*')then             ! How do you match a unique text string?\n         do i=wi,wlen                            ! Easy: unique up on it!\n            if(wildtext(wi:wi).eq.'*')then\n               wi=wi+1\n            else\n               exit\n            endif\n         enddo\n         if(wildtext(wi:wi).eq.NULL) then        ! \"x\" matches \"*\"\n            matchw=.true.\n            return\n         endif\n         if(wildtext(wi:wi) .ne. '?') then\n            ! Fast-forward to next possible match.\n            do while (tametext(ti:ti) .ne. wildtext(wi:wi))\n               ti=ti+1\n               if (tametext(ti:ti).eq.NULL)then\n                  matchw=.false.\n                  return                         ! \"x\" doesn't match \"*y*\"\n               endif\n            enddo\n         endif\n         wbookmark = wildtext(wi:)\n         tbookmark = tametext(ti:)\n      elseif(tametext(ti:ti) .ne. wildtext(wi:wi) .and. wildtext(wi:wi) .ne. '?') then\n         ! Got a non-match.  If we've set our bookmarks, back up to one or both of them and retry.\n         if(wbookmark.ne.NULL) then\n            if(wildtext(wi:).ne. wbookmark) then\n               wildtext = wbookmark;\n               wlen=len_trim(wbookmark)\n               wi=1\n               ! Don't go this far back again.\n               if (tametext(ti:ti) .ne. wildtext(wi:wi)) then\n                  tbookmark=tbookmark(2:)\n                  tametext = tbookmark\n                  ti=1\n                  cycle                          ! \"xy\" matches \"*y\"\n               else\n                  wi=wi+1\n               endif\n            endif\n            if (tametext(ti:ti).ne.NULL) then\n               ti=ti+1\n               cycle                             ! \"mississippi\" matches \"*sip*\"\n            endif\n         endif\n         matchw=.false.\n         return                                  ! \"xy\" doesn't match \"x\"\n      endif\n      ti=ti+1\n      wi=wi+1\n      if (tametext(ti:ti).eq.NULL) then          ! How do you match a tame text string?\n         if(wildtext(wi:wi).ne.NULL)then\n            do while (wildtext(wi:wi) == '*')    ! The tame way: unique up on it!\n               wi=wi+1                           ! \"x\" matches \"x*\"\n               if(wildtext(wi:wi).eq.NULL)exit\n            enddo\n         endif\n         if (wildtext(wi:wi).eq.NULL)then\n            matchw=.true.\n            return                               ! \"x\" matches \"x\"\n         endif\n         matchw=.false.\n         return                                  ! \"x\" doesn't match \"xy\"\n      endif\n   enddo\nend function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is a printable ASCII character excluding space.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'1'", "case4": "'?'", "case5": "'/'", "result": ["T", "T", "T", "T", "T"]}, "code": "function isgraph(onechar)\n\ncharacter(len=*),parameter::ident_59=\"&\n&@(#)M_strings::isgraph(3f) :indicates if character is printable ASCII character excluding space\"\n\ncharacter,intent(in) :: onechar\nlogical              :: isgraph\n   select case (iachar(onechar))\n   case (33:126)\n     isgraph=.TRUE.\n   case default\n     isgraph=.FALSE.\n   end select\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if the input character is a letter and false otherwise.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isalpha(ch) result(res)\n\ncharacter(len=*),parameter::ident_60=\"@(#)M_strings::isalpha(3f): Return .true. if character is a letter and .false. otherwise\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case('A':'Z','a':'z')\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if the input character is a hexadecimal digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'a'", "case3": "'5'", "case4": "'G'", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isxdigit(ch) result(res)\n\ncharacter(len=*),parameter::ident_61=\"@(#)M_strings::isxdigit(3f): returns .true. if c is a hexadecimal digit (0-9,a-f, or A-F)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case('A':'F','a':'f','0':'9')\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if the input character is a blank (space or horizontal tab).", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'\\t'", "case3": "'a'", "case4": "'1'", "case5": "'&'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isblank(ch) result(res)\n\ncharacter(len=*),parameter::ident_63=\"@(#)M_strings::isblank(3f): returns .true. if character is a blank (space or horizontal tab)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case(' ',char(9))\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if the input character is in the range of ASCII characters from 0 to 127.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'A'", "case3": "' '", "case4": "'%'", "case5": "'\\n'", "result": ["T", "T", "T", "T", "T"]}, "code": "function isascii(ch) result(res)\n\ncharacter(len=*),parameter::ident_64=\"@(#)M_strings::isascii(3f): returns .true. if character is in the range char(0) to char(127)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ichar(ch))\n   case(0:127)\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if the input character is a space, tab, return, new line, vertical tab, or formfeed.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a'", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isspace(ch) result(res)\n\ncharacter(len=*),parameter::ident_65=\"@(#)M_strings::isspace(3f): true if null,space,tab,return,new line,vertical tab, or formfeed\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case(' ')                 ! space(32)\n     res=.true.\n   case(char(0))             ! null(0)\n     res=.true.\n   case(char(9):char(13))    ! tab(9), new line(10), vertical tab(11), formfeed(12), carriage return(13),\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a delete or ordinary control character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["F", "F", "F", "F", "F"]}, "code": "function iscntrl(ch) result(res)\n\ncharacter(len=*),parameter::ident_66=\"@(#)M_strings::iscntrl(3f): true if a delete or ordinary control character(0x7F or 0x00-0x1F)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case(char(127),char(0):char(31))\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a printable punctuation character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'A'", "case3": "' '", "case4": "'?'", "case5": "'/'", "result": ["T", "T", "T", "T", "T"]}, "code": "function ispunct(ch) result(res)\n\ncharacter(len=*),parameter::ident_67=\"@(#)M_strings::ispunct(3f): true if a printable punctuation character (isgraph(c)&&\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case (char(33):char(47), char(58):char(64), char(91):char(96), char(123):char(126))\n     res=.true.\n!  case(' ','0':'9','A':'Z','a':'z',char(128):)\n!    res=.true.\n!  case(char(0):char(31),char(127))\n!    res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is an uppercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'a'", "case3": "'Z'", "case4": "'z'", "case5": "'1'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isupper(ch) result(res)\n\ncharacter(len=*),parameter::ident_68=\"@(#)M_strings::isupper(3f): returns true if character is an uppercase letter (A-Z)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case('A':'Z')\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a lowercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'Z'", "case3": "'1'", "case4": "' '", "case5": "'b'", "result": ["F", "F", "F", "F", "F"]}, "code": "function islower(ch) result(res)\n\ncharacter(len=*),parameter::ident_69=\"@(#)M_strings::islower(3f): returns true if character is a miniscule letter (a-z)\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case('a':'z')\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that converts a given integer to a string representation in a given base.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[2,10]", "case2": "[16,255]", "case3": "[8,63]", "case4": "[3,7]", "case5": "[5,31]", "result": ["1010", "ff", "77", "21", "111"]}, "code": "function tobase(base, number)\n\ncharacter(len=*),parameter::ident_75=\"@(#)M_strings::todecimal(3f): given integer and base return string\"\n\n! based on an example at rosetta code.\ncharacter(len=36),parameter  :: alphanum = \"0123456789abcdefghijklmnopqrstuvwxyz\"\ninteger,intent(in)           :: base\ninteger,intent(in)           :: number\ncharacter(len=:),allocatable :: tobase\ncharacter(len=31)            :: holdit\ninteger                      :: number_local, i, rem\n   number_local=number\n\n   holdit = \"                               \"\n   do i = 31, 1, -1\n      if(number_local < base) then\n         holdit(i:i) = alphanum(number_local+1:number_local+1)\n         exit\n      endif\n      rem = mod(number_local, base)\n      holdit(i:i) = alphanum(rem+1:rem+1)\n      number_local = number_local / base\n   enddo\n   tobase = adjustl(holdit)\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.00000000", "7.00000000", "2.00000000", "6.00000000", "6.00000000"]}, "code": "function sum(a, b) result(res)\n  ! Version 3 of the example sum function.\n  ! Listing 3.6 in the book.\n  integer, intent(in) :: a, b\n  res = a + b\nend function"}
{"instruction": "Use Fortran to create a function that takes in a day, month, and days in a year and returns the day of the year, accounting for leap years.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,365]", "case2": "[15,6,366]", "case3": "[31,12,365]", "case4": "[29,2,366]", "case5": "[30,4,365]", "result": ["1.00000000", "167.000000", "365.000000", "60.0000000", "120.000000"]}, "code": "function DAY_OF_YEAR_FN(DD,MM,DAYSINYEAR)\r\n!**********************************************************************!\r\ninteger ::DAYSINYEAR, LEAPSHIFT\r\ninteger ::DD, MM, JUL\r\n!**   returns the day of the year given the month day and year.\r\n!**   checks for leap year using DAYS_IN_YEAR\r\n!**   \r\n!**   These are NOT JULIAN dates (although people often refer mistakenly  \r\n!**   as such).                                                           \r\n\tLEAPSHIFT = 0\r\n\tif(DAYSINYEAR==366) LEAPSHIFT=1\r\n\tif(MM==1) then                                                    \r\n\t  JUL = DD                                                        \r\n\telse if(MM==2) then    \r\n\t  JUL = 31+DD                                                     \r\n\telse if(MM==3) then                                               \r\n\t  JUL = 31+28+DD + LEAPSHIFT\r\n\telse if(MM==4) then                                                \r\n\t  JUL = 31+28+31+DD + LEAPSHIFT\r\n\telse if(MM==5) then\r\n\t  JUL = 31+28+31+30+DD + LEAPSHIFT\r\n\telse if(MM==6) then \r\n\t  JUL = 31+28+31+30+31+DD + LEAPSHIFT\r\n\telse if(MM==7) then     \r\n\t  JUL = 31+28+31+30+31+30+DD + LEAPSHIFT\r\n\telse if(MM==8) then \r\n\t  JUL = 31+28+31+30+31+30+31+DD + LEAPSHIFT\r\n\telse if(MM==9) then \r\n\t  JUL = 31+28+31+30+31+30+31+31+DD + LEAPSHIFT\r\n\telse if(MM==10) then \r\n\t  JUL = 31+28+31+30+31+30+31+31+30+DD + LEAPSHIFT\r\n\telse if(MM==11) then \r\n\t  JUL = 31+28+31+30+31+30+31+31+30+31+DD + LEAPSHIFT\r\n\telse if(MM==12) then\r\n\t  JUL = 31+28+31+30+31+30+31+31+30+31+30+DD + LEAPSHIFT\r\n\tendif \r\n\tDAY_OF_YEAR_FN = JUL\r\n!\r\n!//! Equation: 8\r\n!//! Description: finds the day of the year, starting with Jan 1 =1 \\\\\r\n!//!   INPUTS: Day of Month; Month of year (numeric); Days in Year\r\n!//! Bibliography: No Specific reference to this function.\r\n!\r\n!//! E:   DoY = \\sum_{i=0}^{mon-1} Dm_{i} + dd\r\n!   \r\n!//! Variable: DoY      \r\n!//! Description:   Day of the year \r\n!//! Units: none         \r\n!//! SET\r\n!//! Type: integer ::\r\n!\r\n!//! Variable: mon      \r\n!//! Description:  month number \r\n!//! Units: none         \r\n!//! Type: integer ::\r\n!\r\n!//! Variable: Dm_{i}\r\n!//! Description:  Days in month (i) \r\n!//! Units: none         \r\n!//! Type: integer ::\r\n!\r\n!//! Variable: dd       \r\n!//! Description:   day of the current month\r\n!//! Units: none         \r\n!//! Type: integer ::\r\n!\r\n!**********************************************************************!\r\nend function"}
{"instruction": "Use Fortran to create a function that returns the number of days in a month, taking into account leap years.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,365]", "case2": "[2,365]", "case3": "[6,366]", "case4": "[9,365]", "case5": "[12,366]", "result": ["31.0000000", "28.0000000", "30.0000000", "30.0000000", "31.0000000"]}, "code": "function DAYS_IN_MONTH_FN(MM, DAYSINYEAR)\r\n!**********************************************************************!\r\ninteger ::DAYSINYEAR, MM, LEAPSHIFT\r\n!**   returns the day number of days in a month (allows for leap year).\r\n\r\n\tLEAPSHIFT=DAYSINYEAR-365\r\n\tif(MM==1) then                                                    \r\n\t  DAYS_IN_MONTH_FN = 31                                           \r\n\telse if(MM==2) then    \r\n\t  DAYS_IN_MONTH_FN = 28 + LEAPSHIFT                               \r\n\telse if(MM==3) then                                               \r\n\t  DAYS_IN_MONTH_FN = 31\r\n\telse if(MM==4) then                                                \r\n\t  DAYS_IN_MONTH_FN = 30\r\n\telse if(MM==5) then\r\n\t  DAYS_IN_MONTH_FN = 31\r\n\telse if(MM==6) then \r\n\t  DAYS_IN_MONTH_FN = 30\r\n\telse if(MM==7) then     \r\n\t  DAYS_IN_MONTH_FN = 31\r\n\telse if(MM==8) then \r\n\t  DAYS_IN_MONTH_FN = 31\r\n\telse if(MM==9) then \r\n\t  DAYS_IN_MONTH_FN = 30\r\n\telse if(MM==10) then \r\n\t  DAYS_IN_MONTH_FN = 31\r\n\telse if(MM==11) then \r\n\t  DAYS_IN_MONTH_FN = 30\r\n\telse if(MM==12) then\r\n\t  DAYS_IN_MONTH_FN = 31\r\n\tendif\r\n\r\n!\r\n!//! Equation: 50\r\n!//! Description: finds the number of days in a month \\\\\r\n!//!   INPUTS: Month of year (numeric); Number of days in the year\r\n!//! Bibliography: No Specific reference to this function.\r\n!\r\n!//! E:   None   \r\n!   \r\n!//! Variable: DinM      \r\n!//! Description:   Number of days in the month \r\n!//! Units: none         \r\n!//! SET\r\n!//! Type: integer ::\r\n!\r\n!//! Variable: mm      \r\n!//! Description:  month number \r\n!//! Units: none         \r\n!//! Type: integer ::\r\n!\r\n!//! Variable: DinY     \r\n!//! Description: Days in the year (allows for leap year)\r\n!//! Units: none         \r\n!//! Type: integer ::\r\n!\r\n!**********************************************************************!\r\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given string contains a specific substring.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','he'", "case2": "'world','or'", "case3": "'fortran','tran'", "case4": "'python','java'", "case5": "'programming','ming'", "result": ["T", "T", "T", "F", "T"]}, "code": "function includes_cc(within, search_for)\n        character(len=*), intent(in) :: within\n        character(len=*), intent(in) :: search_for\n        logical :: includes_cc\n\n        includes_cc = index(within, search_for) > 0\n    end function"}
{"instruction": "Use Fortran to create a function that checks if a given string starts with a given substring.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello world', 'hello']", "case2": "['fortran', 'fort']", "case3": "['', 'fortran']", "case4": "['fortran', '']", "case5": "['fortran', 'FORTRAN']", "result": ["T", "T", "F", "T", "F"]}, "code": "function starts_with_cc(string, substring)\n        character(len=*), intent(in) :: string\n        character(len=*), intent(in) :: substring\n        logical :: starts_with_cc\n\n        starts_with_cc = index(string, substring) == 1\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the sum of the elements in a ring of a square matrix of size k, starting from the element at position (start,start).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["10", "38", "18", "0", "34"]}, "code": "function ring(start,k)\n    implicit none\n    integer, intent(in) :: start,k\n    integer             :: i,j\n    integer             :: ring\n\n    j=0\n    ring=0\n    do i=start+k+k+(k-2)+(k-2)-1,start,-1\n       if (mod(j,k-1) == 0) then\n          ring=ring+i\n       end if\n       j=j+1\n    end do\n  end function"}
{"instruction": "Use Fortran to convert an integer to a string with a specified length.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[123,5]", "case2": "[0,3]", "case3": "[-456,7]", "case4": "[999999,3]", "case5": "[123456789,10]", "result": ["123", "0", "-456", "***", "123456789"]}, "code": "function to_string(int, length) result(str)\n        integer, intent(in) :: int\n        integer, intent(in) :: length\n        character(len=length) :: str\n        character(len=13) :: fmt\n        write(fmt, \"(A,I10,A)\") \"(I\", length, \")\"\n        write(str, fmt) int\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer array and returns the sum of the first and last elements.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[10,20,30,40,50]", "case3": "[100,200,300,400,500]", "case4": "[0,0,0,0,0]", "case5": "[1,0,-1,0,1]", "result": ["6", "60", "600", "0", "2"]}, "code": "function deeper(bigone)\n integer, intent(inout) :: bigone(:)\n integer :: deeper\n\ninteger :: asize\n\n! again, make sure to read the start and end of the array to be sure\n! both parts are accessible.  and make sure that the optimizer\n! doesn't skip executing the lines because the results aren't used.\n\nasize = size(bigone)\n\ndeeper = bigone(1) + bigone(asize)\n\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is an opening bracket.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "'['", "case3": "'{'", "case4": "'<'", "case5": "'a'", "result": ["F", "F", "F", "F", "F"]}, "code": "function is_opening( token )\n    implicit none\n\n    character (len=1), intent (in) :: token\n    logical :: is_opening\n\n    is_opening = .false.\n\n    if (token == \"(\" .or. token == \"[\" .or. token == \"{\" .or. token == \"<\") then\n      is_opening = .true.\n    endif\n  end function"}
{"instruction": "Use Fortran to create a function that takes a closing token as input and returns a cost for using it illegally.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "']'", "case3": "'{'", "case4": "'>'", "case5": "'/'", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_costs_for_illegal(closingToken)\n    implicit none\n\n    character, intent(in) :: closingToken\n    integer :: get_costs_for_illegal\n\n    select case (closingToken)\n      case(\")\")\n        get_costs_for_illegal = 3\n      case (\"]\")\n        get_costs_for_illegal = 57\n      case (\"}\")\n        get_costs_for_illegal = 1197\n      case (\">\")\n        get_costs_for_illegal = 25137\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that takes an opening token and returns the corresponding closing token.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "'['", "case3": "'{'", "case4": "'<>'", "case5": "'/'", "result": ["\u0000", "\u0000", "\u0000", "\u0000", "\u0000"]}, "code": "function get_expected_closing_char_from(openingToken) \n    implicit none\n\n    character, intent(in) :: openingToken\n    character :: get_expected_closing_char_from\n\n    select case (openingToken)\n      case(\"(\")\n        get_expected_closing_char_from = \")\"\n      case (\"[\")\n        get_expected_closing_char_from = \"]\"\n      case (\"{\")\n        get_expected_closing_char_from = \"}\"\n      case (\"<\")\n        get_expected_closing_char_from = \">\"\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that takes a closing token as input and returns a corresponding integer value.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'('", "case2": "']'", "case3": "'{'", "case4": "'>'", "case5": "'['", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_cost_for_missing(closingToken)\n    implicit none\n\n    character, intent(in) :: closingToken\n    integer :: get_cost_for_missing\n\n    select case (closingToken)\n      case(\")\")\n        get_cost_for_missing = 1\n      case (\"]\")\n        get_cost_for_missing = 2\n      case (\"}\")\n        get_cost_for_missing = 3\n      case (\">\")\n        get_cost_for_missing = 4\n    end select\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a forward slash or a backslash.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'\\'", "case3": "'a'", "case4": "' '", "case5": "'1'", "result": ["F", "F", "F", "F", "F"]}, "code": "function CharIsSlash(C)\n    character, intent(in) :: C\n    logical CharIsSlash\n    character, parameter :: win_slash = char(92)\n\n    CharIsSlash = C == win_slash .or. C == '/'\n\n    end function"}
{"instruction": "Use Fortran to create a function that changes the file extension of a given file name.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'file.txt','pdf'", "case2": "'file.txt',''", "case3": "'file.txt','.'", "case4": "'file.txt','pdf'", "case5": "'file.txt','docx'", "result": ["file.pdf", "file.", "file..", "file.pdf", "file.docx"]}, "code": "function ChangeFileExt(aname,ext)\n    character(LEN=*), intent(IN) :: aname,ext\n    character(LEN=:), allocatable :: ChangeFileExt\n    integer len, i\n\n    len = len_trim(aname)\n    do i = len, 1, -1\n        if (aname(i:i)=='.') then\n            ChangeFileExt = aname(1:i) // trim(ext)\n            return\n        end if\n    end do\n    ChangeFileExt = trim(aname) // '.' // trim(ext)\n\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the binomial coefficient of n and k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["10", "120", "35", "3003", "184756"]}, "code": "function Bin(n,k) result (C)\n      implicit none\n      integer(kind=4), intent(in) :: n, k\n      integer(kind=4) :: i, C\n      C = 1\n      do i = 0, min(k,n-k) - 1\n         C = C * (n - i)\n         C = C / (i + 1)\n      end do\n    end function"}
{"instruction": "Use Fortran to define a function that returns the values of nxy and nz, which are set to ngptotg and nflevg respectively, and also returns the value of ret, which is set to 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[0,0]", "case3": "[100,50]", "case4": "[500,1000]", "case5": "[1,1]", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_grid_sizes(nxy,nz) result(ret)\n\n            integer, intent(out)::   nxy,nz\n            integer::                ret\n\n            nxy = ngptotg\n            nz = nflevg\n            ret = 0\n\n        end function"}
{"instruction": "Use Fortran to give me a function that converts a binary number i into a configuration vector ivec of length Ntot.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[3,15]", "case4": "[7,30]", "case5": "[2,25]", "result": ["1           0           0           0           0           0           0           0           0           0", "1           0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "1           1           0           0           0           0           0           0           0           0           0           0           0           0           0", "1           1           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0"]}, "code": "function bdecomp(i,Ntot) result(ivec)\n    integer :: Ntot,ivec(Ntot),l,i\n    logical :: busy\n    !this is the configuration vector |1,..,Ns,Ns+1,...,Ntot>\n    !obtained from binary decomposition of the state/number i\\in 2^Ntot\n    do l=0,Ntot-1\n       busy=btest(i,l)\n       ivec(l+1)=0\n       if(busy)ivec(l+1)=1\n    enddo\n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient of n1 and n2.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[0,0]", "case5": "[1,1]", "result": ["10", "120", "35", "1", "1"]}, "code": "function binomial(n1,n2) result(nchoos)\n    real(8) :: xh\n    integer :: n1,n2,i\n    integer nchoos\n    xh = 1.d0\n    if(n2<0) then\n       nchoos = 0\n       return\n    endif\n    if(n2==0) then\n       nchoos = 1\n       return\n    endif\n    do i = 1,n2\n       xh = xh*dble(n1+1-i)/dble(i)\n    enddo\n    nchoos = int(xh + 0.5d0)\n  end function"}
{"instruction": "Use Fortran to define a function that takes in two real numbers x and y, calculates a value v using some constants kxx_1, kxx_x, kxx_y, phi_1, phi_x, and phi_y, and returns v.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,0.0]", "case4": "[-1.0,1.0]", "case5": "[2.5,-3.0]", "result": ["1.2939814099495310E+039", "2.1566384144155298E+039", "0.0000000000000000", "-2.5879565630683812E+039", "-2.1566443733478566E+039"]}, "code": "function exx_cell_function(x,y) result(v)\nreal(8),intent(in) :: x,y\nreal(8) :: v\nv= ( kxx_1 + kxx_x*x + kxx_y*y ) / ( phi_1 + phi_x*x + phi_y*y ) \n!v=KxxC(g,i)/PhiC(g,i)\nend function"}
{"instruction": "Use Fortran to create a function that generates a random integer between n and m inclusive.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[100,200]", "case4": "[0,100]", "case5": "[1,1]", "result": ["2.00000000", "18.0000000", "149.000000", "58.0000000", "1.00000000"]}, "code": "function rand_int(n,m)\n    integer, intent(in) :: n, m\n\n    real :: u\n    call random_number(u)\n    rand_int = n + FLOOR((m+1-n)*u)\n\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.00000000", "7.00000000", "5.00000000", "6.00000000", "6.00000000"]}, "code": "function add2(a, b)\n    integer a, b\n    add2 = a + b\n    return\nend function"}
{"instruction": "Use Fortran to create a function that extracts the file name from a given input string, with an optional file separator character.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello/world/','/'", "case2": "'file.txt','.'", "case3": "'file.txt','/'", "case4": "'file.txt','_'", "case5": "'file.txt','/'", "result": ["", "txt", "file.txt", "file.txt", "file.txt"]}, "code": "function file_name(instr, filesep)\n\ncharacter(*), intent(in) :: instr\ncharacter(1), intent(in), optional :: filesep\ncharacter(:), allocatable :: file_name\n\ncharacter(1) :: sep\ninteger :: i\n\nsep = '/'\nif(present(filesep)) sep = filesep\n\ni = scan(instr, sep, back=.true.)\nfile_name = instr(i+1:len(instr))\n\nend function"}
{"instruction": "Use Fortran to create a function that takes two integer inputs and returns the integer 5.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[20,30]", "case3": "[100,200]", "case4": "[0,1000]", "case5": "[500,1000]", "result": ["5.00000000", "5.00000000", "5.00000000", "5.00000000", "5.00000000"]}, "code": "function get_first_prime(lower, higher)\n    integer :: lower, higher\n    get_first_prime = 5\nend function"}
{"instruction": "Use Fortran to define a function that imposes periodic boundary conditions on a given index i, with the size of the system given by nssub and the type of boundary condition given by ipbcsub.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,10]", "case2": "[1,15,10]", "case3": "[0,5,10]", "case4": "[1,-5,10]", "case5": "[0,0,10]", "result": ["2", "5", "5", "5", "0"]}, "code": "function pimage(ipbcsub,i,nssub)\n \n!***********************************************************************\n!     \n!     LBsoft sfunction to impose the pbc \n!     \n!     licensed under the 3-Clause BSD License (BSD-3-Clause)\n!     author: M. Lauricella\n!     last modification November 2018\n!     \n!***********************************************************************\n \n  implicit none\n  \n  integer, intent(in) :: ipbcsub,i,nssub\n  integer :: pimage\n  \n  pimage=i\n  \n  if(ipbcsub==1)then\n    if(i<1) then\n      pimage=i+nssub\n    endif\n    if(i>nssub) then\n      pimage=i-nssub\n    endif\n  endif\n  \n  return\n  \n end function"}
{"instruction": "Use Fortran to give me a function for adding two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function add(a, b)\n      implicit none\n      integer :: a, b, add\n      add = a + b\n    end function"}
{"instruction": "Use Fortran to create a function that takes a string and an optional quote character and returns the string surrounded by quotes.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'test', 'case'", "case4": "'good', 'morning'", "case5": "'happy', 'birthday'", "result": ["worldhelloworld", "programmingfortranprogramming", "casetestcase", "morninggoodmorning", "birthdayhappybirthday"]}, "code": "function quote(s, q) result (r)\n            character(len=*), intent(in) :: s\n            character(len=*), optional, intent(in) :: q\n            character(len=:), allocatable :: t_q\n            character(len=:), allocatable :: r\n\n            if (.NOT. PRESENT(q)) then\n                t_q = '\"'\n            else\n                t_q = q\n            end if\n\n            r = t_q//s//t_q\n        end function"}
{"instruction": "Use Fortran to define a function that calculates the average of a quantity based on different weighting factors depending on the value of a given integer input.", "test_case": {"param_num": 5, "param_type": "integer,real*8,real*8,real*8,real*8", "case1": "[1,1.0,2.0,3.0,4.0]", "case2": "[-1,2.0,3.0,4.0,5.0]", "case3": "[0,3.0,4.0,5.0,6.0]", "case4": "[2,4.0,5.0,6.0,7.0]", "case5": "[1,5.0,6.0,7.0,8.0]", "result": ["3.6666666666666665", "4.5454545454545459", "2.8207888777956418", "0.0000000000000000", "7.5454545454545450"]}, "code": "function qaverage(q,rhoa,rhob,mya,myb)\n  \n  implicit none\n  \n  integer, intent(in) :: q \n  \n  real*8, intent(in) :: rhoa,rhob,mya,myb\n  \n  real*8 :: qaverage,rhosum\n  \n  rhosum=rhoa+rhob\n  \n  select case(q)\n  case(1)\n    qaverage=rhoa/rhosum*mya+rhob/rhosum*myb\n  case(-1)\n    qaverage=1.d0/(rhoa/rhosum*(1.d0/mya)+rhob/rhosum*(1.d0/myb))\n  case(0)\n    qaverage=(mya**(rhoa)+myb**(rhob))**(1.d0/rhosum)\n  case default\n    qaverage=0.d0\n  end select\n  \n  return\n  \n end function"}
{"instruction": "Use Fortran to create a function that initializes a client for a multi-process communication system, taking in a character array for the client name and an integer for the parent communication group, and returning an integer for the new communication group.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'client', 0", "case2": "'server', 1", "case3": "'client', -1", "case4": "'server', 100", "case5": "'client', 10", "result": ["16611840", "14973440", "17594880", "7698944", "8092160"]}, "code": "function c_multio_init_client(c_name, parent_comm) result(ret_comm) bind(c, name='multio_init_client')\n            use, intrinsic :: iso_c_binding\n            implicit none\n            character(c_char), intent(in) :: c_name(*)\n            integer(c_int), intent(in), value :: parent_comm\n            integer(c_int) :: ret_comm\n        end function"}
{"instruction": "Use Fortran to create a function that takes in two integer arguments and returns a pointer to a new soup address.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function soup_address_new_any( &\n        family, &\n        port &\n    ) bind(c)\n      use iso_c_binding, only: c_int, c_ptr\n      integer(c_int), value :: family\n      integer(c_int), value :: port\n      type(c_ptr) soup_address_new_any\n    end function"}
{"instruction": "Use Fortran to create a function that checks the version of a software called \"soup\" and returns a boolean value.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[10,20,30]", "case4": "[100,200,300]", "case5": "[2,5,8]", "result": ["T", "F", "T", "T", "T"]}, "code": "function soup_check_version( &\n        major, &\n        minor, &\n        micro &\n    ) bind(c)\n      use iso_c_binding, only: c_bool, c_int\n      integer(c_int), value :: major\n      integer(c_int), value :: minor\n      integer(c_int), value :: micro\n      logical(c_bool) soup_check_version\n    end function"}
{"instruction": "Use Fortran to define a function that calculates the value of sin(pi*x)*exp(-pi*y) for given values of x and y.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.5,0.5]", "case2": "[1.0,1.0]", "case3": "[0.0,0.0]", "case4": "[2.0,3.0]", "case5": "[0.25,0.75]", "result": ["0.20787957635076193", "5.2920038879376380E-018", "0.0000000000000000", "-1.9765028393399123E-020", "6.7019739708273365E-002"]}, "code": "function boundary_func(x,y)\n        implicit none \n        real(kind = 8) :: boundary_func, x, y, pi\n        pi = 4.d0*atan(1.d0)\n        boundary_func = sin(pi*x)*exp(-pi*y)\nend function"}
{"instruction": "Use Fortran to create a function that takes a value and a value exponent, calculates a color gradient based on those values, and returns the resulting color as an integer.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.0]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["0", "0", "0", "0", "0"]}, "code": "function GetColorGrad(value,valueexp) result(res)\n        \n        real(8) :: value, valueexp\n        integer :: red, green, blue\n        integer :: res \n        \n        value = value**valueexp\n         \n        red   = (bR - aR) * value + aR      ! Evaluated as -255*value + 255.\n        green = (bG - aG) * value + aG      ! Evaluates as 0.\n        blue  = (bB - aB) * value + aB      ! Evaluates as 255*value + 0.\n        \n        res = red + 256*green + 65536*blue\n        \n    end function"}
{"instruction": "Use Fortran to define a function that returns -1 and takes in two integer arguments.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[0,4]", "case3": "[3,3]", "case4": "[5,6]", "case5": "[2,1]", "result": ["-1", "-1", "-1", "-1", "-1"]}, "code": "function get_index_of_next_particle(index_of_the_particle,  &\n    index_of_the_next_particle)\n  implicit none\n  integer :: index_of_the_particle, index_of_the_next_particle\n  integer :: get_index_of_next_particle\n  get_index_of_next_particle=-1\nend function"}
{"instruction": "Use Fortran to define a function that takes an integer as input and returns a double precision potential value, initialized to zero.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,0.0]", "case2": "[3,1.5]", "case3": "[2,2.0]", "case4": "[5,0.0]", "case5": "[10,3.14]", "result": ["0", "0", "0", "0", "0"]}, "code": "function get_potential(index_of_the_particle, potential)\n  implicit none\n  integer :: index_of_the_particle\n  double precision :: potential\n  integer :: get_potential\n  get_potential=0\nend function"}
{"instruction": "Use Fortran to give me a function for multiplying two 32-bit floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.7]", "result": ["2.00000000", "14.6999989", "6.00000000", "5.00000000", "11.7500000"]}, "code": "function multiply_float32(a, b) result(value)\n    !DEC$ ATTRIBUTES DLLEXPORT, ALIAS:'multiply_float32' :: multiply_float32\n    implicit none\n    real(4) :: a, b, value\n    value = a * b\nend function"}
{"instruction": "Use Fortran to give me a function for multiplying two 64-bit floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,0.0]", "case5": "[2.5,4.5]", "result": ["2.0000000000000000", "14.700000000000001", "0.0000000000000000", "0.0000000000000000", "11.250000000000000"]}, "code": "function multiply_float64(a, b) result(value)\n    !DEC$ ATTRIBUTES DLLEXPORT, ALIAS:'multiply_float64' :: multiply_float64\n    implicit none\n    real(8) :: a, b, value\n    value = a * b\nend function"}
{"instruction": "Use Fortran to give me a function that takes an array of compositions and returns a real number.", "test_case": {"param_num": 1, "param_type": "real(:)", "case1": "[1.0,2.0,3.0]", "case2": "[0.5,0.5,0.0,0.0]", "case3": "[0.0,0.0,0.0]", "case4": "[1.0,0.0,0.0,0.0]", "case5": "[0.25,0.25,0.25,0.25]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function trend_rmix(x) result(Rmix)\n    implicit none\n    ! Input:\n    real, dimension(:), intent(in) :: x    !< Composition (mol/mol)\n    ! Output:\n    real :: Rmix\n    Rmix = 0.0\n  end function"}
{"instruction": "Use Fortran to create a function that takes a string and a length and returns the string trimmed or padded to the specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',5", "case2": "'world',10", "case3": "'fortran',3", "case4": "'test',7", "case5": "'cases',4", "result": ["hello", "world", "for", "test", "case"]}, "code": "function lenset(line,length) result(strout)\n\n!character(len=*),parameter::ident_36=\"@(#)M_strings::lenset(3f): return string trimmed or padded to specified length\"\n\ncharacter(len=*),intent(in)  ::  line\ninteger,intent(in)           ::  length\ncharacter(len=length)        ::  strout\n   strout=line\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the input character is a digit and false otherwise.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isdigit(ch) result(res)\n\n! ident_2=\"@(#)M_strings::isdigit(3f): Returns .true. if ch is a digit (0-9) and .false. otherwise\"\n\ncharacter,intent(in) :: ch\nlogical              :: res\n   select case(ch)\n   case('0':'9')\n     res=.true.\n   case default\n     res=.false.\n   end select\nend function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a control character or not.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'\\n'", "case4": "'\\t'", "case5": "'\\r'", "result": ["1", "1", "1", "1", "1"]}, "code": "function not_control(ch)\n    character, intent(in) :: ch\n    not_control = iachar(ch) >= 32 .and. iachar(ch) /= 127\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is not an extended ASCII character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'&'", "case4": "'1'", "case5": "'A'", "result": ["1", "1", "1", "1", "1"]}, "code": "function not_extended(ch)\n    character, intent(in) :: ch\n    not_extended = iachar(ch) >= 32 .and. iachar(ch) < 127\n  end function"}
{"instruction": "Use Fortran to give me a function that returns an array of integers from 1 to n excluding the elements in the input array.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[5,[1,3]]", "case2": "[10,[2,4,6,8]]", "case3": "[7,[1,2,3,4]]", "case4": "[3,[2]]", "case5": "[6,[1,2,3]]", "result": ["2           4           5", "1           3           5           7           9          10", "5           6           7", "1           3", "4           5           6"]}, "code": "function i_null(n, index) result(non)\n    integer, intent(in) :: n, index(:)\n    integer, allocatable :: non(:)\n    integer i, k, nk\n        nk = size(index)\n        k = 0\n        allocate(non(n-nk))\n        do i=1, n\n            if ( any(index==i) ) then\n            else\n                k = k + 1\n                non(k) = i\n            end if\n        end do\n    end function"}
{"instruction": "Use Fortran to give me a function that returns a logical value indicating whether the absolute difference between two real numbers is greater than the first number times 1e-6.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,1.000001]", "case2": "[3.5,3.500001]", "case3": "[3.0,2.999999]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["F", "F", "F", "T", "T"]}, "code": "function diff(a, b)\n  real(kind=4) :: a, b\n  logical diff\n\n  diff = (abs (a - b) .gt. abs(a * 1e-6))\nend function"}
{"instruction": "Use Fortran to create a function that returns a 2D array of zeros with dimensions x and y.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[3,4]", "case3": "[5,2]", "case4": "[2,6]", "case5": "[4,3]", "result": ["0", "0           0           0           0           0           0           0           0           0           0           0           0", "0           0           0           0           0           0           0           0           0           0", "0           0           0           0           0           0           0           0           0           0           0           0", "0           0           0           0           0           0           0           0           0           0           0           0"]}, "code": "function zeros(x,y) result(result)\n    integer:: x,y\n    integer, dimension(x,y) :: result\n\n    do i_x=1,x\n       do i_y=1,y\n          result(i_x, i_y) = 0\n       end do\n    end do\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the number of grid cells assigned to each image in a parallel computing environment.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,2,3]", "case2": "[10,5,2]", "case3": "[100,10,11]", "case4": "[100,10,10]", "case5": "[100,10,9]", "result": ["3", "5", "9", "10", "11"]}, "code": "function my_n(n_global, me, nimg) result(n_local)\n       integer, intent(in) :: n_global, me, nimg\n       integer :: n_local\n\n       ! add 1 if this image is less than the remainder that need an extra grid cell\n       n_local = n_global / nimg + merge(1,0,me <= mod(n_global,nimg)  )\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the starting memory location for a given process in a parallel program.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,1,2]", "case2": "[10,2,2]", "case3": "[10,1,3]", "case4": "[10,3,3]", "case5": "[10,2,1]", "result": ["1", "6", "1", "8", "11"]}, "code": "function my_start(n_global, me, nimg) result(memory_start)\n        implicit none\n        integer, intent(in) :: n_global, me, nimg\n        integer :: memory_start\n        integer :: base_n\n\n        base_n = n_global / nimg\n\n        memory_start = (me-1)*(base_n) + min(me-1,mod(n_global,nimg)) + 1\n\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function func2(remote_me,remote_neighbor)\n    integer func2\n    integer remote_me,remote_neighbor\n    func2 = remote_me + remote_neighbor\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on input integers and variables.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[100,200,300,400,500]", "case4": "[10,20,30,40,50]", "case5": "[-1,-2,-3,-4,-5]", "result": ["4", "-1", "499", "49", "-6"]}, "code": "function iadd(ivar,i,j,loc,mitot)\n        integer, intent(in) :: i, j, ivar, loc, mitot\n        iadd = loc + ivar-1 + nvar*((j-1)*mitot+i-1)\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on input integers and variables.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5]", "case2": "[0,0,0,0,0]", "case3": "[100,200,300,400,500]", "case4": "[-1,-2,-3,-4,-5]", "case5": "[2147483647,-2147483648,0,1,-1]", "result": ["4", "-1", "499", "-6", "2147483647"]}, "code": "function iaddf(ivar,i,j,locf,mi)\n        integer, intent(in) :: i, j, ivar, locf, mi\n        iaddf = locf   + ivar-1 + nvar*((j-1)*mi+i-1)\n    end function"}
{"instruction": "Use Fortran to give me a function that takes three integer arguments and returns their sum.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[2147483647,-2147483648,1]", "case5": "[-2147483648,2147483647,-1]", "result": ["6.00000000", "0.00000000", "600.000000", "0.00000000", "-2.00000000"]}, "code": "function several_arguments(a, b, c)\n    integer(kind=4), intent(in) :: a\n    integer(kind=4), intent(in) :: b\n    integer(kind=4), intent(in) :: c\n    several_arguments = a + b + c\nend function"}
{"instruction": "Use Fortran to define a function that returns the inclusive range of indices for three dimensions, with default values of 1 and the maximum values of Nx, Ny, and Nm.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[1,1,1,1,1,1]", "case2": "[0,0,0,0,0,0]", "case3": "[10,20,30,40,50,60]", "case4": "[5,5,5,5,5,5]", "case5": "[100,200,300,400,500,600]", "result": ["1", "1", "1", "1", "1"]}, "code": "function get_index_range_inclusive(i1,i2,j1,j2,k1,k2) result(ret)\n  integer :: ret, i1,i2, j1,j2,k1,k2\n\n  if(Nx==0.OR.Ny==0.OR.Nm==0) then\n    ret=1\n    return\n  endif\n  i1=1\n  i2=Nx\n  j1=1\n  j2=Ny\n  k1=1\n  k2=Nm\n  ret=0\nend function"}
{"instruction": "Use Fortran to give me a function that returns the index range for a wind field given the dimensions of the field.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[0,0,0,0]", "case2": "[1,2,3,4]", "case3": "[5,6,7,8]", "case4": "[10,20,30,40]", "case5": "[100,200,300,400]", "result": ["1", "1", "1", "1", "1"]}, "code": "function get_wind_field_index_range_inclusive(i1,i2,j1,j2) result(ret)\n  integer :: ret, i1,i2, j1,j2\n\n  if(Nx==0.OR.Ny==0.OR.Nm==0) then\n    ret=1\n    return\n  endif\n  i1=1\n  i2=Nx\n  j1=1\n  j2=Ny\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that converts an integer array to a string.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3]", "case2": "[0,-1,2,3]", "case3": "[100,200,300,400]", "case4": "[0]", "case5": "[1,0,1,0,1,0]", "result": ["1 2 3", "0 -1 2 3", "100 200 300 400", "0", "1 0 1 0 1 0"]}, "code": "function str_iarray(i)\n\n            implicit none\n\n            integer, intent(IN) :: i(:)\n\n            character(len=:), allocatable :: str_iarray\n            character(len=100) :: string\n            integer :: j\n\n            do j = 1, size(i)\n                write(string,'(I100.1)') I(j)\n                str_iarray = str_iarray//' '//trim(adjustl(string))\n            end do\n            \n        end function"}
{"instruction": "Use Fortran to create a function that converts a logical array to a string.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.true.]", "case2": "[.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.false.]", "case4": "[.false.,.true.,.false.,.true.,.false.]", "case5": "[.true.,.true.,.false.,.false.,.true.,.false.]", "result": ["T F T", "F F F", "T T T F", "F T F T F", "T T F F T F"]}, "code": "function str_logicalarray(a)\n\n            implicit none\n\n            logical, intent(IN) :: a(:)\n\n            character(len=:), allocatable :: str_logicalarray\n            character(len=100) :: string\n            integer :: i\n\n            do i = 1, size(a)\n                write(string,'(L1)') a(i)\n                str_logicalarray = str_logicalarray//' '//trim(adjustl(string))\n            end do\n\n        end function"}
{"instruction": "Use Fortran to create a function that takes a path as input and returns the directory name of that path.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'dir/file.txt'", "case3": "'dir/'", "case4": "'file.txt'", "case5": "'dir1/dir2/file.txt'", "result": ["7698864", "8354224", "17070512", "7633328", "8223152"]}, "code": "function dirname(path) bind(c, name=\"dirname\")\n       use, intrinsic :: iso_c_binding\n       type(c_ptr) :: dirname\n       character(len=1,kind=c_char), intent(in) :: path(*)\n     end function"}
{"instruction": "Use Fortran to create a function that counts the number of items in a string separated by spaces.", "test_case": {"param_num": 1, "param_type": "character", "case1": "' '", "case2": "'a b c d e'", "case3": "'a b c d e '", "case4": "' a b c d e'", "case5": "'a b c d e  '", "result": ["2", "5", "6", "6", "6"]}, "code": "function nitems(line)\n\n  character :: line*(*)\n\n  logical   :: back\n  integer   :: length\n  integer   :: k\n\n  back = .true.\n  length = len_trim(line)\n  k = index(line(1:length), ' ', back)\n  if (k == 0) then\n    nitems = 0\n    return\n  end if\n\n  nitems = 1\n  do\n    ! starting with the right most blank space,\n    ! look for the next non-space character down\n    ! indicating there is another item in the line\n    do\n      if (k <= 0) exit\n\n      if (line(k:k) == ' ') then\n        k = k - 1\n        cycle\n      else\n        nitems = nitems + 1\n        exit\n      end if\n\n    end do\n\n    ! once a non-space character is found,\n    ! skip all adjacent non-space character\n    do\n      if ( k<=0 ) exit\n\n      if (line(k:k) /= ' ') then\n        k = k - 1\n        cycle\n      end if\n\n      exit\n\n    end do\n\n    if (k <= 0) exit\n\n  end do\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the exponential of the product of four input variables.", "test_case": {"param_num": 5, "param_type": "real*4,real*4,real*4,real*4,real*4", "case1": "[1.0,2.0,3.0,4.0,5.0]", "case2": "[0.5,0.5,0.5,0.5,0.5]", "case3": "[2.0,3.0,4.0,5.0,6.0]", "case4": "[0.0,1.0,0.0,1.0,0.0]", "case5": "[1.5,2.5,3.5,4.5,5.5]", "result": ["7962625.00", "0.250000000", "2.98598505E+12", "NaN", "5.52350054E+09"]}, "code": "function Dm_x(DE_local,QX_local,iNX_local,icmx_local,idmx_local)\n      real :: DE_local,QX_local,iNX_local,icmx_local,idmx_local\n      Dm_x = exp(idmx_local*log(DE_local*QX_local*iNX_local*icmx_local))\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the modulo of i with DimUp and assigns the result to iup, and if iup is equal to 0, assign DimUp to iup.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "1", "1", "2"]}, "code": "function iup_index(i,DimUp) result(iup)\n    integer :: i\n    integer :: DimUp\n    integer :: iup\n    iup = mod(i,DimUp);if(iup==0)iup=DimUp\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a one-dimensional array based on the index of a multi-dimensional array and the size of the first dimension.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "1", "2", "5", "1"]}, "code": "function idw_index(i,DimUp) result(idw)\n    integer :: i\n    integer :: DimUp\n    integer :: idw\n    idw = (i-1)/DimUp+1\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates an index based on two integer inputs and a constant Norb.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "4", "2", "1", "4"]}, "code": "function imp_state_index(ilat,iorb) result(indx)  \n    integer :: ilat\n    integer :: iorb\n    integer :: indx\n    indx = iorb + (ilat-1)*Norb\n  end function"}
{"instruction": "Use Fortran to give me a function that converts a binary number i into a configuration vector ivec of length Ntot.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[3,15]", "case4": "[8,30]", "case5": "[2,25]", "result": ["1           0           0           0           0           0           0           0           0           0", "1           0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "1           1           0           0           0           0           0           0           0           0           0           0           0           0           0", "0           0           0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "0           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0"]}, "code": "function bdecomp(i,Ntot) result(ivec)\n    integer :: Ntot,ivec(Ntot),l,i\n    logical :: busy\n    !this is the configuration vector |1,..,Ns,Ns+1,...,Ntot>\n    !obtained from binary decomposition of the state/number i\\in 2^Ntot\n    do l=0,Ntot-1\n       busy=btest(i,l)\n       ivec(l+1)=0\n       if(busy)ivec(l+1)=1\n    enddo\n  end function"}
{"instruction": "Use Fortran to give me a function for calculating the binomial coefficient of n1 and n2.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,0]", "case4": "[0,5]", "case5": "[3,1]", "result": ["10", "120", "1", "0", "3"]}, "code": "function binomial(n1,n2) result(nchoos)\n    integer,intent(in) :: n1,n2\n    real(8)            :: xh\n    integer            :: i\n    integer nchoos\n    xh = 1.d0\n    if(n2<0) then\n       nchoos = 0\n       return\n    endif\n    if(n2==0) then\n       nchoos = 1\n       return\n    endif\n    do i = 1,n2\n       xh = xh*dble(n1+1-i)/dble(i)\n    enddo\n    nchoos = int(xh + 0.5d0)\n  end function"}
{"instruction": "Use Fortran to give me a function that generates a random integer between a lower and upper bound.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["1", "12", "95", "141", "-9"]}, "code": "function qsort_rand( lower, upper )\n      implicit none\n      integer                               :: lower, upper\n      real(8)                               :: r\n      integer                               :: qsort_rand\n      call random_number(r)\n      qsort_rand =  lower + nint(r * (upper-lower))\n    end function"}
{"instruction": "Use Fortran to give me a function that compares two integers f and g and returns 1 if f>g, -1 if f<g, and 0 if f=g.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[5,1]", "case5": "[2,2]", "result": ["-1", "-1", "1", "1", "1"]}, "code": "function compare(f,g)\n      integer                               :: f,g\n      integer                               :: compare\n      compare=1\n      if(f<g)compare=-1\n    end function"}
{"instruction": "Use Fortran to create a function that takes an optional integer argument and returns either the argument or a default value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "3", "3", "5", "2"]}, "code": "function optval_int(opt, default) result(val)\n        integer, intent(in), optional :: opt\n        integer, intent(in) :: default\n        integer :: val\n\n        if (present(opt)) then\n            val = opt\n        else\n            val = default\n        end if\n\n    end function"}
{"instruction": "Use Fortran to create a function that takes an optional character input and returns the input if it is present, otherwise it returns a default value.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello', 'world'", "case2": "'fortran', 'programming'", "case3": "'test', 'case'", "case4": "'optional', 'parameter'", "case5": "'default', 'value'", "result": ["hello", "fortran", "test", "optional", "default"]}, "code": "function optval_char(opt, default) result(val)\n        character(len=*), intent(in), optional :: opt\n        character(len=*), intent(in) :: default\n        character(len=:), allocatable :: val\n\n        if (present(opt)) then\n            val = opt\n        else\n            val = default\n        end if\n\n    end function"}
{"instruction": "Use Fortran to create a function that generates an array of equally spaced values between a start and end value with a specified number of points.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,integer", "case1": "[1.0,2.0,5]", "case2": "[0.0,10.0,11]", "case3": "[-1.0,1.0,3]", "case4": "[2.5,3.5,2]", "case5": "[0.0,1.0,1]", "result": ["1.0000000000000000        1.2500000000000000        1.5000000000000000        1.7500000000000000        2.0000000000000000", "0.0000000000000000        1.0000000000000000        2.0000000000000000        3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000        10.000000000000000", "-1.0000000000000000        0.0000000000000000        1.0000000000000000", "2.5000000000000000        3.5000000000000000", "NaN"]}, "code": "function linspace(startval, endval, npoints)\n   double precision :: startval, endval, delta\n   integer :: i,npoints\n   double precision :: linspace(npoints)\n\n   delta = (endval - startval)/(1.0*npoints - 1)\n \n   linspace = startval + (/((i*delta),i=0,(npoints-1))/) \nend function"}
{"instruction": "Use Fortran to give me a function that performs linear interpolation on a set of x and y data points for a given set of x values.", "test_case": {"param_num": 3, "param_type": "real*8(:),real*8(:),real*8(:)", "case1": "[ [1.0,2.0,3.0], [2.0,4.0,6.0], [1.5,2.5] ]", "case2": "[ [1.0,2.0,3.0], [2.0,4.0,6.0], [0.5,1.5,2.5,3.5] ]", "case3": "[ [1.0,2.0,3.0], [2.0,4.0,6.0], [3.5] ]", "case4": "[ [1.0,2.0,3.0], [2.0,4.0,6.0], [1.0,2.0,3.0] ]", "case5": "[ [1.0,2.0,3.0], [2.0,4.0,6.0], [2.5,3.5,4.5] ]", "result": ["3.0000000000000000        5.0000000000000000", "0.0000000000000000        3.0000000000000000        5.0000000000000000        0.0000000000000000", "0.0000000000000000", "2.0000000000000000        4.0000000000000000        6.0000000000000000", "5.0000000000000000        0.0000000000000000        0.0000000000000000"]}, "code": "function linterp(xdata, ydata, xvals) result(yvals)\n    double precision, intent(in) :: xdata(:)\n    double precision, intent(in) :: ydata(size(xdata))\n    double precision :: xvals(:)\n    double precision :: yvals(size(xvals))\n\t \n    double precision :: min_xdata,max_xdata, weight    \n\t \n    integer :: i, data_index\n\t \n    min_xdata = xdata(1)\n    max_xdata = xdata(size(xdata))\n\t\n    do i = 1, size(xvals)\n        if (xvals(i) < min_xdata) then\n            yvals(i) = 0\n        else if (xvals(i) > max_xdata) then\n            yvals(i) = 0 \n        else\n            data_index = 1 \n            do while (xdata(data_index+1) < xvals(i))\n                data_index = data_index + 1\n            end do\n            weight = (xvals(i) - xdata(data_index))/(xdata(data_index+1)-xdata(data_index))\n            yvals(i) = ydata(data_index) + weight*(ydata(data_index + 1) - ydata(data_index))\n        end if\n    end do\n\t \t \n end function"}
{"instruction": "Use Fortran to define a function fqn that takes in three arguments and returns a real number.", "test_case": {"param_num": 3, "param_type": "real*8,integer,integer", "case1": "[1.0,2,3]", "case2": "[0.5,4,2]", "case3": "[2.5,1,5]", "case4": "[3.0,3,1]", "case5": "[4.0,2,4]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function fqn(a, b, c)\n            !+Cross section function\n            real(8)             :: fqn !sigma\n            real(8), intent(in) :: a !eb\n            integer, intent(in) :: b !q\n            integer, intent(in) :: c !n\n        end function"}
{"instruction": "Use Fortran to define a function that calculates a cross section value given four input parameters.", "test_case": {"param_num": 4, "param_type": "real*8,integer,integer,integer", "case1": "[1.0,2,3,4]", "case2": "[0.5,1,1,1]", "case3": "[2.0,3,2,1]", "case4": "[3.0,4,3,2]", "case5": "[4.0,5,4,3]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function fqnm(a, b, c, d)\n            !+Cross section function\n            real(8)             :: fqnm !sigma\n            real(8), intent(in) :: a !eb\n            integer, intent(in) :: b !q\n            integer, intent(in) :: c !n\n            integer, intent(in) :: d !m\n        end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between mi and ma.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[-10,10]", "case5": "[100,1000]", "result": ["2", "11", "11", "-8", "777"]}, "code": "function randint(mi,ma) result(x)\n        implicit none\n        \n        integer,intent(in)  :: mi,ma\n        integer             :: x\n        real    :: r\n        \n        call random_number(r)\n        x = mi + floor(r*(ma-mi+1))\n    end function"}
{"instruction": "Use Fortran to create a block matrix of size matrix_size with blocks of size block_size and set the diagonal blocks to 1.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,2]", "case2": "[5,3]", "case3": "[8,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["1           1           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           0           0           1           1           0           0           0           0           0           0           0           0           1           1", "1           1           1           0           0           1           1           1           0           0           1           1           1           0           0           0           0           0           1           1           0           0           0           1           1", "1           1           1           1           0           0           0           0           1           1           1           1           0           0           0           0           1           1           1           1           0           0           0           0           1           1           1           1           0           0           0           0           0           0           0           0           1           1           1           1           0           0           0           0           1           1           1           1           0           0           0           0           1           1           1           1           0           0           0           0           1           1           1           1", "1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1", "1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1           0           0           0           0           0           0           0           0           0           0           1           1           1           1           1           1           1           1           1           1"]}, "code": "function create_block_matrix(matrix_size, block_size) result(B)\n        use, intrinsic :: iso_fortran_env, only : error_unit\n        implicit none\n        integer, value :: matrix_size, block_size\n        integer, dimension(:, :), allocatable :: B\n        integer :: i, j, k, status\n\n        allocate (B(matrix_size, matrix_size), stat=status)\n        if (status /= 0) then\n            write (unit=error_unit, fmt='(2A)') &\n                'error: can not allocate matrix'\n            stop 2\n        end if\n        B = 0\n        forall (i = 1:size(B, 1):block_size, &\n                j = 0:block_size - 1, &\n                k = 0:block_size - 1, &\n                i + j <= size(B, 1) .and. i + k <= size(B, 2))\n            B(i + j, i + k) = 1\n        end forall\n    end function"}
{"instruction": "Use Fortran to create a function that returns a 2D integer array of size a x b with all elements initialized to 100, except for the first row which is initialized to 0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[3,2]", "case4": "[5,5]", "case5": "[10,10]", "result": ["0", "0         100           0         100           0         100", "0         100         100           0         100         100", "0         100         100         100         100           0         100         100         100         100           0         100         100         100         100           0         100         100         100         100           0         100         100         100         100", "0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100           0         100         100         100         100         100         100         100         100         100"]}, "code": "function ret_arr(a, b)\n        implicit none\n        integer, intent(in) :: a, b\n        integer, dimension(a, b) :: ret_arr\n\n        ret_arr = 100\n        ret_arr(1,:) = 0\n\n      end function"}
{"instruction": "Use Fortran to create a function that returns a value based on the input values of kx and ky.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[0,3]", "case2": "[1,2]", "case3": "[2,1]", "case4": "[3,0]", "case5": "[4,3]", "result": ["64", "32", "128", "512", "320"]}, "code": "function icode(kx, ky)\n        integer, intent(in) :: kx, ky\n        if (ky == 3) then\n            icode = 64 + 64 * kx\n        else ! 0, 1, 2\n            icode = 2**(ky + 3*kx)  \n        end if\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function func(x, y)\n    integer, intent(in) :: x, y\n    func = x + y\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the binomial coefficient of two integers n and k using a factorial formula for stability.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,5]", "case3": "[7,3]", "case4": "[15,7]", "case5": "[20,10]", "result": ["10.000000000000000", "252.00000000000000", "35.000000000000000", "6435.0000000000000", "184756.00000000000"]}, "code": "function binomial_coefficient(n, k)\n    \n        implicit none\n     \n     \n        !##### INPUT/OUTPUT VARIABLES #############################################\n     \n        ! out of number\n        integer, intent(in) :: n\n     \n        ! number\n        integer, intent(in) :: k\n     \n        ! the probability of this to happen\n        real*8 :: binomial_coefficient\n     \n     \n        !##### OTHER VARIABLES ####################################################\n     \n        integer :: n0, k0, ii\n     \n     \n        !##### ROUTINE CODE #######################################################\n        \n        \n        if(k == 0 .or. k == n)then\n            binomial_coefficient = 1d0\n        endif\n        \n        ! copy values\n        n0 = n\n        k0 = k\n        \n        ! use symmetry of binomial coefficients\n        if(k0 > n0 - k0)then\n            k0 = n0 - k0\n        endif\n        \n        ! use factorial formula for stability\n        binomial_coefficient = 1d0\n        do ii = 1, k\n            binomial_coefficient = binomial_coefficient*dble(n+1-ii)\n            binomial_coefficient = binomial_coefficient/dble(ii)\n        enddo\n    \n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the hypotenuse of a right triangle given the lengths of its two legs.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[3.0,4.0]", "case2": "[5.0,12.0]", "case3": "[0.0,0.0]", "case4": "[1.0,1.0]", "case5": "[2.5,3.5]", "result": ["5.0000000000000000", "13.000000000000000", "0.0000000000000000", "1.4142135623730951", "4.3011626335213133"]}, "code": "function pythag(a, b)\n     \n            implicit none\n     \n            real*8, intent(in) :: a, b\n            real*8 :: pythag\n            real*8 :: absa, absb\n     \n            absa = abs(a)\n            absb = abs(b)\n            if(absa > absb)then\n                pythag = absa*sqrt(1d0+(absb/absa)**2)\n            else\n                if(abs(absb) <= 1d-100)then\n                    pythag = 0d0\n                else\n                    pythag = absb*sqrt(1d0+(absa/absb)**2)\n                endif\n            endif\n     \n        end function"}
{"instruction": "Use Fortran to give me a function that returns the index of the first true element in a logical array.", "test_case": {"param_num": 1, "param_type": "logical(:)", "case1": "[.true.,.false.,.false.,.true.]", "case2": "[.false.,.false.,.false.,.false.]", "case3": "[.true.,.true.,.true.,.true.]", "case4": "[.false.,.true.,.false.,.true.,.false.]", "case5": "[.true.,.false.,.true.,.false.,.true.,.false.]", "result": ["1", "5", "1", "2", "1"]}, "code": "function ifirstloc(mask)\n     \n            logical, intent(in) :: mask(:)\n            integer :: ifirstloc, loca(1)\n     \n            loca = maxloc(merge(1, 0, mask))\n            ifirstloc = loca(1)\n            if(.not. mask(ifirstloc))ifirstloc = size(mask)+1\n     \n        end function"}
{"instruction": "Use Fortran to create a function that generates an arithmetic sequence of integers with a given first term, common difference, and number of terms.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,5]", "case2": "[3,4,10]", "case3": "[0,1,3]", "case4": "[10,5,20]", "case5": "[100,1,1000]", "result": ["1           3           5           7           9", "3           7          11          15          19          23          27          31          35          39", "0           1           2", "10          15          20          25          30          35          40          45          50          55          60          65          70          75          80          85          90          95         100         105", "100         101         102         103         104         105         106         107         108         109         110         111         112         113         114         115         116         117         118         119         120         121         122         123         124         125         126         127         128         129         130         131         132         133         134         135         136         137         138         139         140         141         142         143         144         145         146         147         148         149         150         151         152         153         154         155         156         157         158         159         160         161         162         163         164         165         166         167         168         169         170         171         172         173         174         175         176         177         178         179         180         181         182         183         184         185         186         187         188         189         190         191         192         193         194         195         196         197         198         199         200         201         202         203         204         205         206         207         208         209         210         211         212         213         214         215         216         217         218         219         220         221         222         223         224         225         226         227         228         229         230         231         232         233         234         235         236         237         238         239         240         241         242         243         244         245         246         247         248         249         250         251         252         253         254         255         256         257         258         259         260         261         262         263         264         265         266         267         268         269         270         271         272         273         274         275         276         277         278         279         280         281         282         283         284         285         286         287         288         289         290         291         292         293         294         295         296         297         298         299         300         301         302         303         304         305         306         307         308         309         310         311         312         313         314         315         316         317         318         319         320         321         322         323         324         325         326         327         328         329         330         331         332         333         334         335         336         337         338         339         340         341         342         343         344         345         346         347         348         349         350         351         352         353         354         355         356         357         358         359         360         361         362         363         364         365         366         367         368         369         370         371         372         373         374         375         376         377         378         379         380         381         382         383         384         385         386         387         388         389         390         391         392         393         394         395         396         397         398         399         400         401         402         403         404         405         406         407         408         409         410         411         412         413         414         415         416         417         418         419         420         421         422         423         424         425         426         427         428         429         430         431         432         433         434         435         436         437         438         439         440         441         442         443         444         445         446         447         448         449         450         451         452         453         454         455         456         457         458         459         460         461         462         463         464         465         466         467         468         469         470         471         472         473         474         475         476         477         478         479         480         481         482         483         484         485         486         487         488         489         490         491         492         493         494         495         496         497         498         499         500         501         502         503         504         505         506         507         508         509         510         511         512         513         514         515         516         517         518         519         520         521         522         523         524         525         526         527         528         529         530         531         532         533         534         535         536         537         538         539         540         541         542         543         544         545         546         547         548         549         550         551         552         553         554         555         556         557         558         559         560         561         562         563         564         565         566         567         568         569         570         571         572         573         574         575         576         577         578         579         580         581         582         583         584         585         586         587         588         589         590         591         592         593         594         595         596         597         598         599         600         601         602         603         604         605         606         607         608         609         610         611         612         613         614         615         616         617         618         619         620         621         622         623         624         625         626         627         628         629         630         631         632         633         634         635         636         637         638         639         640         641         642         643         644         645         646         647         648         649         650         651         652         653         654         655         656         657         658         659         660         661         662         663         664         665         666         667         668         669         670         671         672         673         674         675         676         677         678         679         680         681         682         683         684         685         686         687         688         689         690         691         692         693         694         695         696         697         698         699         700         701         702         703         704         705         706         707         708         709         710         711         712         713         714         715         716         717         718         719         720         721         722         723         724         725         726         727         728         729         730         731         732         733         734         735         736         737         738         739         740         741         742         743         744         745         746         747         748         749         750         751         752         753         754         755         756         757         758         759         760         761         762         763         764         765         766         767         768         769         770         771         772         773         774         775         776         777         778         779         780         781         782         783         784         785         786         787         788         789         790         791         792         793         794         795         796         797         798         799         800         801         802         803         804         805         806         807         808         809         810         811         812         813         814         815         816         817         818         819         820         821         822         823         824         825         826         827         828         829         830         831         832         833         834         835         836         837         838         839         840         841         842         843         844         845         846         847         848         849         850         851         852         853         854         855         856         857         858         859         860         861         862         863         864         865         866         867         868         869         870         871         872         873         874         875         876         877         878         879         880         881         882         883         884         885         886         887         888         889         890         891         892         893         894         895         896         897         898         899         900         901         902         903         904         905         906         907         908         909         910         911         912         913         914         915         916         917         918         919         920         921         922         923         924         925         926         927         928         929         930         931         932         933         934         935         936         937         938         939         940         941         942         943         944         945         946         947         948         949         950         951         952         953         954         955         956         957         958         959         960         961         962         963         964         965         966         967         968         969         970         971         972         973         974         975         976         977         978         979         980         981         982         983         984         985         986         987         988         989         990         991         992         993         994         995         996         997         998         999        1000        1001        1002        1003        1004        1005        1006        1007        1008        1009        1010        1011        1012        1013        1014        1015        1016        1017        1018        1019        1020        1021        1022        1023        1024        1025        1026        1027        1028        1029        1030        1031        1032        1033        1034        1035        1036        1037        1038        1039        1040        1041        1042        1043        1044        1045        1046        1047        1048        1049        1050        1051        1052        1053        1054        1055        1056        1057        1058        1059        1060        1061        1062        1063        1064        1065        1066        1067        1068        1069        1070        1071        1072        1073        1074        1075        1076        1077        1078        1079        1080        1081        1082        1083        1084        1085        1086        1087        1088        1089        1090        1091        1092        1093        1094        1095        1096        1097        1098        1099"]}, "code": "function arth_i(first, increment, n)\n     \n            integer, intent(in) :: first, increment, n\n            integer, parameter :: npar_arth = 16\n            integer, parameter :: npar2_arth = 8\n            integer :: arth_i(n)\n            integer :: k, k2, temp\n     \n            if(n > 0)arth_i(1) = first\n            if(n <= npar_arth) then\n                do k = 2, n\n                    arth_i(k) = arth_i(k-1) + increment\n                enddo\n            else\n                do k = 2, npar2_arth\n                    arth_i(k) = arth_i(k-1) + increment\n                enddo\n                temp = increment*npar2_arth\n                k = npar2_arth\n                do\n                    if(k >= n)exit\n                    k2 = k+k\n                    arth_i(k+1:min(k2,n)) = temp+arth_i(1:min(k,n-k))\n                    temp = temp + temp\n                    k = k2\n                enddo\n            endif\n        end function"}
{"instruction": "Use Fortran to create a function that generates an arithmetic sequence of length n with first element \"first\" and increment \"increment\", using a loop for n <= 16 and a stepwise approach for n > 16.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,5]", "case2": "[3,4,10]", "case3": "[3,2,1]", "case4": "[5,1,100]", "case5": "[2,4,20]", "result": ["1           3           5           7           9", "3           7          11          15          19          23          27          31          35          39", "3", "5           6           7           8           9          10          11          12          13          14          15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34          35          36          37          38          39          40          41          42          43          44          45          46          47          48          49          50          51          52          53          54          55          56          57          58          59          60          61          62          63          64          65          66          67          68          69          70          71          72          73          74          75          76          77          78          79          80          81          82          83          84          85          86          87          88          89          90          91          92          93          94          95          96          97          98          99         100         101         102         103         104", "2           6          10          14          18          22          26          30          34          38          42          46          50          54          58          62          66          70          74          78"]}, "code": "function arth(first, increment, n)\n    \n        integer, intent(in) :: first, increment, n\n        integer, parameter :: npar_arth = 16\n        integer, parameter :: npar2_arth = 8\n        integer :: arth(n)\n        integer :: k, k2, temp\n     \n        ! initialize first element\n        if(n > 0)arth(1) = first\n     \n        ! calculate by hand if n <= 16\n        if(n <= npar_arth) then\n            do k = 2, n\n                arth(k) = arth(k-1) + increment\n            enddo\n     \n        ! else set entries stepwise by 8 steps\n        else\n            do k = 2, npar2_arth\n                arth(k) = arth(k-1) + increment\n            enddo\n            temp = increment*npar2_arth\n            k = npar2_arth\n            do\n                if(k >= n)exit\n                k2 = k+k\n                arth(k+1:min(k2,n)) = temp+arth(1:min(k,n-k))\n                temp = temp + temp\n                k = k2\n            enddo\n        endif\n    \n    end function"}
{"instruction": "Use Fortran to create a function that calculates the expanded size of an array given its original size and stride.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "9.00000000", "5.00000000", "5.00000000", "5.00000000"]}, "code": "function expand_calc(a_dim, stride_dim)\n    integer, intent(in) :: a_dim, stride_dim\n    expand_calc = a_dim + (a_dim - 1) * (stride_dim - 1)\nend function"}
{"instruction": "Use Fortran to create a function that calculates the output dimension of a convolutional neural network layer given the input dimension, kernel dimension, and stride dimension.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,3,2]", "case2": "[20,5,3]", "case3": "[15,4,1]", "case4": "[8,2,2]", "case5": "[12,3,4]", "result": ["4.00000000", "6.00000000", "12.0000000", "4.00000000", "3.00000000"]}, "code": "function res_calc(a_dim, kernel_dim, stride_dim)\n    integer, intent(in) :: a_dim, kernel_dim, stride_dim\n    res_calc = (a_dim - kernel_dim) / stride_dim + 1\nend function"}
{"instruction": "Use Fortran to create a function that converts a base64 character to its corresponding integer value.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'+'", "case2": "'/'", "case3": "'A'", "case4": "'z'", "case5": "'9'", "result": ["43.0000000", "43.0000000", "43.0000000", "43.0000000", "43.0000000"]}, "code": "function frombase64( char )\r\n    character(len=*), intent(in) :: char\r\n\r\n    if ( char == '+' ) then\r\n        frombase64 = 62\r\n    elseif ( char == '/' ) then\r\n        frombase64 = 63\r\n    elseif ( iachar(char) < iachar('A') ) then\r\n        frombase64 = 52 + iachar(char) - iachar('0')\r\n    elseif ( iachar(char) <= iachar('Z') ) then\r\n        frombase64 = iachar(char) - iachar('A')\r\n    else\r\n        frombase64 = 26 + iachar(char) - iachar('a')\r\n    endif\r\nend function"}
{"instruction": "Use Fortran to give me a function named \"bar\" that takes two integer inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2147483647,-2147483648]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function bar(a,b) ! in :foobar:bar.f\n            integer :: a\n            integer :: b\n            integer :: bar\n        end function"}
{"instruction": "Use Fortran to give me a function that replaces a single substring with another substring in a given input string.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'hello world','world',''", "case3": "'hello world','world','everyone','replace_all'", "case4": "'hello world','world','everyone','last_only'", "case5": "'hello world','','everyone'", "result": ["hello everyone", "hello", "hello everyone", "hello everyone", "hello world"]}, "code": "function replace_single( input, substring, replacement, mode )\r\n    character(len=*), intent(in)  :: input\r\n    character(len=*), intent(in)  :: substring\r\n    character(len=*), intent(in)  :: replacement\r\n    integer, intent(in), optional :: mode\r\n\r\n    character(len=:), allocatable :: replace_single\r\n\r\n    integer                       :: k, pos, mode_\r\n    logical                       :: back\r\n\r\n    ! Careful with zero-length substrings\r\n    if ( substring == '' ) then\r\n        replace_single = input\r\n        return\r\n    endif\r\n\r\n    mode_ = replace_all\r\n    if ( present(mode) ) then\r\n        mode_ = mode\r\n    endif\r\n\r\n    back = ( mode_ == last_only )\r\n\r\n    !\r\n    ! Find the substring\r\n    !\r\n    pos            = 1\r\n    replace_single = ''\r\n\r\n    do\r\n         k = index( input(pos:), substring, back )\r\n         !write(*,*) 'k = ', k\r\n\r\n         if ( k >= 1 ) then\r\n             replace_single = replace_single // input(pos:pos+k-2) // replacement\r\n             pos = pos + k + len(substring) - 1\r\n         else\r\n             exit\r\n         endif\r\n\r\n         if ( mode_ /= replace_all ) then\r\n             exit\r\n         endif\r\n    enddo\r\n\r\n    replace_single = replace_single // input(pos:)\r\n\r\nend function"}
{"instruction": "Use Fortran to create a function that trims a string by removing all characters that are not in a specified set.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world',' '", "case2": "'  hello world  ',' '", "case3": "'hello world  ',' '", "case4": "'  hello world',' '", "case5": "'hello world','world'", "result": ["hello world", "hello world", "hello world", "hello world", "hello"]}, "code": "function trimx( input, set )\r\n    character(len=*), intent(in)         :: input\r\n    character(len=*), intent(in)         :: set\r\n    character(len=:), allocatable        :: trimx\r\n\r\n    integer                              :: start, stop\r\n\r\n    start = verify( input, set )\r\n    stop  = verify( input, set, .true. )\r\n\r\n    trimx = input(start:stop)\r\n\r\nend function"}
{"instruction": "Use Fortran to create a function that trims a string from the left side based on a set of characters.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world',' '", "case2": "'  hello world',' '", "case3": "'hello world','helo'", "case4": "'hello world','h'", "case5": "'hello world','world'", "result": ["hello world", "hello world", "world", "ello world", "hello world"]}, "code": "function trimxleft( input, set )\r\n    character(len=*), intent(in)         :: input\r\n    character(len=*), intent(in)         :: set\r\n    character(len=:), allocatable        :: trimxleft\r\n\r\n    integer                              :: start\r\n\r\n    start = verify( input, set )\r\n\r\n    trimxleft = input(start:)\r\n\r\nend function"}
{"instruction": "Use Fortran to create a function that trims a string from the right side based on a set of characters.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world','world'", "case2": "'fortran is fun','is fun'", "case3": "'1234567890','0123456789'", "case4": "'abcdefg','gfe'", "case5": "'','abc'", "result": ["hello", "fortra", "", "abcd", ""]}, "code": "function trimxright( input, set )\r\n    character(len=*), intent(in)         :: input\r\n    character(len=*), intent(in)         :: set\r\n    character(len=:), allocatable        :: trimxright\r\n\r\n    integer                              :: stop\r\n\r\n    stop  = verify( input, set, .true. )\r\n\r\n    trimxright = input(:stop)\r\n\r\nend function"}
{"instruction": "Use Fortran to give me a function that extracts integers from a character string.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "['123',3,1]", "case2": "['-123',4,1]", "case3": "['123',3,2]", "case4": "['-123',4,2]", "case5": "['123',2,1]", "result": ["123", "-123", "123", "-123", "12"]}, "code": "function intstr(string,lenstring,laststring)\n \n!***********************************************************************\n!     \n!     LBsoft subroutine for extracting integers from a character \n!     string\n!     originally written in JETSPIN by M. Lauricella et al.\n!     \n!     licensed under the 3-Clause BSD License (BSD-3-Clause)\n!     author: M. Lauricella\n!     last modification July 2018\n!     \n!***********************************************************************\n  \n  implicit none\n  \n  character(len=*), intent(inout) :: string\n  integer, intent(in) :: lenstring\n  integer, intent(out) :: laststring\n  \n  integer :: intstr\n  \n  integer :: j,isn\n  character*1, parameter, dimension(0:9) :: & \n   n=(/'0','1','2','3','4','5','6','7','8','9'/)\n  logical :: flag,lcount,final\n  character*1 :: ksn\n  character*1, dimension(lenstring) :: word\n  \n  do j=1,lenstring\n    word(j)=string(j:j)\n  enddo\n  \n  isn=1\n  laststring=0\n  ksn='+'\n  intstr=0\n  flag=.false.\n  final=.false.\n  lcount=.false.\n  \n  \n  do while(laststring<lenstring.and.(.not.final))\n    \n    laststring=laststring+1\n    flag=.false.\n    \n    do j=0,9\n      \n      if(n(j)==word(laststring))then\n        \n        intstr=10*intstr+j\n        lcount=.true.\n        flag=.true.\n        \n      endif\n    \n    enddo\n    \n    if(lcount.and.(.not.flag))final=.true.\n    if(flag .and. ksn=='-')isn=-1\n    ksn=word(laststring)\n    \n  enddo\n\n  intstr=isn*intstr\n\n  do j=laststring,lenstring\n    word(j-laststring+1)=word(j)\n  enddo\n  do j=lenstring-laststring+2,lenstring\n    word(j)=' '\n  enddo\n  \n  do j=1,lenstring\n    string(j:j)=word(j)\n  enddo\n  \n  return\n  \n  end function"}
{"instruction": "Use Fortran to create a function that checks if an array has any duplicate elements and returns a logical value.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[1,1,1,1,1]", "case3": "[1,2,3,4,5,1]", "case4": "[1,2,3,4,5,6,7,8,9,10]", "case5": "[1,2,3,4,5,5,4,3,2,1]", "result": ["F", "T", "T", "F", "T"]}, "code": "function has_duplicates(data) result(result)\n        integer, dimension(:), intent(in) :: data\n        logical :: result\n        integer :: i, j\n\n        result = .false.\n        outer: do i = 1, size(data) - 1\n            do j = i + 1, size(data)\n                if (data(i) == data(j)) then\n                    result = .true.\n                    exit outer\n                end if\n            end do\n        end do outer\n    end function"}
{"instruction": "Use Fortran to define a function that returns the rank of a process given its row and column in a 2D grid of size n_rows x n_cols.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,1,5,5]", "case2": "[2,3,4,6]", "case3": "[0,0,3,3]", "case4": "[4,2,7,8]", "case5": "[5,5,10,10]", "result": ["6.00000000", "14.0000000", "0.00000000", "18.0000000", "55.0000000"]}, "code": "function get_rank(row, col, n_rows, n_cols)\n        integer, intent(in) :: row, col, n_rows, n_cols\n\n        if (      0 <= col .and. col < n_cols &\n            .and. 0 <= row .and. row < n_rows) then\n                get_rank = row + col * n_rows\n        else\n            get_rank = MPI_PROC_NULL\n        end if\n        return\n    end function"}
{"instruction": "Use Fortran to give me a function that scales a value back to its original range given its scaled value, maximum and minimum values.", "test_case": {"param_num": 3, "param_type": "real*8,real*8,real*8", "case1": "[0.5,10.0,0.0]", "case2": "[0.0,1.0,0.0]", "case3": "[1.0,1.0,0.0]", "case4": "[0.25,100.0,-100.0]", "case5": "[0.75,100.0,-100.0]", "result": ["5.0000000000000000", "0.0000000000000000", "1.0000000000000000", "-50.000000000000000", "50.000000000000000"]}, "code": "function lin_scale_back(val_scaled, val_max, val_min) result(val)\n    implicit none\n        double precision    :: val_scaled, val_max, val_min\n        double precision    :: val\n        \n        val = (val_max-val_min)*val_scaled + val_min\n    end function"}
{"instruction": "Use Fortran to give me a function that converts a global index to local coordinates given the block length, number of processors, and global index.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,4,25]", "case2": "[5,2,7]", "case3": "[8,3,20]", "case4": "[15,5,60]", "case5": "[12,6,35]", "result": ["5.00000000", "2.00000000", "4.00000000", "15.0000000", "11.0000000"]}, "code": "function g_to_l_coord(block_len, nr_procs, g_i)\n        integer, intent(in) :: block_len, nr_procs, g_i\n        integer :: remainder, nr_blocks\n        nr_blocks = (g_i - 1)/(nr_procs*block_len)\n        remainder = mod(g_i - 1, block_len) + 1\n        g_to_l_coord = nr_blocks*block_len + remainder\n    end function"}
{"instruction": "Use Fortran to define a function that calculates whether a given block of length block_len belongs to a specific process my_proc out of nr_procs processes, based on the global index g_i.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[10,4,2,25]", "case2": "[5,3,1,15]", "case3": "[20,5,3,50]", "case4": "[8,2,1,30]", "case5": "[15,6,4,60]", "result": ["1", "0", "0", "1", "0"]}, "code": "function is_mine(block_len, nr_procs, my_proc, g_i)\n        integer, intent(in) :: block_len, nr_procs, my_proc, g_i\n        integer :: nr_blocks\n        nr_blocks = (g_i - 1)/block_len\n        is_mine = my_proc == mod(nr_blocks, nr_procs)\n    end function"}
{"instruction": "Use Fortran to create a function that returns the index of the first character in a string that is not a valid floating point number character.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'+'", "case2": "'-'", "case3": "'1.23'", "case4": "'e'", "case5": "'abc'", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function foo(expr)\n    character(*), intent(in) :: expr\n    character(*), parameter  :: chrs = '-+.0123456789eEdD'\n\n    foo = index(chrs, expr)\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random string of specified length from a given set of characters.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'abcd',5", "case2": "'123',3", "case3": "'xyz',10", "case4": "'abc',0", "case5": "'1234',8", "result": ["cdcaa", "222", "xzxzzxxxyy", "", "22242142"]}, "code": "function random_string(chars,length) result(out)\n\n!$@(#) M_random::random_string(3f): create random string composed of provided characters of specified length\n\ncharacter(len=*),intent(in)     :: chars\ninteger,intent(in)              :: length\ncharacter(len=:),allocatable    :: out\n   real                         :: x\n   integer                      :: ilen   ! length of list of characters\n   integer                      :: which\n   integer                      :: i\n   ilen=len(chars)\n   out=''\n   if(ilen.gt.0)then\n      do i=1,length\n         call random_number(x)\n         which=nint(real(ilen-1)*x)+1\n         out=out//chars(which:which)\n      enddo\n   endif\nend function"}
{"instruction": "Use Fortran to create a function that retrieves the value of an environment variable and returns a default value if the variable is undefined or blank.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'HOME','/home/user/'", "case2": "'USER',''", "case3": "'PATH','/usr/bin:/usr/local/bin'", "case4": "'LANG','en_US.UTF-8'", "case5": "'SHELL','/bin/bash'", "result": ["/home/user/", "", "D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;D:\\Miniconda3\\bin;D:\\Miniconda3\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;C:\\Program Files\\Microsoft\\jdk-11.0.16.101-hotspot\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0;D:\\;D:\\fortran\\mingw64\\bin;C:\\Users\\98365\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;.;D:\\PyCharm 2023.2.1\\bin;.;D:\\Microsoft VS Code\\bin;D:\\Miniconda3\\Library\\Bin", "en_US.UTF-8", "/bin/bash"]}, "code": "function get_env(NAME,DEFAULT) result(VALUE)\n    implicit none\n    !> name of environment variable to get the value of\n    character(len=*),intent(in)          :: NAME\n    !> default value to return if the requested value is undefined or blank\n    character(len=*),intent(in),optional :: DEFAULT\n    !> the returned value\n    character(len=:),allocatable         :: VALUE\n    integer                              :: howbig\n    integer                              :: stat\n    integer                              :: length\n        ! get length required to hold value\n        length=0\n        if(NAME.ne.'')then\n           call get_environment_variable(NAME, length=howbig,status=stat,trim_name=.true.)\n           select case (stat)\n           case (1)\n               !*!print *, NAME, \" is not defined in the environment. Strange...\"\n               VALUE=''\n           case (2)\n               !*!print *, \"This processor doesn't support environment variables. Boooh!\"\n               VALUE=''\n           case default\n               ! make string to hold value of sufficient size\n               allocate(character(len=max(howbig,1)) :: VALUE)\n               ! get value\n               call get_environment_variable(NAME,VALUE,status=stat,trim_name=.true.)\n               if(stat.ne.0)VALUE=''\n           end select\n        else\n           VALUE=''\n        endif\n        if(VALUE.eq.''.and.present(DEFAULT))VALUE=DEFAULT\n     end function"}
{"instruction": "Use Fortran to create a function that takes a key and a number n, calculates the hash index by taking the modulus of the key and n, and returns the maximum of the resulting index and 1.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[100,7]", "case3": "[0,5]", "case4": "[123456789,1000]", "case5": "[999,100]", "result": ["1", "2", "1", "789", "99"]}, "code": "function hash_index(key,n) result(indx)\n  integer::key\n  integer::n\n  integer::indx\n\n  indx = mod(key,n)\n  indx = max(indx,1)\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["3.9988566667343811E-317   3.9827936044567905E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "7.1072489386561667E-317   7.0911858763785761E-317   0.0000000000000000        0.0000000000000000", "7.8843470066366131E-317   7.8682839443590225E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "3.4484042968645648E-317   3.4323491396373076E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "3.4484042968645648E-317   3.4323491396373076E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that calculates the size of an array based on its minimum size, old size, and new size.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[10,20,30]", "case2": "[5,15,25]", "case3": "[100,200,300]", "case4": "[50,100,150]", "case5": "[1,2,3]", "result": ["39", "34", "343", "174", "6"]}, "code": "function getStorageSize(minSize, oldSize, newSize) result(arraySize)\n    integer, intent(in) :: minSize, oldSize, newSize\n    integer :: arraySize\n\n    integer :: overAlloc\n    \n    if (oldSize >= newSize .and. oldSize <= 2 * newSize) then\n      arraySize = oldSize\n    else\n      overAlloc = newSize / 8\n      if (newSize < 9) then\n        overAlloc = overAlloc + 3\n      else\n        overAlloc = overAlloc + 6\n      end if\n      arraySize = newSize + overAlloc\n      if (arraySize < minSize) then\n        arraySize = max(oldSize, minSize)\n      end if\n    end if\n\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns the sum of the first input and twice the second input.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,-4]", "result": ["5", "11", "0", "-3", "-6"]}, "code": "function fn1 (x, y)\n    integer, intent(in) :: x, y\n    integer :: fn1\n    fn1 = x + 2 * y\n  end function"}
{"instruction": "Use Fortran to give me a function that wraps an integer x to the range [1, ub] if isPer is 1.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,10,1]", "case2": "[5,3,0]", "case3": "[7,5,1]", "case4": "[2,8,0]", "case5": "[9,4,1]", "result": ["1", "0", "2", "0", "1"]}, "code": "function wrap(x, ub, isPer)\n  implicit none\n  integer, intent(in) :: x, ub, isPer\n  integer :: wrap\n\n  if(isPer /= 1) return\n\n  wrap = modulo(x-1, ub) + 1\n end function"}
{"instruction": "Use Fortran to give me a function that calculates the modulo of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[5,2]", "case3": "[100,7]", "case4": "[0,5]", "case5": "[15,15]", "result": ["1.00000000", "1.00000000", "2.00000000", "0.00000000", "0.00000000"]}, "code": "function imodulo(x, y) result(r)\ninteger, intent(in) :: x, y\nr = x-floor(real(x)/y)*y\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the remainder of x divided by y.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[0,5]", "case3": "[-10,3]", "case4": "[10,-3]", "case5": "[0,-5]", "result": ["1.00000000", "0.00000000", "-1.00000000", "1.00000000", "5.00000000"]}, "code": "function imod(x, y) result(r)\ninteger, intent(in) :: x, y\nr = x-floor(real(x)/y)*y\nif (x < 0 .and. y < 0) return\nif (x < 0) r = r - y\nif (y < 0) r = r - y\nend function"}
{"instruction": "Use Fortran to give me a function that returns the minimum value between two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "3.00000000", "2.00000000", "1.00000000", "2.00000000"]}, "code": "function imin(x, y) result(r)\ninteger, intent(in) :: x, y\nif (x < y) then\n    r = x\nelse\n    r = y\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that returns the maximum of two integer inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-4]", "result": ["2.00000000", "4.00000000", "3.00000000", "5.00000000", "-2.00000000"]}, "code": "function imax(x, y) result(r)\ninteger, intent(in) :: x, y\nif (x > y) then\n    r = x\nelse\n    r = y\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function f1(a, b) result(r)\ninteger, intent(in) :: a, b\nr = a + b\nend function"}
{"instruction": "Use Fortran to give me a function that takes an integer n and an array a of length n, and returns the sum of the elements in a.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[5,[1,2,3,4,5]]", "case2": "[3,[10,20,30]]", "case3": "[0,[]]", "case4": "[1,[100]]", "case5": "[4,[1,2,3,4]]", "result": ["15.0000000", "60.0000000", "0.00000000", "100.000000", "10.0000000"]}, "code": "function f2(n, a) result(r)\ninteger, intent(in) :: n, a(n)\nr = sum(a)\nend function"}
{"instruction": "Use Fortran to define a function that takes an integer input and returns 0 while also setting the output integer to the input integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[0,0]", "case3": "[-1,-1]", "case4": "[2147483647,0]", "case5": "[-2147483648,0]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function f4(a, b)\ninteger, intent(in) :: a\ninteger, intent(out) :: b\nb = a\nf4 = 0\nend function"}
{"instruction": "Use Fortran to create a function that takes an array of integers and returns an array of the count of each integer in the input array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[1,1,2,2,3,3,4,4,5,5]", "case3": "[5,4,3,2,1]", "case4": "[1,2,3,4,5,1,2,3,4,5]", "case5": "[1,1,1,1,1,1,1,1,1,1]", "result": ["1           1           1           1           1", "2           2           2           2           2", "1           1           1           1           1", "2           2           2           2           2", "10"]}, "code": "function bincount(x)\r\n    integer, dimension(:), intent(in) :: x\r\n    integer, dimension(:), allocatable :: bincount\r\n\r\n    integer :: i, k\r\n\r\n    allocate(bincount(maxval(x)))\r\n    bincount = 0\r\n\r\n    do i = 1, size(x)\r\n       k = x(i)\r\n       bincount(k) = bincount(k) + 1\r\n    end do\r\n  end function"}
{"instruction": "Use Fortran to create a function that returns a 2D array of size a x b filled with 1.0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[4,5]", "case4": "[10,10]", "case5": "[100,100]", "result": ["1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000", "1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000"]}, "code": "function returnMat( a, b ) result( mat )\n    integer:: a, b\n    double precision, dimension(a,b):: mat \n    mat = 1d0\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers as input and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "result": ["8.2728960406268363E-317   8.2568329783492457E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.5455494604124540E-317   3.5294863981348634E-317   0.0000000000000000        0.0000000000000000", "8.6290659884512076E-317   8.6130029261736170E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "7.7872097481390573E-317   7.7711466858614667E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "7.4957979726463899E-317   7.4797349103687993E-317   0.0000000000000000        0.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to define a function that sets candlestick chart settings with input parameters for setting type, range type, average period, and factor.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,real*8", "case1": "[1,1,10,0.5]", "case2": "[2,2,20,1.0]", "case3": "[3,3,30,1.5]", "case4": "[4,1,40,2.0]", "case5": "[5,2,50,2.5]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function TA_SetCandleSettings(settingType,rangeType,avgPeriod,factor)& \n        result(retCode) bind(C,name=\"TA_SetCandleSettings\")\n            use iso_c_binding,only:c_int,c_double\n            integer(kind=c_int),intent(in),value::settingType,rangeType,avgPeriod\n            real(kind=c_double),intent(in),value::factor\n        end function"}
{"instruction": "Use Fortran to create a function that takes in three integers, adds the first two and subtracts the third, alters the value of the third integer and counts the number of times the function is called.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[-1,-2,-3]", "case5": "[2147483647,-2147483648,0]", "result": ["0", "0", "0", "0", "-1"]}, "code": "function func2(a,b,c) result(f)    !return variable declared to be 'f'.\n        implicit none\n        integer, intent(in) :: a,b    !can declare and enforce that variables \n                                      !are not modified by the function.\n        integer, intent(inout) :: c\n        integer :: f     !function return type declared inside the function.\n        integer :: cnt = 0    !GOTCHA - initialisation implies variable is\n                              !saved between function calls.\n        f = a + b - c\n        c = 4    !altering the value of an input variable.\n        cnt  = cnt + 1    !count number of function calls.\n    end function"}
{"instruction": "Use Fortran to give me a pure function that multiplies three integer inputs and returns their product.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[5,5,5]", "case5": "[10,20,30]", "result": ["6", "0", "6000000", "125", "6000"]}, "code": "function func3(a,b,c)  !a pure function can have no side-effects.\n        implicit none\n        integer, intent(in) :: a,b,c\n        integer :: func3\n        func3 = a*b*c\n    end function"}
{"instruction": "Use Fortran to create a function that takes a character as input and returns an integer based on a select case statement.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'E'", "case2": "'e'", "case3": "'A'", "case4": "'1'", "case5": "' '", "result": ["-1234", "-1234", "-1234", "-1234", "-1234"]}, "code": "function char2type (char)\n  character, intent(in) :: char\n  integer :: char2type\n\n  select case (char)\n    case ('E','e')\n      char2type=1\n    case default\n      char2type=-1234\n  end select\nend function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is a letter or an underscore.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'_'", "case4": "'1'", "case5": "' '", "result": ["F", "F", "F", "F", "F"]}, "code": "function isalpha(c) result(yes)\n      character(len=1),intent(in):: c\n      logical:: yes\n      yes=(iachar(c)>=iachar('a').and. &\n           iachar(c)<=iachar('z')).or.&\n           (iachar(c)>=iachar('A').and.&\n           iachar(c)<=iachar('Z'))&\n           .or. c=='_'\n    end function"}
{"instruction": "Use Fortran to give me a function that checks if a given character is a space.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "' '", "case3": "'1'", "case4": "'&'", "case5": "'/'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isspace(c) result(yes)\n      character(len=1),intent(in):: c\n      logical:: yes\n      yes=(c==' ')\n    end function"}
{"instruction": "Use Fortran to define a function that reads the dimensions of a tiling grid from an environment variable and returns a logical value indicating success or failure.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[0,0]", "case3": "[100,200]", "case4": "[999,888]", "case5": "[1,1]", "result": ["F", "F", "F", "F", "F"]}, "code": "function get_grid_dims(nx, ny) result(success)\n    implicit none\n    integer, intent(inout) :: nx, ny\n    logical :: success\n    character(len=20) :: lstr\n    integer :: idx, ierr\n\n    success = .FALSE.\n\n    call get_environment_variable(NAME='GOCEAN_OMP_GRID', VALUE=lstr, &\n                                  STATUS=ierr)\n\n    if(ierr /= 0)return\n\n    ! We expect the string to have the format 'AxB' where A and B are\n    ! integers.\n    idx = index(lstr, 'x')\n    if(idx == 0)then\n       write (*,\"(/'shallow_omp_mod::get_grid_dims: failed to parse ' &\n                 &  'GOCEAN_OMP_GRID string: ',(A))\") TRIM(lstr)\n       write (*,\"('   -  will use defaults for dimensions of tiling grid')\")\n       return\n    endif\n\n    read(lstr(1:idx-1),*,iostat=ierr) nx\n    if(ierr /= 0)return\n\n    read(lstr(idx+1:),*,iostat=ierr) ny\n    if(ierr == 0)success = .TRUE.\n\n  end function"}
{"instruction": "Use Fortran to give me a function that replaces all occurrences of a given text in a string with a replacement text.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'this is a test','is','was'", "case3": "'testing 123','test','exam'", "case4": "'fortran is fun','fun','challenging'", "case5": "'the quick brown fox','quick','slow'", "result": ["hello every", "thwas was a te", "examing 123", "fortran is cha", "the slow brown fox"]}, "code": "function replace_text(str, text, rep) result(outs)\n      character(*) :: str, text, rep\n      character(len=len(str)) :: outs\n      integer :: i, nt, nr\n\n      outs = str\n      nt = len_trim(text)\n      nr = len_trim(rep)\n      do\n         i = index(outs, text(:nt))\n         if (i == 0) exit\n         outs = outs(:i-1) // rep(:nr) // outs(i+nt:)\n      end do\n   end function"}
{"instruction": "Use Fortran to create a function that maps a given character to its corresponding index in the alphabet.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'Z'", "case3": "'M'", "case4": "'X'", "case5": "'F'", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function char_map(char) result(T)\n      character(len=1), intent(in) :: char\n      character(len=26) :: A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n      T = index(A, char)\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the value of a specific element in Pascal's Triangle.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,4]", "case3": "[3,0]", "case4": "[7,3]", "case5": "[1,1]", "result": ["10", "210", "1", "35", "1"]}, "code": "function pascalTriangle (a,b)\n    implicit none\n    integer :: pascalTriangle\n    integer, intent (in) :: a,b\n    integer i\n    pascalTriangle = 1\n    do i = 0, b-1\n      pascalTriangle = pascalTriangle*(a-i)/(i+1)\n    end do\n  end function"}
{"instruction": "Use Fortran to create a function that calculates the values of a 3x3 matrix based on input values j1, j2, j3, m1, m2, and m3.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[1,2,3,4,5,6]", "case2": "[0,0,0,0,0,0]", "case3": "[1,1,1,0,0,0]", "case4": "[10,20,30,40,50,60]", "case5": "[100,200,300,400,500,600]", "result": ["4          -3           5           2          -3           7           0          -3           9", "0           0           0           0           0           0           0           0           0", "1           1           1           1           1           1           1           1           1", "40         -30          50          20         -30          70           0         -30          90", "400        -300         500         200        -300         700           0        -300         900"]}, "code": "function CALC_R_A(j1,j2,j3,m1,m2,m3) result (r)\n      integer(4):: j1,j2,j3,m1,m2,m3\n      integer(4), dimension(3,3) :: r\n      \n      R(1,1)=-j1+j2+j3\n      R(1,2)=j1-j2+j3\n      R(1,3)=j1+j2-j3\n      R(2,1)=j1-m1\n      R(2,2)=j2-m2\n      R(2,3)=j3-m3\n      R(3,1)=j1+m1\n      R(3,2)=j2+m2\n      R(3,3)=j3+m3         \n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the intensity of a Gaussian distribution given the area and the width.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[10.0,2.0]", "case2": "[20.0,4.0]", "case3": "[30.0,2.5]", "case4": "[40.0,1.0]", "case5": "[50.0,4.5]", "result": ["Infinity", "Infinity", "Infinity", "Infinity", "Infinity"]}, "code": "function Intensity_Gauss(area,W)result(y0)\n      real(8),intent(in) :: area,W\n      real(8) y0\n      y0=area/(W*sqrt(2d0*pi))\n   end function"}
{"instruction": "Use Fortran to give me a function for calculating the intensity of a Lorentzian curve given the area and full width at half maximum (FWHM).", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.0]", "result": ["Infinity", "Infinity", "NaN", "Infinity", "Infinity"]}, "code": "function Intensity_Lorentz(area,W)result(y0)\n      real(8),intent(in) :: area,W\n      real(8) y0\n      y0=area/(W*pi)\n   end function"}
{"instruction": "Use Fortran to give me a function that calculates the value of jkcos based on the values of j1, j2, k1, k2, and molaxis.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,character", "case1": "[1,2,3,4,'X']", "case2": "[2,3,4,5,'Y']", "case3": "[3,2,1,0,'Z']", "case4": "[5,4,3,2,'X']", "case5": "[1,3,5,7,'Y']", "result": ["(5.4772255750516612,0.0000000000000000)", "(-0.0000000000000000,-7.4833147735478827)", "(0.0000000000000000,0.0000000000000000)", "(-7.4833147735478827,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)"]}, "code": "function DIR_COSE_K_SHAFFER(j1,j2,k1,k2,molaxis)result(jkcos)\n      integer(4) j1,j2,k1,k2,Jdiff\n      character(1) :: molaxis\n      complex(8) jkcos\n   \n      jkcos=(0d0,0d0)\n      if(.NOT.(molaxis=='X'.OR.molaxis=='Y'.OR.molaxis=='Z'))then\n         stop 'wrong molaxis enum DIR_COSE_K'\n      end if\n      Jdiff=j2-j1\n      select case(Jdiff)\n         case(1)\n         if((k2==k1+1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n            jkcos=sqrt(dble((J2+K1)*(J2+K1+1)))\n            if(molaxis=='Y')then\n               jkcos=-CMPLX(0d0,dble(jkcos),kind=8)\n            end if   \n         else if((k1==k2).AND.(molaxis=='Z'))then\n            jkcos=2d0*sqrt(dble(j2**2-k1**2))\n         else if((k2==k1-1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n            jkcos=-sqrt(dble((J2-K1)*(J2-K1+1)))\n            if(molaxis=='Y')then\n               jkcos=CMPLX(0d0,dble(jkcos),kind=8)\n            end if\n         end if\n         case(0)\n         if((k2==k1+1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n            jkcos=-sqrt(dble(J1*(J1+1)-K1*(K1+1)))\n            if(molaxis=='Y')then\n               jkcos=-CMPLX(0d0,dble(jkcos),kind=8)\n            end if\n            \n         else if((k1==k2).AND.(molaxis=='Z'))then\n            jkcos=2d0*K1\n            \n         else if((k2==k1-1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n            jkcos=-sqrt(dble(J1*(J1+1)-K1*(K1-1)))\n            if(molaxis=='Y')then\n               jkcos=CMPLX(0d0,dble(jkcos),kind=8)\n            end if\n         end if\n         case(-1)\n         if((k2==k1+1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n            jkcos=sqrt(dble((J1-K1)*(J1-K1-1)))\n            if(molaxis=='Y')then\n               jkcos=-CMPLX(0d0,dble(jkcos),kind=8)\n            end if\n         else if((k1==k2).AND.(molaxis=='Z'))then\n            jkcos=-2d0*sqrt(dble(J1**2-K1**2))\n         else if((k2==k1-1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n            jkcos=-sqrt(dble((J1+K1)*(J1+K1-1)))\n            if(molaxis=='Y')then\n               jkcos=CMPLX(0d0,dble(jkcos),kind=8)\n            end if\n         end if\n      end select\n   end function"}
{"instruction": "Use Fortran to give me a function for the direct product of three Clebsch-Gordan coefficients.", "test_case": {"param_num": 8, "param_type": "integer,integer,integer,integer,integer,integer,character,character", "case1": "[1,2,3,4,5,6,'X','Y']", "case2": "[2,3,4,5,6,7,'Y','Z']", "case3": "[3,4,5,6,7,8,'X','Z']", "case4": "[4,5,6,7,8,9,'Y','X']", "case5": "[5,6,7,8,9,10,'Z','Y']", "result": ["", "", "", "", ""]}, "code": "function DIR_COSE_minus_SHAFFER(j1,j2,k1,k2,m1,m2,labaxis,molaxis) result(res)\n      integer(4) j1,j2,k1,k2,m1,m2\n      character(1) labaxis,molaxis\n      complex(8) res,jcos,jkcos,jmcos\n      \n      if(j2/=j1-1)stop 'wrong dircose minus'\n      jcos=(4d0*J1*sqrt(4d0*J1**2-1d0))**(-1d0)\n      jkcos=(0d0,0d0)\n      jmcos=(0d0,0d0)\n      \n      if((k2==k1+1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n         jkcos=sqrt(dble((J1-K1)*(J1-K1-1)))\n         if(molaxis=='Y')then\n            jkcos=-CMPLX(0d0,dble(jkcos),kind=8)\n         end if\n      else if((k1==k2).AND.(molaxis=='Z'))then\n         jkcos=-2d0*sqrt(dble(4*J1**2-K1**2))\n      else if((k2==k1-1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n         jkcos=-sqrt(dble((J1+K1)*(J1+K1-1)))\n         if(molaxis=='Y')then\n            jkcos=CMPLX(0d0,dble(jkcos),kind=8)\n         end if\n      end if\n      \n      !if(abs(m2-m1)>1)stop 'wrong dircose plus m'\n      if((m2==m1+1).AND.((labaxis=='X').OR.(labaxis=='Y')))then\n         jmcos=sqrt(dble((J1-m1)*(J1-m1-1)))\n         if(labaxis=='Y')then\n            jmcos=CMPLX(0d0,dble(jmcos),kind=8)\n         end if\n      else if((m1==m2).AND.(labaxis=='Z'))then\n         jmcos=-2d0*sqrt(dble(4d0*J1**2-M1**2))\n      else if((m2==m1-1).AND.((labaxis=='X').OR.(labaxis=='Y')))then\n         jmcos=-sqrt(dble((J1+M1)*(J1+M1-1)))\n         if(labaxis=='Y')then\n            jmcos=-CMPLX(0d0,dble(jmcos),kind=8)\n         end if\n      end if\n      \n      res = jcos*jkcos*jmcos\n   end function"}
{"instruction": "Use Fortran to give me a function for calculating the directional cosine between two vectors.", "test_case": {"param_num": 8, "param_type": "integer,integer,integer,integer,integer,integer,character,character", "case1": "[1,1,1,1,1,1,'X','X']", "case2": "[2,2,2,2,2,2,'Y','Y']", "case3": "[3,3,3,3,3,3,'Z','Z']", "case4": "[4,4,4,4,4,4,'X','Y']", "case5": "[5,5,5,5,5,5,'Y','Z']", "result": ["(0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)", "(0.75000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)", "(0.0000000000000000,0.0000000000000000)"]}, "code": "function DIR_COSE_zero_SHAFFER(j1,j2,k1,k2,m1,m2,labaxis,molaxis) result(res)\n      integer(4) j1,j2,k1,k2,m1,m2\n      character(1) labaxis,molaxis\n      complex(8) res,jcos,jkcos,jmcos\n      \n      if(j2/=j1)stop 'wrong dircose zero'\n      \n      jcos=(4d0*J1*(J1+1))**(-1d0)\n      jkcos=(0d0,0d0)\n      jmcos=(0d0,0d0)\n      \n      !if(abs(k2-k1)>1)stop 'wrong dircose plus k'\n      if((k2==k1+1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n         jkcos=-sqrt(dble(J1*(J1+1d0)-K1*(K1+1d0)))\n         if(molaxis=='Y')then\n            jkcos=-CMPLX(0d0,dble(jkcos),kind=8)\n         end if\n         \n      else if((k1==k2).AND.(molaxis=='Z'))then\n         jkcos=2d0*K1\n         \n      else if((k2==k1-1).AND.((molaxis=='X').OR.(molaxis=='Y')))then\n         jkcos=-sqrt(dble(J1*(J1+1)-K1*(K1-1)))\n         if(molaxis=='Y')then\n            jkcos=CMPLX(0d0,dble(jkcos),kind=8)\n         end if\n      end if\n      \n      !if(abs(m2-m1)>1)stop 'wrong dircose plus m'\n      if((m2==m1+1).AND.((labaxis=='X').OR.(labaxis=='Y')))then\n         jmcos=-sqrt(dble(J1*(J1+1)-M1*(M1+1)))\n         if(labaxis=='Y')then\n            jmcos=CMPLX(0d0,dble(jmcos),kind=8)\n         end if\n         \n      else if((m1==m2).AND.(labaxis=='Z'))then\n         jmcos=2d0*M1\n         \n      else if((m2==m1-1).AND.((labaxis=='X').OR.(labaxis=='Y')))then\n         jmcos=-sqrt(dble(J1*(J1+1)-M1*(M1-1)))\n         if(labaxis=='Y')then\n            jmcos=-CMPLX(0d0,dble(jmcos),kind=8)\n         end if\n      end if\n      \n      \n      res = jcos*jkcos*jmcos\n   end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between two given values.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[1,1]", "result": ["8", "17", "66", "174", "1"]}, "code": "function random_int(from_val, to_val) result(r_int)\n        implicit none\n        integer ,value :: from_val, to_val\n        integer ::  r_int\n        real :: r\n        \n        call random_number(r)\n        r_int = int(from_val + r*(to_val - from_val))\n    end function"}
{"instruction": "Use Fortran to give me a function for the sum of two 32-bit integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "-4.00000000", "-1.00000000"]}, "code": "function sum_i4(x, y) result(res)\n  use iso_fortran_env, only:int32\n  integer(int32), intent(in) :: x, y\n  res = x + y\nend function"}
{"instruction": "Use Fortran to give me a function for adding two single-precision floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "6.00000000", "7.00000000"]}, "code": "function sum_r4(x, y) result(res)\n  use iso_fortran_env, only:real32\n  real(real32), intent(in) :: x, y\n  res = x + y\nend function"}
{"instruction": "Use Fortran to give me a function for the sum of two real numbers, using 64-bit precision.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[0.0,2.0]", "case4": "[-5.0,1.0]", "case5": "[2.5,-4.5]", "result": ["3.00000000", "8.00000000", "2.00000000", "-4.00000000", "-2.00000000"]}, "code": "function sum_r8(x, y) result(res)\n  use iso_fortran_env, only:real64\n  real(real64), intent(in) :: x, y\n  res = x + y\nend function"}
{"instruction": "Use Fortran to create a function that takes two integer inputs and returns a logical value indicating whether the first input is greater than the second input.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["0", "0", "1", "1", "0"]}, "code": "function is_bigger (a,b)\n  integer, intent(in) :: a\n  integer, intent(in) :: b\n  is_bigger = a > b\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["4.1283730113977888E-317   4.1123099491201982E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.5131703742466021E-317   3.4971073119690115E-317   0.0000000000000000        0.0000000000000000", "8.0462424374658728E-317   8.0301793751882822E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "7.8195809292545758E-317   7.8035257720273186E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "8.0462345324155393E-317   8.0301793751882822E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that compares two strings case-insensitively and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','HELLO']", "case2": "['world','WORLD']", "case3": "['fortran','FORTRAN']", "case4": "['','']", "case5": "['123','321']", "result": ["T", "T", "T", "T", "F"]}, "code": "function equal_str_nocase(str1,str2)\n!\n!-----------------------------------------------------------------------\n!\n! convert a word to lower case\n!\n      logical              :: equal_str_nocase\n      Character (len=*) , intent(in) :: str1\n      Character (len=*) , intent(in) :: str2\n      integer :: i,ic1,ic2,nlen\n      nlen = len(str2)\n!\n      if(len(str1)/=nlen)  then\n        equal_str_nocase=.false.\n        return\n      endif\n      equal_str_nocase=.false.\n      do i=1,nlen\n        ic1 = ichar(str1(i:i))\n        if (ic1 >= 65 .and. ic1 < 91) ic1 = ic1+32\n        ic2 = ichar(str2(i:i))\n        if (ic2 >= 65 .and. ic2 < 91) ic2 = ic2+32\n        if(ic1/=ic2) then\n           equal_str_nocase=.false.\n           return\n        endif\n      end do\n      equal_str_nocase=.true.\n!\n!-----------------------------------------------------------------------\n!\n      end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a mathematical operator.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'E'", "case2": "'m'", "case3": "'('", "case4": "' '", "case5": "'/'", "result": ["F", "F", "F", "F", "F"]}, "code": "function isop(ch) result(isit)\n\n    character :: ch\n    logical :: isit\n\n    isit=.false.\n\n    select case(ch)\n\n    case('E')\n       isit=.true.\n    case('m')\n       isit=.true.\n    case('e')\n       isit=.true.\n    case('^')\n       isit=.true.\n    case('*')\n       isit=.true.\n    case('/')\n       isit=.true.\n    case('+')\n       isit=.true.\n    case('-')\n       isit=.true.\n    case('(')\n       isit=.true.\n    case(')')\n       isit=.true.\n\n    end select\n\n  end function"}
{"instruction": "Use Fortran to create a C binding function that returns a pointer to a new simple animation object with specified width, height, and frame rate.", "test_case": {"param_num": 3, "param_type": "integer,integer,real*4", "case1": "[100,200,0.5]", "case2": "[0,0,1.0]", "case3": "[500,1000,0.1]", "case4": "[256,512,0.2]", "case5": "[1024,2048,0.05]", "result": ["100", "0", "500", "256", "1024"]}, "code": "function gdk_pixbuf_simple_anim_new(width, height, rate) bind(c) \n  use iso_c_binding, only: c_ptr, c_int, c_float\n  type(c_ptr) :: gdk_pixbuf_simple_anim_new\n  integer(c_int), value :: width\n  integer(c_int), value :: height\n  real(c_float), value :: rate\nend function"}
{"instruction": "Use Fortran to create a function that returns a pointer to a new GdkPixbuf with the specified colorspace, alpha, bits per sample, width, and height.", "test_case": {"param_num": 5, "param_type": "integer,integer,integer,integer,integer", "case1": "[1,1,8,100,100]", "case2": "[2,0,16,200,200]", "case3": "[3,1,32,300,300]", "case4": "[1,0,8,50,50]", "case5": "[2,1,16,150,150]", "result": ["1", "2", "3", "1", "2"]}, "code": "function gdk_pixbuf_new(colorspace, has_alpha, bits_per_sample, width, height) &\n&bind(c) \n  use iso_c_binding, only: c_ptr, c_int\n  type(c_ptr) :: gdk_pixbuf_new\n  integer(c_int), value :: colorspace\n  integer(c_int), value :: has_alpha\n  integer(c_int), value :: bits_per_sample\n  integer(c_int), value :: width\n  integer(c_int), value :: height\nend function"}
{"instruction": "Use Fortran to give me a function that counts the number of bit flips between two integers a and b with nbits number of bits.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,4]", "case2": "[3,4,8]", "case3": "[3,2,16]", "case4": "[5,1,32]", "case5": "[2,4,64]", "result": ["2", "3", "1", "1", "2"]}, "code": "function flipcount(a,b,nbits) result(c)\n\n    integer, intent(in) :: a,b,nbits\n    integer             :: n,i\n    integer             :: c\n\n    c = 0\n    n = 1\n    \n    do i = 1,nbits\n        if (iand(a,n) /= iand(b,n)) c = c + 1\n        n = 2*n\n    end do\n\nend function"}
{"instruction": "Use Fortran to create a function that returns true if the iterator is a multiple of the cycle size and false otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,0]", "case4": "[5,1]", "case5": "[2,4]", "result": ["F", "F", "F", "T", "F"]}, "code": "function cyc(iterator,cycle_size)\n        implicit none\n        integer, intent(in) :: iterator\n        integer, intent(in) :: cycle_size\n        logical :: cyc\n\n        if(cycle_size<=0) then\n            cyc = .false.\n        else\n            cyc = mod(iterator,cycle_size)==0\n        end if\n\n    end function"}
{"instruction": "Use Fortran to define a function that retrieves a C function pointer from a shared library given its handle and name.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'hello']", "case2": "[0,'world']", "case3": "[10,'fortran']", "case4": "[-5,'test']", "case5": "[100,'']", "result": ["1", "0", "10", "4294967291", "100"]}, "code": "function c_get_procedure( handle, cname ) bind(c, name='dlsym' )\n            use iso_c_binding\n            integer(kind=c_long), value          :: handle\n            character(kind=c_char), dimension(*) :: cname\n            type(c_funptr)                       :: c_get_procedure\n        end function"}
{"instruction": "Use Fortran to create a function that pads a string with spaces up to a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',5", "case2": "'world',3", "case3": "'fortran',7", "case4": "'test',2", "case5": "'pad',1", "result": ["hello", "wor", "fortran", "te", "p"]}, "code": "function pad(s,l) result(a)\n  character(len=*), intent(in) :: s\n  integer, intent(in) :: l\n  character(len=1), dimension(l) :: a\n\n  integer i\n\n  a = ' '\n  do i=1,min(len(s),size(a))\n     a(i) = s(i:i)\n  end do\nend function"}
{"instruction": "Use Fortran to create a function that generates an array of integers starting from b and incrementing by c until the length of the array is equal to a.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["2", "5          11          17          23", "8          17          26          35          44          53          62", "11          23          35          47          59          71          83          95         107         119", "14          29          44          59          74          89         104         119         134         149         164         179         194"]}, "code": "function v2 (a,b,c)\n      integer:: a,b,c\n      integer:: v2(a)\n      integer j\n      j = b\n      do i = lbound(v2,1),ubound(v2,1)\n       v2(i) = j\n       j = j + c\n      enddo\n      end function"}
{"instruction": "Use Fortran to give me a function that compares two strings and returns 1 if the first string is greater, -1 if the second string is greater, and 0 if they are equal.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','fortran'", "case3": "'fortran','FORTRAN'", "case4": "'',''", "case5": "'fortran',''", "result": ["-1", "0", "1", "0", "1"]}, "code": "function strcmp(string1, string2)\n    !\n    ! Compares two strings, a-la C\n    !\n    integer :: strcmp\n    character(*) :: string1\n    character(*) :: string2\n\n    if (LGT(trim(string1), trim(string2))) then\n       strcmp = 1\n    else if (LGT(trim(string2), trim(string1))) then\n       strcmp = -1\n    else\n       strcmp = 0\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given path is a mount point.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'home/user'", "case3": "'C:/Program Files'", "case4": "'D:/Documents and Settings'", "case5": "'E:/Downloads'", "result": ["7567792", "15890864", "17594800", "11172304", "7436720"]}, "code": "function ismount_c(path) bind(C)\n      use, intrinsic :: ISO_C_Binding\n      integer(C_INT) :: ismount_c\n      character(kind=C_CHAR), dimension(*), intent(in) :: path\n    end function"}
{"instruction": "Use Fortran to create a function that checks if two file paths refer to the same file.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['file1.txt','file2.txt']", "case2": "['/home/user1/file1.txt','/home/user2/file1.txt']", "case3": "['file1.txt','file1.txt']", "case4": "['/home/user1/file1.txt','/home/user1/file2.txt']", "case5": "['file1.txt','file1.TXT']", "result": ["17201664", "14383648", "16022016", "7830048", "7109120"]}, "code": "function samefile_c(path1,path2) bind(C)\n      use, intrinsic :: ISO_C_Binding\n      integer(C_INT) :: samefile_c\n      character(kind=C_CHAR), dimension(*), intent(in) :: path1, path2\n    end function"}
{"instruction": "Use Fortran to define a function that calculates the weighted distance to default given the numerator and denominator.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0_8,2.0_8]", "case2": "[3.5_8,4.5_8]", "case3": "[3.0_8,2.0_8]", "case4": "[5.0_8,1.0_8]", "case5": "[2.5_8,4.0_8]", "result": ["0.48076923076923073", "0.21834061135371174", "0.0000000000000000", "0.0000000000000000", "0.36764705882352944"]}, "code": "function wdd(nr, rd)\n    real(8), intent(in) :: nr, rd\n    real(8) :: wdd\n    wdd = 0.0\n    if (nr <= rd) then\n        wdd = 1.0 - nr/rd\n    endif\nend function"}
{"instruction": "Use Fortran to give me a function that extracts integers from a character string.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "'123',3,2", "case2": "'abc123',6,3", "case3": "'1a2b3c',6,4", "case4": "'1-2-3',5,3", "case5": "'1+2+3',5,3", "result": ["123", "123", "1", "1", "1"]}, "code": "function intstr(string,lenstring,laststring)\n \n!***********************************************************************\n!     \n!     LBsoft subroutine for extracting integers from a character \n!     string\n!     \n!     licensed under the 3-Clause BSD License (BSD-3-Clause)\n!     author: M. Lauricella\n!     last modification March 2015\n!     \n!***********************************************************************\n  \n  implicit none\n  \n  character(len=*), intent(inout) :: string\n  integer, intent(in) :: lenstring\n  integer, intent(out) :: laststring\n  \n  integer :: intstr\n  \n  integer :: j,isn\n  character*1, parameter, dimension(0:9) :: & \n   n=(/'0','1','2','3','4','5','6','7','8','9'/)\n  logical :: flag,lcount,final\n  character*1 :: ksn\n  character*1, dimension(lenstring) :: word\n  \n  do j=1,lenstring\n    word(j)=string(j:j)\n  enddo\n  \n  isn=1\n  laststring=0\n  ksn='+'\n  intstr=0\n  flag=.false.\n  final=.false.\n  lcount=.false.\n  \n  \n  do while(laststring<lenstring.and.(.not.final))\n    \n    laststring=laststring+1\n    flag=.false.\n    \n    do j=0,9\n      \n      if(n(j)==word(laststring))then\n        \n        intstr=10*intstr+j\n        lcount=.true.\n        flag=.true.\n        \n      endif\n    \n    enddo\n    \n    if(lcount.and.(.not.flag))final=.true.\n    if(flag .and. ksn=='-')isn=-1\n    ksn=word(laststring)\n    \n  enddo\n\n  intstr=isn*intstr\n\n  do j=laststring,lenstring\n    word(j-laststring+1)=word(j)\n  enddo\n  do j=lenstring-laststring+2,lenstring\n    word(j)=' '\n  enddo\n  \n  do j=1,lenstring\n    string(j:j)=word(j)\n  enddo\n  \n  return\n  \n  end function"}
{"instruction": "Use Fortran to create a function that removes comments from a string using a specified comment character.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','!'", "case2": "'fortran is fun','%'", "case3": "'testing comments','/'", "case4": "'','&'", "case5": "'1234567890','*'", "result": ["hello", "fortran is fun", "testing comments", "", "1234567890"]}, "code": "function strip_comments(str,c) result(str2)\n\t implicit none\n\t character(len=*),intent(in) :: str\n\t character(len=1),intent(in) :: c !comment character\n\t character(len=len(str)) :: str2\n\t\n\t integer :: i\n\t\n\t i = index(str,c)\n\t if (i>0) then\n\t\tstr2 = str(1:i-1)\n\t else\n\t\tstr2 = str\n\t end if\n\t\n\t end function"}
{"instruction": "Use Fortran to give me a function for adding two real numbers x and y and returning their sum.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.5]", "case3": "[3.0,2.0]", "case4": "[5.5,1.5]", "case5": "[2.5,4.5]", "result": ["3.00000000", "8.00000000", "5.00000000", "7.00000000", "7.00000000"]}, "code": "function add(x, y)\n  real :: x\n  real :: y\n  real :: add\n  add = x + y \nend function"}
{"instruction": "Use Fortran to give me a function for the sum of two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function int_sum(i,j) result(k)\n    integer :: i,j,k\n    k = i + j\n  end function"}
{"instruction": "Use Fortran to give me a function that returns true if a is less than b and false otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["T", "T", "F", "F", "T"]}, "code": "function less_i(a,b) result(r)\n    logical :: r\n    integer, intent(in) :: a, b\n    r = a < b\n  end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n         \n         implicit none\n         logical :: r\n         integer, intent(in) :: a, b\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           \n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           \n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n         implicit none\n         logical :: r\n         integer, intent(in) :: a, b\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           \n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function for calculating the area of a triangle given the lengths of its three sides.", "test_case": {"param_num": 3, "param_type": "real*4,real*4,real*4", "case1": "[3.0,4.0,5.0]", "case2": "[6.0,8.0,10.0]", "case3": "[1.0,1.0,1.41421356]", "case4": "[2.0,2.0,2.82842712]", "case5": "[5.0,12.0,13.0]", "result": ["6.00000000", "24.0000000", "0.500000000", "2.00000000", "30.0000000"]}, "code": "function Area(x, y, z) result(res)\n    IMPLICIT NONE\n    REAL :: res\n    REAL, INTENT(IN) :: x, y, z\n    REAL :: theta, height\n    theta = ACOS((x**2 + y**2 - z**2)/(2.0*x*y))\n    height = x*SIN(theta)\n    res = 0.5*y*height\nend function"}
{"instruction": "Use Fortran to define a function that takes two optional integer arguments and returns the maximum value of 1, 2, and the input arguments.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "4", "3", "5", "4"]}, "code": "function m1(a1,a2)\n    integer, optional, intent(in) :: a1, a2\n    m1 = max(1, 2, a1, a2)\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two optional integer inputs and returns the maximum value of 1 and the inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "4", "3", "5", "4"]}, "code": "function m2(a1,a2)\n    integer, optional, intent(in) :: a1, a2\n    m2 = max(1, a1, 2, a2)\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of an element in a lower triangular matrix stored in a one-dimensional array.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[2,3,2]", "case3": "[4,5,3]", "case4": "[6,2,4]", "case5": "[7,7,1]", "result": ["1", "4", "8", "7", "-8"]}, "code": "function frind(j,i,n) result(res)\n  implicit none\n\n  integer, intent(in) :: i,j,n\n  integer :: res\n\n  res = i + (j-1)*(2*n - j)/2\n\nend function"}
{"instruction": "Use Fortran to create a function that sets the mass of an object with a given ID and returns an error code.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[3,2.3]", "case4": "[5,1.1]", "case5": "[2,4.7]", "result": ["1", "1", "1", "1", "1"]}, "code": "function set_mass(id,mass) result(error)\ninteger id,error\nreal*8 :: mass\n error=1\nend function"}
{"instruction": "Use Fortran to give me a function that sets the radius of an object given its ID and returns an error code.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[3,2.3]", "case4": "[5,1.1]", "case5": "[2,4.7]", "result": ["1", "1", "1", "1", "1"]}, "code": "function set_radius(id,r) result(error)\ninteger id,error\nreal*8 :: r\n error=1\nend function"}
{"instruction": "Use Fortran to give me a function that finds the mode of an integer array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[1,1,2,2,3,3,4,4,5,5]", "case3": "[1,2,3,4,5,5,5,5,5]", "case4": "[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]", "case5": "[]", "result": ["1", "1", "5", "1", "7340368"]}, "code": "function mode(ivec) result(imode)\r\ninteger, intent(in) :: ivec(:)\r\ninteger             :: imode\r\ninteger             :: i,freq_max,freq,imin\r\nif (size(ivec) < 1) then\r\n   imode = bad_int\r\n   return\r\nend if\r\nimin = minval(ivec)\r\nimode = imin\r\nfreq_max = count(ivec == imode)\r\ndo i=minval(ivec)+1,maxval(ivec)\r\n   freq = count(ivec == i)\r\n   if (freq > freq_max) then\r\n      freq_max = freq\r\n      imode    = i\r\n   end if\r\nend do\r\nend function"}
{"instruction": "Use Fortran to create a function that returns the lowest index \"i\" into the sorted array A so that A(i) >= val using bisection.", "test_case": {"param_num": 2, "param_type": "integer(:),integer", "case1": "[[1,2,3,4,5], 3]", "case2": "[[1,2,3,4,5], 6]", "case3": "[[1,2,3,4,5], 0]", "case4": "[[1,2,3,4,5,6,7,8,9], 5]", "case5": "[[1,2,3,4,5,6,7,8,9], 10]", "result": ["3", "6", "1", "5", "10"]}, "code": "function lower_bound(A, val) result(i)\n! Returns the lowest index \"i\" into the sorted array A so that A(i) >= val\n! It uses bisection.\ninteger, intent(in) :: A(:), val\ninteger :: l, idx\nif (A(1) >= val) then\n    i = 1\n    return\nend if\nif (A(size(A)) < val) then\n    i = size(A)+1\n    return\nend if\nl = 1\ni = size(A)\n! Now we always have A(l) < val; A(i) >= val and we must make sure that \"i\" is\n! the lowest possible such index.\ndo while (l + 1 < i)\n    idx = (l+i) / 2\n    if (A(idx) < val) then\n        l = idx\n    else\n        i = idx\n    end if\nend do\nend function"}
{"instruction": "Use Fortran to create a function that trims a string to a specified length and pads it with spaces if necessary.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello', 5]", "case2": "['world', 3]", "case3": "['fortran', 7]", "case4": "['testing', 2]", "case5": "['trimming', 9]", "result": ["hello", "wor", "fortran", "te", "trimming"]}, "code": "function io_trim(str, n) result(out)\n\n    implicit none\n\n    character(len=*), intent(in) :: str\n    integer,          intent(in) :: n\n    character(len=n)             :: out\n\n    integer :: i\n\n    out = trim(str)\n\n    do i = len_trim(out) + 1, n\n       out = out // ' '\n    end do\n\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a figure.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'1'", "case2": "'a'", "case3": "' '", "case4": "'9'", "case5": "'0'", "result": ["F", "F", "F", "F", "F"]}, "code": "function io_isfigure(chr) result(check)\n\n    character, intent(in) :: chr\n    logical               :: check\n    integer               :: ichk\n\n    character(len=*), parameter :: figures='1234567890'\n\n    ichk = scan(figures,chr)\n    if (ichk == 0) then\n       check = .false.\n    else\n       check = .true.\n    end if\n\n  end function"}
{"instruction": "Use Fortran to create a function that centers a string within a specified length by adding spaces to the left and right of the string.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello', 10", "case2": "'world', 5", "case3": "'fortran', 7", "case4": "'programming', 15", "case5": "'test', 3", "result": ["hello", "world", "fortran", "programming", ""]}, "code": "function io_center(str, n) result(str2)\n\n    implicit none\n    \n    character(len=*), intent(in) :: str\n    integer,          intent(in) :: n\n    character(len=n)             :: str2\n\n    integer :: l1\n\n    str2 = \"\"\n    l1 = len_trim(adjustl(str))\n    if (l1 > n) return\n\n    l1 = (n - l1)/2\n\n    str2 = repeat(' ',l1) // trim(adjustl(str))\n\n  end function"}
{"instruction": "Use Fortran to give me a function that returns the process number of a given process row and column in a BLACS context.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function blacs_pnum(ictxt, prow, pcol) result(res)\n      integer, intent(in) :: ictxt, prow, pcol\n      integer :: res\n    end function"}
{"instruction": "Use Fortran to convert a packed-ascii-data string to a double precision number.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'123',3", "case2": "'456',2", "case3": "'789',1", "case4": "'0',0", "case5": "'1',4", "result": ["NaN", "0.00000000", "0.00000000", "0.00000000", "NaN"]}, "code": "function unpadx(str,npack)\n    !\n    !  convert packed-ascii-data string *str* to dp number *unpad*\n\n    double precision sum\n    integer   iexp, itmp, isgn, i, npack\n    character str*(*)\n    unpadx = zero\n    if (npack.le.2) return\n    iexp  =     (ichar(str(1:1)) - ioff   ) - ibas2\n    isgn  = mod (ichar(str(2:2)) - ioff, 2) * 2 - 1\n    itmp  =     (ichar(str(2:2)) - ioff   ) / 2\n    sum   = dble(itmp/(base*base))\n    !       do 100 i = 3, npack\n    !          sum = sum + dble(ichar(str(i:i)) - ioff) / base**i\n    ! 100   continue\n    do i = npack, 3, -1\n       sum = sum + dble(ichar(str(i:i)) - ioff) / base**i\n    end do\n    unpadx = 2 * isgn * ibase * sum * (ten ** iexp)\n    !c       print*, sum, iexp,unpad\n    return\n  end function"}
{"instruction": "Use Fortran to create a function that maps k-points onto MPI-threads and returns a boolean value indicating whether the current thread should execute the requested k-point.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1", "0", "0", "0", "0"]}, "code": "function mpi_ki_selector(ki_request, num_kpts)\n\t\t!\t\tmap the kpts onto the mpi-threads running\n\t\tinteger,\t\tintent(in)\t\t::\t\tki_request, num_kpts \n\t\tinteger\t\t\t\t\t\t\t::\t\tki_todo\n\t\t!\n\t\tmpi_ki_selector = .false.\n\t\t!\n\t\tif(\t\tmpi_nProcs == 1\t\t) then\n\t\t\tmpi_ki_selector\t=\t.true.\n\t\telse\n\t\t\tloop_todos: do ki_todo = mpi_id +1, num_kpts, mpi_nProcs\n\t\t\t\tif(\tki_request == ki_todo) then\n\t\t\t\t\tmpi_ki_selector = .true.\n\t\t\t\t\texit loop_todos\n\t\t\t\tend if\n\t\t\tend do loop_todos\n\t\tend if\n\t\t!\n\t\treturn\n\tend function"}
{"instruction": "Use Fortran to give me a function that takes three integers and returns a logical value indicating whether the shortest path between any two points is an integer.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[3,4,5]", "case2": "[6,8,10]", "case3": "[5,12,13]", "case4": "[7,24,25]", "case5": "[8,15,17]", "result": ["F", "F", "F", "F", "F"]}, "code": "function predicate(a,b,c)\n    implicit none\n    integer, intent(in) :: a,b,c\n    real*16             :: path1,path2,path3,best_path\n    logical             :: predicate\n\n    path1=sqrt(dble((a+b)**2 + c**2))\n    path2=sqrt(dble((a+c)**2 + b**2))\n    path3=sqrt(dble((b+c)**2 + a**2))\n    best_path=min(path1,min(path2,path3))\n\n    predicate=(mod(best_path,1.0)==0.0)\n    \n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a lowercase letter.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'B'", "case3": "'1'", "case4": "' '", "case5": "'&'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_lower_alfa(c)\n    character, intent(in) :: c\n    is_lower_alfa=.false.\n    if ( c .ge. 'a' .and. c .le. 'z') then\n      is_lower_alfa=.true.\n    endif\n  end function"}
{"instruction": "Use Fortran to create a function that returns the parent directory of a given file path.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'path/to/file.txt','/'", "case2": "'path/to/file.txt','.'", "case3": "'path/to/file.txt','_'", "case4": "'path/to/file.txt','-'", "case5": "'path/to/file.txt','/'", "result": ["path/to", "path/to/file", "", "", "path/to"]}, "code": "function parent(instr, filesep)\n\ncharacter(*), intent(in) :: instr\ncharacter(1), intent(in), optional :: filesep\ncharacter(:), allocatable :: parent\n\ncharacter(1) :: sep\ninteger :: i\n\nsep = '/'\nif(present(filesep)) sep = filesep\n\ni = scan(instr, sep, back=.true.)\nparent = instr(1:i-1)\n\nend function"}
{"instruction": "Use Fortran to create a function that extracts the file name from a given input string, with an optional file separator character.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello/world/','/'", "case2": "'file.txt','.'", "case3": "'file.txt','/'", "case4": "'file.txt','_'", "case5": "'file.txt','/'", "result": ["", "txt", "file.txt", "file.txt", "file.txt"]}, "code": "function file_name(instr, filesep)\n\ncharacter(*), intent(in) :: instr\ncharacter(1), intent(in), optional :: filesep\ncharacter(:), allocatable :: file_name\n\ncharacter(1) :: sep\ninteger :: i\n\nsep = '/'\nif(present(filesep)) sep = filesep\n\ni = scan(instr, sep, back=.true.)\nfile_name = instr(i+1:len(instr))\n\nend function"}
{"instruction": "Use Fortran to create a function that generates i x j random numbers with a normal distribution using the Box-Muller method.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[3,2]", "case4": "[5,5]", "case5": "[10,10]", "result": ["1.07905363E-38", "1.04231943E-38   0.00000000       1.03778819E-38   0.00000000       0.00000000       0.00000000", "1.12497138E-38   0.00000000       1.12044014E-38   0.00000000       0.00000000       0.00000000", "2.23618088E-38   0.00000000       2.23164964E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "2.07552930E-38   0.00000000       2.07995740E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -1.62264016E+32   2.37478051E-41   2.07552930E-38   0.00000000       2.07552930E-38   0.00000000      -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -2.53537434E+30   2.37436012E-41   2.07552930E-38   0.00000000       2.07552930E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000"]}, "code": "function randn_2d(i, j) result(r)\n      !! Generates i x j random numbers with a normal distribution,\n      !! using the Box-Muller method.\n      implicit none\n      integer, intent(in) :: i, j\n      real :: r(i,j)\n    end function"}
{"instruction": "Use Fortran to create a function that generates i x j x k x l random numbers with a normal distribution using the Box-Muller method.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,1,1,1]", "case2": "[2,2,2,2]", "case3": "[3,3,3,3]", "case4": "[4,4,4,4]", "case5": "[5,5,5,5]", "result": ["2.33266869E-38", "2.42455127E-38   0.00000000       2.42455127E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "1.04697174E-38   0.00000000       1.04697174E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       1.40129846E-45   1.40129846E-45   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09", "2.08471285E-38   0.00000000       2.08471285E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       1.40129846E-45   1.40129846E-45   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09   4.59121429E-41  -6.46513598E-09   4.59121429E-41  -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -1.66158451E+35   7.56519002E-41   2.08471285E-38   0.00000000       2.08471285E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       1.40129846E-45   1.40129846E-45   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09   4.59121429E-41  -6.46513598E-09   4.59121429E-41  -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -9.67167519E+24   7.56420911E-41   2.08471285E-38   0.00000000       2.08471285E-38   0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09   4.59121429E-41  -6.46513598E-09   4.59121429E-41  -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -2.36124714E+21   7.56603080E-41   2.08471285E-38   0.00000000       2.08471285E-38   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "9.91870442E-39   0.00000000       9.91870442E-39   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       1.40129846E-45   1.40129846E-45   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09   4.59121429E-41  -6.46513598E-09   4.59121429E-41  -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -1.66158451E+35   4.05886100E-41   9.91870442E-39   0.00000000       9.91870442E-39   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.46450005E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       1.40129846E-45   1.40129846E-45   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09   4.59121429E-41  -6.46513598E-09   4.59121429E-41  -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -9.67167519E+24   4.05731957E-41   9.91870442E-39   0.00000000       9.91870442E-39   0.00000000       0.00000000       0.00000000      -6.50496901E-09   4.59121429E-41   0.00000000       0.00000000       0.00000000       0.00000000      -6.46461729E-09   4.59121429E-41  -6.46513598E-09   4.59121429E-41  -6.46530651E-09   4.59121429E-41  -6.50627641E-09   4.59121429E-41   0.00000000       0.00000000      -2.36124714E+21   4.06026230E-41   9.91870442E-39   0.00000000       9.91870442E-39   0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000"]}, "code": "function randn_4d(i, j, k, l) result(r)\n      !! Generates i x j x k x l random numbers with a normal distribution,\n      !! using the Box-Muller method.\n      implicit none\n      integer, intent(in) :: i, j, k, l\n      real :: r(i,j,k,l)\n    end function"}
{"instruction": "Use Fortran to give me a function that returns the nth word in a string.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello, world', 2", "case2": "'this is a test', 4", "case3": "'testing 123', 1", "case4": "'fortran is fun', 3", "case5": "'1,2,3,4,5', 5", "result": ["world", "test", "testing", "fun", "5"]}, "code": "function nthword(string,nth)\n    character(len=*), intent(in)  :: string\n    integer,          intent(in)  :: nth\n    integer                       :: pos1, pos2, pe\n    integer                       :: i1,i2,i3,i4 \n    integer                       :: nwords\n    character(len_trim(string))   :: nthword\n  ! initialize the null and tab characters.\n    pe = len_trim(string) \n    pos1 = 1\n    nwords = 0\n    if(pe == 0) then\n      nthword = \"\"\n      return\n    end if\n    do \n      i1=index(string(pos1:pe), \",\")\n      i2=index(string(pos1:pe), \" \")\n      i3=index(string(pos1:pe), achar(0))\n      i4=index(string(pos1:pe), achar(9))\n      if (i1 == 0 ) i1 = pe+1\n      if (i2 == 0 ) i2 = pe+1\n      if (i3 == 0 ) i3 = pe+1\n      if (i4 == 0 ) i4 = pe+1\n      if (min(i1,i2,i3,i4) > pe) then\n         nwords = nwords + 1\n         nthword=string(pos1:pe)\n         if(nwords == nth) return\n         exit\n      end if\n      pos2=min(i1,i2,i3,i4) \n      if (pos2 > 1 ) then\n        nwords = nwords + 1\n        nthword=string(pos1:pos1+pos2-2)\n        if(nwords == nth) return\n      end if\n      pos1 = pos2+pos1\n    end do \n    return\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the index of a 3D array given the lattice, spin, and orbital indices.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["3", "6", "9", "12", "15"]}, "code": "function index_stride_lso(ilat,ispin,iorb) result(indx)\n    integer :: ilat\n    integer :: iorb\n    integer :: ispin\n    integer :: indx\n    indx = iorb + (ilat-1)*Norb + (ispin-1)*Norb*Nlat\n  end function"}
{"instruction": "Use Fortran to replace all occurrences of a target substring with a replacement substring in a given string.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'hello world','world',''", "case3": "'hello world','world',' '", "case4": "'hello world','world','world'", "case5": "'hello world','world','WORLD'", "result": ["hello everyone", "hello", "hello", "hello world", "hello WORLD"]}, "code": "function replace_all(str, tarstr, substr) result(res)\n    character(len=*),intent(in) :: str\n    character(len=*),intent(in) :: tarstr\n    character(len=*),intent(in) :: substr\n    character(len=:),allocatable :: res\n    \n    integer(4) i, ofs, tar_len\n   \n    tar_len = len(tarstr)\n    \n    res = \"\"\n    ofs = 1\n    do\n        i = index(str(ofs:), tarstr)\n        if(i>1) then\n          res = res // str(ofs:i+ofs-2) // substr\n          ofs = ofs + i + tar_len - 1\n        else if(i==1) then\n          res = res // substr\n          ofs = ofs + tar_len\n        else\n          res = res // str(ofs:)\n          exit\n        endif\n    enddo\n        \nend function"}
{"instruction": "Use Fortran to create a function that replaces a target substring with a new substring in a given string.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'hello world','world',''", "case3": "'hello world','world',' '", "case4": "'hello world','world','world'", "case5": "'hello world','world','WORLD'", "result": ["hello everyone", "hello", "hello", "hello world", "hello WORLD"]}, "code": "function replace(str, tarstr, substr) result(res)\n    character(len=*),intent(in) :: str\n    character(len=*),intent(in) :: tarstr\n    character(len=*),intent(in) :: substr\n    character(len=:),allocatable :: res\n    \n    integer(4) i\n    \n    i = index(str, tarstr)\n    if(i>1) then\n      res = str(1:i-1) // substr // str(i+len(tarstr):)\n    else if(i==1) then\n      res = substr // str(i+len(tarstr):)\n    else\n      res = str\n    endif\nend function"}
{"instruction": "Use Fortran to create a function that takes in two integers and returns the remainder of the first integer divided by the second integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000", "3.00000000", "1.00000000", "0.00000000", "2.00000000"]}, "code": "function get_rank(rnk, n)\n        integer, intent(in) :: rnk, n\n        get_rank = modulo(rnk, n)\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that converts a Fortran character variable to a Ratfor integer array with a Ratfor terminator.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['123',3]", "case2": "['abc',5]", "case3": "['',0]", "case4": "['hello',6]", "case5": "['fortran',7]", "result": ["49          50          51", "97          98          99           0           0", "", "104         101         108         108         111           0", "102         111         114         116         114          97         110"]}, "code": "function f2r(string,isize)\n\ncharacter(len=*),parameter::ident_1=\"&\n&@(#)M_match::f2r(3f): convert Fortran character variable to Ratfor integer array with Ratfor terminator\"\n\ncharacter(len=*),intent(in) :: string\ninteger,intent(in)          :: isize\n!!integer                     :: f2r(len(string)+1)\ninteger                     :: f2r(isize)\ninteger                     :: i\nf2r=blank\n   do i=1,len_trim(string)\n      f2r(i)=ichar(string(i:i))\n   enddo\n   f2r(i)=eos\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if a is divisible by b and false otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,2]", "case2": "[15,3]", "case3": "[20,5]", "case4": "[30,7]", "case5": "[40,8]", "result": ["1", "1", "1", "0", "1"]}, "code": "function is_div(a, b)\n    integer, intent(in) :: a, b\n\n    is_div = 0 == modulo(a, b)\n  end function"}
{"instruction": "Use Fortran to create a function that generates an array of 1's and 0's based on whether the index is within a specified range.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[5,2,4]", "case2": "[10,1,5]", "case3": "[3,1,3]", "case4": "[7,3,7]", "case5": "[2,1,1]", "result": ["0.00000000       1.00000000       1.00000000       1.00000000       0.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       0.00000000       0.00000000       0.00000000       0.00000000       0.00000000", "1.00000000       1.00000000       1.00000000", "0.00000000       0.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       0.00000000"]}, "code": "function Case2(n, n_min, n_max) result(rvCase2)\n    \n        ! Routine arguments\n        integer, intent(in)             :: n\n        integer, intent(in)             :: n_min\n        integer, intent(in)             :: n_max\n        real, dimension(n)              :: rvCase2\n        \n        ! Locals\n        integer :: i\n        \n        ! Generate the information desired\n        rvCase2 = 0.\n        do i = 1, n\n            if(i >= n_min .and. i <= n_max) then\n                rvCase2(i) = 1.\n            end if\n        end do\n        \n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the coefficients for the n-body problem.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[2,3,5]", "case3": "[4,2,8]", "case4": "[5,3,10]", "case5": "[6,4,12]", "result": ["1", "3", "1", "1", "1"]}, "code": "function nbody_coeffs(k, m, N) result(a)\n    integer, intent(in) :: k, m, N\n    integer :: a\n\n    integer :: i\n\n    a = 1\n    do i = N-m+1, N-k\n        a = a*i\n    end do\n    do i = 1, m-k\n        a = a/i\n    end do\nend function"}
{"instruction": "Use Fortran to give me a function for the B function in the context of the Debye-H\u00fcckel theory.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0_8,2.0_8]", "case2": "[0.0_8,4.0_8]", "case3": "[3.0_8,0.0_8]", "case4": "[5.0_8,1.0_8]", "case5": "[2.5_8,4.5_8]", "result": ["Infinity", "Infinity", "Infinity", "Infinity", "Infinity"]}, "code": "function B_erfc(r, a) result(B)\n    real(8), intent(in) :: r, a\n\n    B = (erfc(a*r)+(2*a*r/sqrt(pi))*exp(-(a*r)**2))/r**3\nend function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.00000000", "7.00000000", "5.00000000", "6.00000000", "6.00000000"]}, "code": "function add(a, b) result(c)\n        integer, intent(in) :: a, b\n        c = a + b\n    end function"}
{"instruction": "Use Fortran to give me a function for a-b with integer inputs.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["-1.00000000", "-1.00000000", "-2.00000000", "4.00000000", "-2.00000000"]}, "code": "function sub(a, b) result(c)\n        integer, intent(in) :: a, b\n        c = a - b\n    end function"}
{"instruction": "Use Fortran to give me a function that coarsens an integer v by a factor i.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,3]", "case2": "[-10,3]", "case3": "[10,-3]", "case4": "[-10,-3]", "case5": "[0,5]", "result": ["3", "-4", "-3", "2", "0"]}, "code": "function int_coarsen(v, i) result(r)\n    integer, intent(in) :: v\n    integer, intent(in) :: i\n    integer :: r\n    if ( v < 0 ) then\n       r = -abs(v+1)/i - 1\n    else\n       r = v/i\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that sets the value of a real number in an array at a given index and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[3,2.3]", "case4": "[5,1.1]", "case5": "[2,4.7]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_exc_value(i,x) result(ret)\n  integer :: ret,i\n  real*8 :: x\n  EXCFLD(i)=x\n  ret=0  \nend function"}
{"instruction": "Use Fortran to create a function that finds the next available unit number between 20 and 1000.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[20,30]", "case2": "[50,60]", "case3": "[100,200]", "case4": "[500,600]", "case5": "[800,900]", "result": ["20", "50", "100", "500", "800"]}, "code": "function find_next_unit(istart,istop)\n\n    implicit none\n\n    integer, intent(in), optional :: istart, istop\n    integer                       :: find_next_unit\n\n    logical :: opened\n    integer :: i, ifirst, ilast\n\n    ifirst = 20\n    if (present(istart)) ifirst = istart\n    ilast = 1000\n    if (present(istop)) ilast = istop\n    \n    opened         = .true.\n    find_next_unit = -1\n    do i=ifirst, ilast\n       inquire(unit=i, opened=opened)\n       if (.not. opened) then\n          find_next_unit = i\n          exit\n       end if\n    end do\n\n  end function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function f1 (x, y)\n    integer, intent (in) :: x, y\n    f1 = x + y\n  end function"}
{"instruction": "Use Fortran to create a function that checks if the input values for sand, clay, and ompc are within certain ranges and returns a boolean value.", "test_case": {"param_num": 3, "param_type": "real*4,real*4,real*4", "case1": "[0.5,0.3,50.0]", "case2": "[0.8,0.2,60.0]", "case3": "[1.2,0.5,70.0]", "case4": "[0.0,0.0,0.0]", "case5": "[1.0,1.0,71.0]", "result": ["T", "T", "F", "T", "F"]}, "code": "function CheckArgs ( sand, clay, ompc ) result ( ok )\n\n\t    real, intent (in) :: sand, clay, ompc\n\t    logical :: ok\n\n\t    ok = .true.\n\t    if ( sand < 0.0 .or. sand > 1.0 ) then\n\t\tok = .false.\n\t    end if\n\t    if ( clay < 0.0 .or. clay > 1.0 ) then\n\t\tok = .false.\n\t    end if\n\t    if ( ompc < 0.0 .or. ompc > 70.0 ) then\n\t\tok = .false.\n\t    end if\n\t    if ( sand + clay > 1.0 ) then\n\t\tok = .false.\n\t    end if\n\n\tend function"}
{"instruction": "Use Fortran to create a function that sets an environment variable with a given name and value, and allows overwriting of existing variables.", "test_case": {"param_num": 3, "param_type": "character,character,integer", "case1": "['HOME','/home/user/',1]", "case2": "['PATH','/usr/bin/',0]", "case3": "['USER','user',1]", "case4": "['LANG','en_US.UTF-8',0]", "case5": "['TERM','xterm-256color',1]", "result": ["15170112", "15563328", "7043616", "14907968", "17594944"]}, "code": "function g_setenv(variable, value, overwrite) bind(c, name='g_setenv_utf8') \n  use iso_c_binding, only: c_int, c_char\n  integer(c_int) :: g_setenv\n  character(kind=c_char), dimension(*) :: variable\n  character(kind=c_char), dimension(*) :: value\n  integer(c_int), value :: overwrite\nend function"}
{"instruction": "Use Fortran to create a function that takes a filename and a test integer as arguments and returns an integer using the C binding.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['file.txt',1]", "case2": "['/home/user/test.txt',0]", "case3": "['file.dat',-1]", "case4": "['/usr/local/bin',1]", "case5": "['file.txt',2]", "result": ["14907904", "7698944", "7698944", "7043584", "7961088"]}, "code": "function g_file_test(filename, test) bind(c, name='g_file_test_utf8') \n  use iso_c_binding, only: c_int, c_char\n  integer(c_int) :: g_file_test\n  character(kind=c_char), dimension(*) :: filename\n  integer(c_int), value :: test\nend function"}
{"instruction": "Use Fortran to create a function that returns a pointer to the installation directory of a package and its DLL name.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'package1','dll1'", "case2": "'package2','dll2'", "case3": "'package3','dll3'", "case4": "'package4','dll4'", "case5": "'package5','dll5'", "result": ["7043584", "7240192", "15890944", "7174656", "7436800"]}, "code": "function g_win32_get_package_installation_directory(package, dll_name) bind(c, &\n&name='g_win32_get_package_installation_directory_utf8') \n  use iso_c_binding, only: c_ptr, c_char\n  type(c_ptr) :: g_win32_get_package_installation_directory\n  character(kind=c_char), dimension(*) :: package\n  character(kind=c_char), dimension(*) :: dll_name\nend function"}
{"instruction": "Use Fortran to define a function that takes in three character arrays and returns a c_ptr.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "['package1','dll1','subdir1']", "case2": "['package2','dll2','subdir2']", "case3": "['package3','dll3','subdir3']", "case4": "['package4','dll4','subdir4']", "case5": "['package5','dll5','subdir5']", "result": ["7305792", "15170112", "8157760", "6978112", "15235648"]}, "code": "function g_win32_get_package_installation_subdirectory(package, dll_name, subdi&\n&r) bind(c, name='g_win32_get_package_installation_subdirectory_utf8') \n  use iso_c_binding, only: c_ptr, c_char\n  type(c_ptr) :: g_win32_get_package_installation_subdirectory\n  character(kind=c_char), dimension(*) :: package\n  character(kind=c_char), dimension(*) :: dll_name\n  character(kind=c_char), dimension(*) :: subdir\nend function"}
{"instruction": "Use Fortran to create a function that sets the value of a real variable ETA2 at a given index and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[2,1.0]", "case4": "[5,3.14]", "case5": "[4,0.0]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_eta(ind,eta2_) result(ret)\n  integer :: ind,ret\n  real*8 :: eta2_\n  \n  ETA2(ind)=eta2_\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that sets the value of an element in an array and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[0,1.0]", "case4": "[5,0.0]", "case5": "[2,3.14159]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_vx(ind,uu2_) result(ret)\n  integer :: ind,ret\n  real*8 :: uu2_\n  \n  UU2(ind)=uu2_\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that sets the value of an element in an array and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[2,1.0]", "case4": "[5,0.0]", "case5": "[4,3.14]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_vy(ind,vv2_) result(ret)\n  integer :: ind,ret\n  real*8 :: vv2_\n  \n  VV2(ind)=vv2_\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that sets the value of a specific element in an array to a given value and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[2,1.0]", "case4": "[5,3.14]", "case5": "[4,0.0]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_eta_prev(ind,v1) result(ret)\n  integer :: ind,ret\n  real*8 :: v1  \n  ETA1(ind)=v1\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that sets a value in an array and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[3,2.3]", "case4": "[5,1.1]", "case5": "[2,4.7]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_deta_dt(ind,x) result(ret)\n  integer :: ind,ret\n  real*8 :: x\n  DETA_DT(ind)=x\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that sets the value of a real variable CORIF at a given index to a given value and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[2,1.0]", "case4": "[5,0.0]", "case5": "[10,3.14]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_coriolis_f(ind,corif_) result(ret)\n  integer :: ind,ret\n  real*8 :: corif_\n  CORIF(ind)=corif_\n  ret=0\nend function"}
{"instruction": "Use Fortran to define a function that sets the tidal potential of a node given an index and a value, and returns 0.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[0,0.0]", "case4": "[100,-10.0]", "case5": "[-5,3.14]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_tidal_potential(ind,x_) result(ret)\n  integer :: ind,ret\n  real*8 :: x_\n  TIP(ind)=x_/G\n  ret=0\nend function"}
{"instruction": "Use Fortran to define a function that sets the atmospheric pressure at a given index in an array by subtracting a reference pressure from a given value.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[0,2.0]", "case4": "[5,0.0]", "case5": "[2,-4.5]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_atmospheric_pressure(ind,x) result(ret)\n  integer :: ind,ret\n  real*8 :: x\n  PR(ind)=x-reference_pressure\n  ret=0\nend function"}
{"instruction": "Use Fortran to define a function that sets the surface heat flux of a node and returns a success flag.", "test_case": {"param_num": 2, "param_type": "integer,real*8", "case1": "[1,2.0]", "case2": "[3,4.5]", "case3": "[0,0.0]", "case4": "[100,-10.0]", "case5": "[-5,3.14]", "result": ["0", "0", "0", "0", "0"]}, "code": "function set_node_surface_heat_flux(ind,hflux_) result(ret)\n  integer :: ind,ret\n  real*8 :: hflux_\n  AMUSE_HFLUX(ind)=hflux_\n  ret=0\nend function"}
{"instruction": "Use Fortran to create a function that returns an array of integers from a to b inclusive.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,5]", "case2": "[3,8]", "case3": "[0,0]", "case4": "[10,15]", "case5": "[5,5]", "result": ["1           2           3           4           5", "3           4           5           6           7           8", "0", "10          11          12          13          14          15", "5"]}, "code": "function colon(a,b)\r\n\t\timplicit none\r\n\t\tinteger, intent(in) :: a,b\r\n\t\tinteger, dimension(1:b-a+1) :: colon\r\n\t\tinteger :: i\r\n\t\tdo i = a,b\r\n\t\t\tcolon(i-a+1) = i\r\n\t\tend do\r\n\tend function"}
{"instruction": "Use Fortran to give me a function for adding two integers a and b and returning their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function sum(a, b)\n  ! Version 2 of the example sum function.\n  ! Listing 3.5 in the book.\n  integer, intent(in) :: a, b\n  sum = a + b\nend function"}
{"instruction": "Use Fortran to create a function that initializes a 2D array of size m x n with 1.0.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000", "1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000"]}, "code": "function pam1(m,n) result(y)\n    integer, intent(in) :: m, n\n    real, dimension(m,n) :: y  ! COMPILER ERROR WITH THIS ...\n    !real :: y(m,n)            ! BUT NO ERROR WITH THIS INSTEAD\n    y = 1.0\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the magnitude of a vector with n dimensions and components given by the array rel_vec.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0]]", "case2": "[4,[0.0,0.0,0.0,0.0]]", "case3": "[2,[1.0,1.0]]", "case4": "[5,[1.0,2.0,3.0,4.0,5.0]]", "case5": "[3,[0.0,0.0,1.0]]", "result": ["3.7416573867739413", "0.0000000000000000", "1.4142135623730951", "7.4161984870956630", "1.0000000000000000"]}, "code": "function vec_mag(n_dim, rel_vec)\n        integer, intent(in) :: n_dim\n        real(8), dimension(n_dim), intent(in) :: rel_vec\n        real(8) :: vec_mag\n        vec_mag = sqrt(sum(rel_vec**2))\n    end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two positive integers a and b using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[100,50]", "case4": "[7,21]", "case5": "[35,49]", "result": ["5.00000000", "5.00000000", "50.0000000", "7.00000000", "7.00000000"]}, "code": "function gcd(a, b)\n\ninteger, intent(in) :: a, b\ninteger :: x,y,z\n\nif (a < 1 .or. b < 1) error stop \"autogrid:gcd positive integers only\"\n\nx = a\ny = b\nz = modulo(x, y)\ndo while (z /= 0)\n  x = y\n  y = z\n  z = modulo(x, y)\nend do\ngcd = y\n\nend function"}
{"instruction": "Use Fortran to define a function that takes in an integer array and a percentage, calculates the number of elements to refine based on the percentage, and returns the integer value of the calculated number of elements to refine.", "test_case": {"param_num": 2, "param_type": "integer(:),real*8", "case1": "[[1,2,3],0.5]", "case2": "[[0,1,0,1],0.25]", "case3": "[[1,1,1,1,1],0.75]", "case4": "[[0,0,0,0,0,0,0,0,0,0],0.1]", "case5": "[[1,0,1,0,1,0],0.9]", "result": ["1", "1", "3", "1", "5"]}, "code": "function get_refine_count ( mesh_status, percentage ) result( refine_count )\n      \n      use, intrinsic :: iso_c_binding\n      implicit none\n      integer(c_int32_t),intent(in), dimension(:) :: mesh_status\n      real(c_double) :: percentage\n      integer(c_int32_t) :: refine_count\n\n      integer(c_int32_t) :: length\n      real(c_double) :: d_length\n      real(c_double) :: d_refine_count\n\n      length = size( mesh_status, 1, c_int32_t )\n      d_length = real( length, c_double )\n      d_refine_count = floor( d_length * percentage )\n      refine_count = int( d_refine_count )\n      \n      ! write(*,*)'get_refine_count: amr vector refine count: ',refine_count\n\n    end function"}
{"instruction": "Use Fortran to give me a function for adding two integers.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3.00000000", "7.00000000", "0.00000000", "5.00000000", "-1.00000000"]}, "code": "function add(i, j)\n  integer, intent(in) :: i, j\n  add=i+j\nend function"}
{"instruction": "Use Fortran to create a function that divides y by x, but stops and throws an error if x is zero.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,0]", "case3": "[6,3]", "case4": "[10,5]", "case5": "[8,2]", "result": ["0.00000000", "", "2.00000000", "2.00000000", "4.00000000"]}, "code": "function getx(y,x)\n    integer, intent(in):: y,x\n    integer, volatile :: allowed\n    if( x .eq. 0 ) stop 'DIVIDE BY ZERO'\n    getx = y/x\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[0,5]", "case4": "[10,0]", "case5": "[0,0]", "result": ["5", "5", "5", "10", "0"]}, "code": "function gcd(m,n)\n    integer,intent(in)  :: m, n\n    integer :: gcd,irest,ifirst\n    ifirst=abs(m)\n    gcd=abs(n)\n    if(gcd==0)then\n      gcd=ifirst\n    else\n      do\n        irest = mod(ifirst,gcd)\n        if(irest == 0)  exit\n        ifirst = gcd\n        gcd = irest\n      enddo\n      gcd= abs(gcd)\n    endif\n  end function"}
{"instruction": "Use Fortran to create a function that checks if a given character is a digit.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'a'", "case2": "'1'", "case3": "' '", "case4": "'&'", "case5": "'Z'", "result": ["0", "0", "0", "0", "0"]}, "code": "function is_digit(c) ! assumes ascii encoding \n        character(1) c\n        integer nc\n        is_digit=.FALSE.\n        nc=ichar(c)\n        if(48<=nc .AND. nc<=57) &\n            is_digit=.TRUE.\n        return\n    end function"}
{"instruction": "Use Fortran to create a function that takes in a default string and an optional string, and returns the optional string if it is present, otherwise returns the default string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'fortran','programming'", "case3": "'test',''", "case4": "'default','option'", "case5": "'','option'", "result": ["world", "program", "", "option", ""]}, "code": "function input_String(default,option) result(val)\r\n\tcharacter(*),intent(in) :: default\r\n\tcharacter(*),optional,intent(in)::option\r\n\tcharacter(len(default) ) :: val\r\n\r\n\tif(present(option) )then\r\n\t\tval=option\r\n\telse\r\n\t\tval=default\r\n\tendif\r\n\r\nend function"}
{"instruction": "Use Fortran to give me a function that takes a hash and a table size and returns the index in the table where the hash should be stored.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "4", "2", "1", "3"]}, "code": "function hash2index_int32(hash, table_size) result(hash_index)\n      use, intrinsic :: iso_fortran_env\n      implicit none\n      integer(int32), intent(in) :: hash\n      integer(int32), intent(in) :: table_size\n      integer :: hash_index\n      hash_index = int(mod(hash,table_size) + 1, int32)\n      !       if(hash_index <= 0) stop \"hash_index <= 0\"\n   end function"}
{"instruction": "Use Fortran to give me a function that returns the i-th bit of an integer a.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[4,2]", "case4": "[7,5]", "case5": "[8,4]", "result": ["1", "0", "0", "0", "1"]}, "code": "function ai(a,i)\nimplicit none\ninteger, intent(in) :: a, i\ninteger :: ai\n\nif (btest(a,i-1)) then\n  ai = 1\nelse\n  ai = 0\nend if\nend function"}
{"instruction": "Use Fortran to give me a function that compares two strings character by character and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','worlds'", "case3": "'fortran','FORTRAN'", "case4": "'',''", "case5": "'123','12345'", "result": ["T", "T", "F", "T", "T"]}, "code": "function strcomp(sA, sB) result(r)\n\n    character(len=*), intent(in) :: sA\n    character(len=*), intent(in) :: sB\n\n    logical :: r\n    integer :: i\n\n    r = .true.\n    do i = 1,MERGE(len(sA),len(sB),len(sA) < len(sB))     \n        if (sA(i:i) /= sB(i:i)) then\n            r = .false.\n            exit\n        end if\n    end do\n\nend function"}
{"instruction": "Use Fortran to give me a function that calculates the Euclidean distance between two points in a 2D plane.", "test_case": {"param_num": 4, "param_type": "real*4,real*4,real*4,real*4", "case1": "[1.0,2.0,3.0,4.0]", "case2": "[0.0,0.0,0.0,0.0]", "case3": "[1.5,2.5,1.5,2.5]", "case4": "[0.5,0.5,0.5,0.5]", "case5": "[1.0,1.0,2.0,2.0]", "result": ["2.82842708", "0.00000000", "0.00000000", "0.00000000", "1.41421354"]}, "code": "function distance_euclidean(x1, y1, x2, y2) result(d)\n        !Arguments\n        real, intent(in) :: x1, y1, x2, y2\n        !Result\n        real :: d\n\n        d = sqrt((x1-x2)**2 + (y1-y2)**2)\n    end function"}
{"instruction": "Use Fortran to create a function that generates a 2D array of normally distributed random numbers using the Box-Muller transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,10]", "case2": "[100,100]", "case3": "[5,5]", "case4": "[50,50]", "case5": "[20,30]", "result": ["1.20014989      0.787336290      0.853876054       1.01236320       1.58945143       1.48636568      0.736461878       1.92018211       1.86654949       1.95540190      0.960703731      0.273352623       1.01240218      0.696279705       1.92520499      0.813015342       1.90264213      0.971792400      0.727206767       1.46904194       1.18569422       1.03052175      0.714802444      0.626038551      0.794797421      0.617662072       2.52835250      0.785061896      0.708483279       2.19442630      0.582327008      0.512802124       1.91174817      0.955211043       2.78447270      0.447308868      0.583534300       2.03111672       1.02090871       1.37865460      0.427625775       1.59790266       1.40091789       1.35072207      0.728086352       2.29282975       1.45766735      0.813086689       1.19335151       1.27784026      0.630830765       1.07446432       1.93740273       1.67744064       1.94972289       1.34074819      0.487141699       2.07507992      0.869186282       2.23093343       1.31231511      0.226271257      0.974376976       1.61522126       2.62900662       2.80147719       1.77070796      0.710738122       1.62979496       9.57466960E-02   1.53360415       1.35166574      0.726625085      0.302774727       1.99150026      0.614250481       2.64818931       1.61693490       1.11366987       2.16986990      0.501540363      0.485353410      0.951801181       1.57089007      0.806258678       1.86787212      0.618767917       1.20841968      0.923464060       1.78440559       2.54112148       2.53461003       1.18525851      0.909833252       2.45926118       1.27105129       2.20631123       1.64723396      0.159858510      0.961097598", "2.47759032      0.463475615       2.23796105      0.974961638       2.01275063       1.52999878      0.647847235      0.665545166       2.09619355       1.88649571       1.58530927       1.77789712       1.82595003      0.422651649       1.47656345       1.43252730       1.78639364       1.77425587       1.25492442      0.623993576      0.723777950      0.919176340      0.866819203       1.36082363       1.93910134      0.378566444      0.704859436       2.32789564       1.38060641      0.617052615       1.04836047      0.497847110      0.426821023      0.975522399      0.801383436       1.38521016       1.53138065       1.65413678       1.14812255       2.89662504      0.897078931      0.899912894       3.04867554       1.20217288      0.616426170      0.929097176      0.635773122       1.27288723      0.535016358       1.02740395      0.891936660       1.91243148       1.20784044      0.892434180       2.11994505       2.14052796      0.807636738       1.03188086      0.691698015      0.169025600       1.83870363      0.904099941      0.939561903      0.732278049       2.24812651       1.61964929      0.568083763      0.903052628      0.708594024      0.188830286       1.48979270      0.796637297       1.62450862       2.57724142       2.21748757       1.40220773      0.906547546       2.64837098       1.17287970       1.52724183      0.685021639      0.733917236      0.735293925       1.26455963      0.683391094      0.734708726       9.44237113E-02  0.460124850       1.40538871      0.273351699       1.11946988      0.977922261      0.438020349       1.31297588      0.998403072      0.258046448       1.24266124       1.69952762      0.706417441       1.41602147       1.38196886       1.70744920      0.979599118      0.717479706      0.962239146       1.49621797      0.299156219       1.38285911      0.525530756       1.11619520       1.23033595      0.155937657       1.20230258      0.732074678      0.731321335       1.58431983      0.216572076      0.800040245      0.715245306      0.871154249       1.96280134      0.534261823      0.692338169      0.349235058       1.10691655      0.686301768      0.375448912      0.232716024       1.69808245      0.804095507      0.527576089      0.503809929       1.54964125       2.07244945       1.80183411      0.714484811       1.96639478      0.735577941       1.12972116       1.23284686       1.37224662       1.12891102       1.30912519       1.79790890      0.500250161       3.12029719      0.366429210      0.814929426      0.798085868      0.403135538       2.17562652       2.39578056       2.92261600      0.970032513      0.231383204       1.00911844       1.42211831      0.702140629       1.87160444       2.51380730       1.64378846       1.66699326       1.30399632       2.67461872      0.869078517       1.36299241       2.21213961       1.48055255       1.19650543      0.712335348       1.94136584       1.04056263       1.23514628      0.143648863       1.70490420      0.781225502       1.50909221      0.775401711      0.521803558      0.539450049       1.83164668       1.40519142      0.695862710       2.80399919      0.914646566       1.52547181       1.52481019       1.71786714       1.51629961       1.69059634      0.675904155       1.23705804      0.781437218       1.34007192      0.900750518       1.42464292       2.78854036      0.758283198       1.55630350       2.08974695       1.57705498      0.146222636       2.87217021      0.882750928      0.576947451       1.40559483       1.63148379       1.12412238       1.55191040       1.42077208       1.77232373      0.589546442       1.48701727       1.69012344      0.579934418      0.890636504      0.949203968       1.48772550      0.511256039      0.176819623      0.787493646      0.512898505       2.36909413       1.91105783       1.73012376      0.827271461       2.87148046      0.949541926       1.52349913      0.761580884       1.80832613      0.921578169       1.04464185       1.07676280       1.34722006       2.82793212      0.423020512       2.54671717       1.85102510       1.67963231       1.16387951       1.23112953       1.23345113       1.41484272      0.564266622      0.156466842      0.793401301       1.18264294      0.815789282       1.58683074       1.21941435       2.67851949       2.50002241       1.83886325       1.22416675       1.33755410      0.587398231       2.43333578       3.37119651      0.971239626      0.760086775       2.17625093       1.85684466       1.54039335      0.271834642       1.11057854      0.767539740       1.47718811      0.981812358      0.823647320      0.929946899       1.43146110      0.643532813       1.42483211       1.26103485      0.518727124      0.402416080      0.786117792       1.85495389       2.52310729       1.08931363      0.999064922       1.24057591       1.49640596       1.02690291       1.52576208       1.55382538       1.98358166       1.10181451       2.07399011      0.927999139       1.09974420      0.614211261       2.05227160       1.12639165       1.94226670       1.90467358      0.613898754      0.463439226       1.46087670       1.33817291       2.18017054       2.07634521       1.60763609      0.982475698      0.945254028       1.27131689      0.493185818       1.34520471       1.36161542       1.55387247       1.43974888       1.90304506      0.237620324      0.343190342      0.573220372       1.03981972       2.30221796       1.33851302      0.681431174      0.781166613       2.68344498      0.641030550      0.576528192      0.119072862       1.56860507      0.849402368       1.96419680      0.492893845       1.12313652      0.550604343       2.17813349       1.06941640       1.49441767      0.373446286      0.899110913      0.964549243       1.46135879       1.64559710       2.39505816       2.64472961       1.28224230      0.823143482       1.37641668      0.695245385      0.285274297       1.36499405      0.641307652       1.93094075      0.693512797      0.878200650      0.268964976       1.34346533       1.79585183       2.21957135       2.04935598       1.53652263      0.606333613       1.10291922       1.18093967       2.04583955       1.36170065      0.814993858       1.70310915      0.936418355       1.17516732      0.405953318       1.11489022      0.738248467       1.62744868      0.743334174       1.55183268      0.539200723      0.922474980       1.47234106      0.454145432      0.776340723       1.15825927      0.899733186      0.412644744      0.724670887       1.64087248       2.09132242       2.17418861       1.74967003       1.38573897       2.18081284       1.68190491       1.19200313       1.60019207       1.36392939      0.808432877       1.73107386      0.500069737      0.850166261       1.68109143      0.723400116       1.95800555       1.02670658      0.914399207       1.74335682      0.923140705       2.01389790       1.58390200       1.85466504       1.14262581       1.03807950      0.615492344       1.51433456      0.883968711      0.474465907       1.19321954      0.243482828      0.534474373       1.55659723       1.89775229      0.230565041       1.58576810       1.37569129      0.487931579      0.800866425       1.47544944       2.23099613       2.19421148      0.934988737      0.891609311       2.22901678      0.849512339       3.29933691      0.563111544       1.33818936      0.583280742       1.61601675       1.27316189      0.799436331      0.341459125      0.868466735       1.25062215       1.00565517       4.54637146       1.04440677       2.06799698       1.08389843      0.735727787       1.34980583      0.871173024       1.01188123       1.07390428      0.875971079       2.34430766       1.03073776       1.43292725       1.06422687      0.441499352       2.18261862       1.15557981      0.453401268      0.877738833       1.70332909      0.716803074       1.27498567       1.68287361      0.513558149      0.997806668      0.606464505       1.18359673      0.779947400       1.03128433       1.20735514      0.618781805      0.943989873       1.28842700      0.241634160       1.99181998       1.72831011       1.32441282      0.864043117       1.51523292      0.851776242       1.64646673       2.07750440       1.15485454       1.64187133       1.46183062       1.32139826      0.694854736       1.50780880       1.27126336      0.591893792       3.25212717       1.04544008       1.75347388       1.03201747      0.476791948       1.48967862       1.85923767       1.04657698      0.723341763       1.69034243       1.19236767       1.48775589       1.95083010       1.51675761       1.55638242       1.66512501      0.960064530       1.41772151      0.463153929       1.15297496       1.38660693       1.41310656      0.493681639       1.62280035       1.48842049       1.31568623      0.985871434       1.38747311       1.73268700      0.870931447       1.03733754       1.63274658      0.795577466      0.418856442       1.13308597      0.950423002       1.25270975       1.15895951       1.51049185       1.01308620       1.56025791      0.100618280       1.84104753       1.36660314       1.40210390      0.465507209       1.54379284       1.96956754       1.30815625       1.93631315       1.34907556       1.25255263       1.94401407       1.29847336      0.220214367      0.316020340       1.36226118       1.09410632      0.439526975      0.560223937      0.685055614       3.11708403       1.42972958       1.98652756      0.538208544       1.28003240      0.589728773       2.66969800       1.15942144       1.74811840       1.13609469       2.14236856      0.985101461      0.632247806       1.16004634      0.334070832       1.85341692       1.10433412       1.46250498       2.95166469       1.03100598       1.42454529       2.24722195       1.89192426      0.664138496       1.26327920       1.69328070      0.622147739       1.07267892      0.259748161      0.781843841      0.592425644       1.53337252      0.698964477      0.405531108       1.59512520       1.25945830      0.916832983       2.34151697       1.98445213      0.973596811       1.79436517      0.371622980       2.11872935       2.29173923       1.70118225       3.24447417       1.15433896       1.67145503      0.973382652      0.691288590       3.15668011       1.58949649      0.984557569       1.46916640      0.822259724      0.862037957       1.56366956      0.463080287       2.06467462       1.67099893      0.491237313       1.65947592       1.67782068       2.53763771       1.96587706       1.22664273       1.24145579      0.653174281       1.05206776      0.934245348       2.21565485      0.325660050       1.50835550       1.40540302      0.711725593       1.29846168       1.39219534       2.20438385       1.10023773       1.57695770       1.45187509      0.965760231      0.630634725       1.36884546       2.02298784       2.10164309      0.366605550       1.10559726       1.65215456      0.694937944       2.28722811       1.92613745       2.44153857      0.328780740      0.818045437       1.70233560      0.497323662       2.10131288       1.92553127      0.727510810       2.67883158       1.86870623      0.796172857       1.05428970       1.22527409      0.960514367       1.76432538      0.916661680       1.13888419      0.778420448      0.110544510      0.913004458       2.52810407       1.06534052      0.825354755       1.26791978      0.816741049       1.91274619       1.12719464      0.233022138      0.750252545       1.75893402       1.92717826       2.57402658       1.60665345       1.69618559       2.17921448       1.36131608       1.64860284      0.936794817      0.271611363       1.86258233       1.80119646      0.985658169      0.845432460      0.445623130       1.02110612       1.12177587      0.676776111       1.45626807       1.09921503       1.45975208       1.21821558       1.68236053       2.54320621       1.38822472       2.38751292      0.168295056      0.671172976      0.433792681       1.39426053       1.15760481       1.89137781       1.96009433      0.908640444      0.768536568       3.00953674       2.28273296      0.503433764       1.33172250      0.444198489       2.49903798      0.914879620       6.27450794E-02   2.90448904       1.00628591      0.572170556      0.840723276      0.195169508       1.27595448      0.704428256      0.322712272       1.37476504       1.41874564       1.05677986      0.628797770      0.560828149       1.44476497      0.881695628      0.875621736       1.28876710       1.09241199      0.472537190       2.17483377       1.24215436       2.01924229       1.48233819      0.679640114      0.204756588       1.75772476       1.74079788      0.311320245      0.854820907      0.796260238       1.58672321       1.06077445      0.845592737       1.31754553       1.29785216       1.85289931      0.631718576      0.366997331       1.11104250       1.93301582       2.30330253       1.17667592      0.881450772       1.03321075       2.77758694       1.48353457       1.43135917      0.944384098      0.869315326      0.540146649      0.558525383       2.23641229       2.58103299       1.29203165       2.08005142      0.754468739       2.33431077       1.13588333      0.982225835       2.41412115      0.905455291       1.14109242       2.15011001       1.83136451       2.27759385      0.102250241       1.34170353       1.61624563       2.20173049       1.57608366      0.363882959       1.37681675      0.618147254       2.34643173       1.23078644       1.27277923       1.16246045       1.50523305       1.76000202      0.951580226      0.908416510      0.754674613       1.23777986       1.06291282       1.33108640       2.32264948       1.46402359      0.809539378      0.592094243      0.327607960       2.38321519      0.183835059       2.49433899       1.10628772       1.99673486       2.85307336       1.21509075      0.890403509       1.29459465      0.912959814       1.00218248       1.31587625       1.45493436      0.355594605      0.797462702       1.01420879       1.10639334      0.479089409      0.467726260      0.655105710      0.886461616      0.891853273      0.772101223      0.694704473      0.935549140       2.27553463      0.840993464      0.340187669      0.543083906       1.29252875       1.40531802       1.10523701       1.09658384      0.788265705       3.73396683      0.453033715       1.01804614       1.80402863       1.14635658      0.773831248       2.45073676       1.12377286       1.52661514       1.21053219      0.810732126       1.23681056       2.51687074       1.43731725      0.915764689       1.15865684       2.18042803       1.51783407      0.688920379      0.553589165       1.46626437      0.975435734       1.67502129       1.82140994       1.54809248       1.08382273      0.702532053       2.38509274       1.53063512       1.81317782       2.12959552       2.08849740      0.631100714       1.55641329      0.794602990       1.49508286       2.99839926       2.02675676       1.19138587       1.01148963       1.24371934       2.04587531       1.35270214      0.969234884      0.577219963       2.06422758       1.14106536       1.06843030       1.38486814       1.19206643      0.587045252       2.10038400       1.74365771      0.267098546       1.48754418      0.605259597       1.23715019       1.86212766      0.792331815      0.480421305       1.56721783      0.604265332       2.56286883       1.09279656      0.476181805      0.336632222      0.847696304       1.25252974       1.04762459       2.04179811      0.315805167       1.33637893      0.616084039      0.167130500       1.64506900      0.965072989       1.70281756       1.77387166      0.687445402       1.91418457       1.28593671       1.38365877      0.851398110       1.30604136      0.715562820       2.46080089       1.09313941      0.356311440      0.745016992       3.16600680       1.24906516       1.80397093       1.49859214       1.32585061       1.41171026      0.475582451      0.884914339       1.14729154       3.42998123      0.818857789      0.923448265      0.672754884      0.709464014       1.56034458      0.260531723      0.785459757       1.77933323      0.807305813       1.58921218       1.46031439       1.63995898       2.06303644       1.40415561      0.943943739      0.644986391       2.63450742       1.86542320       1.54979134       1.74923563      0.682094514      0.708856761       1.83960187       1.33030391       2.06347418      0.645182431       1.46619225      0.905083477      0.986443698      0.563597381       1.16428864       1.50163507       1.31353891       1.50606799      0.513823867       1.71160245       2.10816193       2.88336253      0.443768084       1.11067152      0.579600811      0.401526272      0.358598173       1.24134743       3.33700013       1.16207469      0.608825684       1.75444305      0.621540427      0.874462247       1.31837809      0.668257415      0.949417889      0.880340755      0.796850502      0.618185341      0.663069546       2.16565251      0.888307095       1.83788931      0.263207138       2.27488637       1.01287985       1.97043335       1.57275009       2.29521537       1.72828853       8.70994031E-02  0.983142257       1.15065908       1.32670248       2.23215270       2.08482385       2.58005047       1.54797697       1.62178266       2.55875635       1.35621369       1.41395080      0.178472802       2.29079604       1.10867965       2.22977567       1.86988342       1.09836316       1.49223220       2.47363782      0.619603038       1.10529900      0.567994654      0.891889393      0.660945594      0.733229518      0.842789531      0.540171683      0.732427180       1.68190467       1.05894077       1.02199268      0.386776477       1.36302602      0.677766323      0.791204333      0.689707637      0.555712163       1.99391174       1.43329430      0.819764912      0.631184638       1.92517972      0.625889122       2.49692464       1.11038387       1.76871920       2.02352214      0.910802543      0.812792480      0.771205485      0.365160555      0.997395992       1.12505174      0.642122149       1.43983293       1.68738127       1.09806907       1.85414982       1.52272487       1.35857165       1.82875860      0.772669435      0.277673781      0.940939784      0.701896846       1.26232600      0.756511390      0.585657716       1.23145974      0.591903031       1.22310126      0.934737802       2.33345962       1.13674664       1.79558897       1.74342585       1.36462021       1.03618717      0.894764483      0.638156474      0.463068396       1.92142808       1.10375023       2.26589561      0.465823323       1.11987376      0.568212509       1.65697753       2.14052963       1.86338615      0.720603526       1.30450773       1.63684165       1.50975013       2.08299518       1.67838621      0.785815418      0.149840787       1.04668331       1.32876968       3.13443899      0.616792560       1.94300270      0.652103424       1.80216908      0.382839024       2.06072903       2.11945820       1.09310794       1.77158928       1.01846349       1.32824612       1.27577543       1.42139900       2.43766403      0.730207562      0.937877893      0.900217175      0.558330119       1.03758490       1.35320270      0.516331434      0.770296335       1.18792856      0.581961691      0.590020537       1.07841778       1.01260221      0.822570741       1.16497254       2.00156856      0.884722650      0.765490592       1.13649678      0.600024462       1.60347617       1.02871084      0.356462717       1.06966782      0.976826191       4.35831594      0.661880791       2.37497187      0.656479299       1.39673960       1.92576599       1.21323717       2.79655385       2.04878879      0.505790651      0.873066843       1.32347333       1.87062395       2.15536404      0.877014756      0.617331386      0.564130247      0.501705825      0.653426588      0.908514917       1.36149681       1.32484412       1.74613965      0.744929552      0.153206721       1.54645705       1.92530441       1.10262835       1.13604486       1.05667627       1.16246033       1.24517369       1.24680984      0.532138646       1.77167284      0.624013782       1.80382299       2.05707526      0.600578785       1.51693225       1.50356722      0.828130841      0.597383618      0.891026318       2.03070474       1.70896316      0.525983751      0.361261278       1.61448324      0.569792628       1.12164974       2.30596185       2.01581049       1.66184938       1.27652812       2.21315622      0.291429788       1.78007615      0.832863331       2.12036514      0.533790827      0.278936952      0.313309878       1.70623505       1.40851390       1.01927817      0.129164055       2.12620211      0.191623941       1.24295151      0.761917770       1.17304873       1.88980651       1.42284322      0.595830858      0.713504791       1.43194044      0.841671169       1.98680520      0.318080664       1.85927904       2.36483169       1.06162941       2.31294894      0.747920871      0.265423715       1.03084230       2.87361932      0.907614231       8.37670192E-02  0.588586867       3.10924363      0.977556169      0.677892685       1.75927448      0.596851647       2.00734091      0.517025352       1.59640920       1.80093062       1.79571021       2.07654142       2.27361178       1.50180387      0.895296216       1.00197089       1.11428308      0.658317029       1.27752411       1.74257314       1.63807952       1.16765881      0.946851075       6.10939153E-02   1.13666070      0.991878688       1.35564411      0.904781938       1.57750452       1.79934204      0.687761426      0.179815739      0.422733516       1.23806620       1.25180471       1.27425766       1.86707306       1.39477134      0.920514762      0.448170185       1.82563031       1.26853371      0.965287268       2.51332927      0.848839879       1.16868687       1.84553230       1.09799361       1.60940063       1.64231741       1.45132208       2.56357074      0.705822289       1.62412226       1.36969972      0.965614796      0.483087987       1.08774114      0.429943353       1.09565473       1.10173857      0.817945838       1.51344192      0.475243717      0.369061559      0.599797189       1.78968799       1.07048917      0.841794312       1.89527094       2.39250517      0.782944679      0.633574784       1.22571409      0.844172060       1.34089732      0.617895126       2.54019976      0.528736413       1.25008368      0.409780085      0.868243158       2.16221094      0.526462197       1.97775722       1.60729051      0.911635995      0.782831609      0.441565871      0.192192122      0.578862131       1.59622002       1.50661182       1.30188560       1.41807437       1.47681868      0.464694858      0.761320174      0.276113868      0.324865192      0.471154422      0.342717558       1.34160864       1.09879649       2.36853647      0.367401749       6.94413558E-02   1.29098129      0.575291991      0.617684245      0.173046336       1.06223142      0.384134173       1.49066687       1.27220702       1.57822633      0.769808114      0.411293268       1.18158138       1.53788793      0.397519469      0.398858547      0.937097132       1.56480360       1.30790281      0.889540136      0.886137843      0.909250319       1.06722128       1.53258288       1.29207611       2.30547333      0.709735990      0.588596642       1.59707105       1.86941886       1.88980877       1.37539196      0.400973558      0.714061022       1.26225591       1.22051370      0.715122879       1.72434485       1.69404840       1.34031403       1.45670021       1.00067210       1.62370718      0.950740099      0.976346135      0.666136920       1.06069589      0.916896939       2.92490745       1.05815303      0.174113750       1.71186471       2.75985479       2.84677768      0.315923572      0.948460460       1.75900161      0.976809144       2.52661848       1.57837200       1.56971157      0.773685455       3.50796413      0.808372378       1.98616850       1.52047563       1.25357950       1.45031655       1.67639565       1.02575934       1.06659126      0.637418211      0.679085135       1.27268541       2.31434178      0.595510304       1.04908335       1.00087917       1.97925735       1.58670425      0.456145346      0.877087474       1.04420733       1.78524220      0.243030816      0.641603470       1.47856891      0.667688012       1.66148090       1.88800585       2.27026081      0.750612974       1.51828027       2.31229234       1.12473655      0.687587976       2.84541798      0.580051363       1.91723323       1.24941480       1.02449119       2.62382603       1.36466670       1.43894625      0.872495413       1.09000409      0.236004055       1.66693962       1.15552557       1.09241855      0.896617591      0.181946754       1.18576217       1.14787960       1.12115812      0.720431745       1.34285259       1.75442505       2.94751716      0.973899245      0.710302830       1.38398683       1.29066420       2.72391009       1.57003629       1.05996156       3.83674465E-02  0.889834702       1.00473118      0.237483531       1.61192012      0.924810052       1.04177511       1.27702963       2.46866035      0.978674591      0.391812623       2.29164863      0.355180651       1.90082991      0.996411383       2.06325793       1.18206537       1.86997533       2.44250584       1.35383034      0.707500577      0.905250311      0.849309683      0.593420208       2.89495945      0.832430005      0.674738944      0.488465548      0.699804306      0.779839575       1.63254523       2.59437370       1.70067501      0.396320075      0.147692055       1.25772655       2.58932066       1.80107605       2.07172704       1.62398899       1.03449202       1.11845016       1.80010307       1.25896883       1.28426909      0.905092597       1.84507263      0.500800729      0.294444293       1.42093027      0.901714027       1.54459000       1.07783210       1.29799557       1.87050915       2.59456968       1.71007884       1.53786623      0.644309998       1.61897123       1.58693445       1.21579516       1.57529426       2.80366778       2.56785965       2.19073772      0.843537629      0.709177017       1.62765479       1.48919189      0.499217957       1.36888254      0.766462982      0.709676802      0.948198020      0.886872172      0.956794143       1.75437808       1.11431360      0.557801068       1.17607021       1.01246846       1.80471945      0.907474279      0.821663082       1.57499027       1.87745357       1.21978235       1.62825978       1.41162145      0.791598737       1.08003712       1.13128054      0.915728450       1.84401631       1.35041678       1.32458913       1.56381249       1.05740619      0.586779952      0.701115489       1.30720317       1.32485414       1.41254413      0.707462430      0.198509678       1.78489268      0.981563747      0.898100138       1.13717949      0.807615638      0.792834163       1.28518569      0.589430869      0.738168716       2.22722769      0.485873491       1.38253319       1.67343140      0.725053728      0.974855721      0.796816409       2.89155579       1.91750407       1.48268712      0.553675354       1.67829692       1.13946283       1.49404943       1.88848555      0.866389573       1.73577988      0.745864332       1.38130510      0.872184634       2.39215875      0.985122263       1.01778162       1.38151276      0.851239502       1.03499258       1.60227621       1.71974361       1.21982014      0.568863034       1.15325069       1.36843586      0.276072621       1.39131284      0.799392700       1.86443818       1.14096415      0.458439440       1.42575085      0.210903198       1.68766773       1.53840411       1.25064147       2.33993888       1.21127260       2.03980088       2.62140012      0.232769966      0.392084390      0.692338288       1.35567999       1.13431263       2.52724981       2.22964907      0.800354183      0.964063227       1.70116138      0.897484899       1.00103951       1.27825058       1.05577958       2.68672848       1.09720910       2.74498940       1.70077813       2.63432479      0.949587762      0.661800206      0.181250036      0.581028759       1.32711256      0.872485220       2.48239875       1.71032047       2.26252460      0.806552529       1.27448761      0.616562665       1.51491141      0.134575650       1.42531860       1.73368526      0.409432560       1.09814835       1.97897613       2.07812500      0.684804320      0.815419555       2.71252227       1.11579406       1.52925694      0.700529277       1.61434352       1.33632159       1.98311865      0.718456566       1.20251441       2.45044398       1.50114894      0.745783210      0.611261547      0.970473647       2.07344103       2.32949615       1.00223291      0.371841013       1.27244222       1.80298948       2.90769172      0.837796152       2.12278128       1.89927721       1.24738228      0.384814382       1.21127295      0.379645765       1.67231393       1.08324683       2.17826843       1.71094799       1.53762853       1.18468070       2.30674696      0.838613331       1.05319488       1.64324033       1.16979921       1.62588000       2.23617172      0.644270480       1.77305710      0.758313239       1.80192816      0.441533566      0.882812381       2.04219127       1.34582603       1.00475180       2.34406328      0.897469580       1.87665296       1.31521440       1.52893221       1.98672092      0.849741459      0.898451507       1.70949507      0.161731556       1.15638304      0.667654335      0.739047348       1.32515430      0.623925567       1.87765574      0.512119114       2.19974017      0.263807118      0.554249227       1.46132803      0.326397121       1.22303057      0.842922568       1.33521748      0.364111304      0.597134173       2.06337404       1.14774251      0.661428392      0.464383423       1.34783113       2.00807023      0.782886803       2.74626160       2.04619694       1.38320601       1.04391313      0.608766973       2.72524762      0.915523231      0.266456068      0.982411325      0.125861481      0.731899142       1.60072994       1.81183147      0.592895091      0.637373269       1.46339905       2.23136902       1.38373470       2.14947152       4.59521003E-02   1.84455609       1.92803919      0.239551187       1.45603538       2.43741441      0.609552920       1.62928283      0.948750019      0.466918349      0.922168911      0.544944227      0.833339274      0.752399445       1.50928795       1.44360769       1.36938417       1.09663093       1.89393127      0.714532614       1.94335353      0.962394953       4.52814577E-03  0.184915900      0.934218407       1.81264341       1.19472158       1.06477737      0.523250878       1.79782045       1.23637509       2.43347120       1.29840243      0.670178533       1.07370222      0.233971238      0.782989502       1.11010015       1.64642179      0.973275125       1.35188103       1.89753771      0.582578957       1.15958285      0.913317442       2.08354926       1.19256806       2.47461152       1.28772891       1.65709555       1.23089528       1.65517700       1.03762579       1.08861411       1.10156107       8.56231377E-02   1.22599399       1.66725647       3.56770134       2.42246890      0.848033488       1.72765625      0.855549097      0.452527314       1.07552171       2.22541451      0.818984628       2.37408018      0.749744236       1.33060658      0.935404956      0.820486903       1.32427752      0.749563456       1.70618355      0.983251870       1.01039445       1.40184152      0.659222126       1.02508187       1.80579567       1.38480878      0.775743902       2.13919353       1.42435014       1.87095428      0.931431234      0.315029800       1.67157948       1.30148435       1.01781893       1.43821347       2.20068407       1.10669148      0.980366349       1.84530485       1.62135077       1.60929513      0.476646692      0.682301760       1.04061711       2.82865667       1.00339520       2.43851352      0.412383735       3.38178301      0.894822001       1.30208135       1.17729211       1.20652199      0.694782197       1.75824797      0.813162863      0.982988715       1.73160577       1.76436329       1.40306580      0.142819375       1.32790482       1.91404808       1.68118048       1.29781449       2.29840636       2.24993849       1.12104642       1.05849290       1.60310316       1.00956833       1.22308147      0.413168550      0.318691373       1.58000565      0.799754798       2.90201378      0.617518008       1.92074060       2.40257716      0.295957536       1.41710591       2.51305318       2.58770180      0.894132018      0.525678277       1.09401035       2.39618087      0.583318174      0.339187026       1.48869431       1.31889844       2.40620947       1.43963087       1.55062091      0.536669612       1.26546133       1.32798564      0.202195153      0.783920944      0.513256848       2.25607634       1.03577173       1.32349086       1.88769698       1.85798466      0.236338824      0.104869232       1.69589245      0.875140488       1.12658632      0.476137072       1.94314754       2.72396111       1.08140767       1.43417394      0.848461509       1.05544794      0.594921649       1.36313725      0.584839165       1.47440600       1.07335651       2.07695746       1.39421713       2.83869720       1.07221067      0.862296104      0.940991104       1.43629897       1.57071590       1.53157067       1.87523699       1.35236609       1.97431099       2.40794849       1.14092767       1.33305860       1.06758547       1.52376842       1.13822305       1.90661371      0.544050813       2.23549366       1.15411675      0.931681871      0.695130289       1.67814386       1.09120405       1.34702730       1.36393654      0.175875574       1.78126109      0.542880476       1.78951895      0.352957666       1.16932845       2.17923021       1.26903129       1.38957179       1.75306141      0.415808320      0.805231035      0.322839886      0.746177793       2.03334093      0.854064703       1.82379174       1.41818202      0.243860558      0.184153661       1.59529221      0.564276516      0.522079051       2.87205601       1.18378973      0.578590810       2.69533205      0.412436754      0.959870338       1.14724612       1.57052279       1.30753267       1.11563838       2.40056443      0.959337473       1.57145679       1.56971085      0.433253944       1.17080307      0.353387147       1.43655443       1.16782236       1.35947227       1.27190828       1.88070405      0.843467891      0.846205831       1.68870640      0.346360266       1.64820445      0.804691374      0.496380925      0.518064439      0.821657717      0.638904452      0.639267981       1.92461085       3.41951475E-02   1.16088784       1.18827999       1.47149253       1.65043724       2.05490899       1.26051629       1.06005740       1.00257683      0.511764705       2.47059298      0.779227972       1.23045945       1.54336166      0.330899864       1.32708323       1.86389017      0.568868220      0.942908704      0.739978909       2.00574040       2.06818628       1.33386183       1.09476686       1.35647106       1.17801917      0.732429147      0.283980906      0.451402634      0.321735561       1.71367884      0.814993978      0.460712969       1.66313183       1.07805932       1.52426660      0.940820456      0.828472733       1.40252197      0.385926545       1.13166678       1.44776046      0.492069393       1.06953979       2.18103194       1.19581771      0.568626761       1.35522389       1.52946770       1.09801686       1.84504807      0.457300246       1.40848947       1.46880972       3.26416373       1.83525598       1.69517088       1.60156953      0.262423724       1.73729432      0.329339445      0.711920381      0.107336856       1.27700818       2.46458054       2.02856231       1.58719814       1.06663001      0.434512109       4.02242374      0.881717563       1.22079313      0.621423721      0.585516930      0.956335306       1.47268450      0.729025185       1.49817240       2.53517556       1.24707925       1.26844466      0.340388507      0.277576953       2.92818570       1.22766161      0.503188431       1.29110944       2.38385725       1.18944156       2.15834522       1.67045736       2.95114899      0.790641189      0.888784945       1.46823514       1.01160491       1.12036598      0.876772761      0.660827994       1.88114727       1.00114322      0.926749706       1.03602254       1.22198665      0.935904980       1.16811180      0.241460636       1.26572824      0.480668277       1.25311434      0.720158219      0.895785332      0.302402288       1.95715010      0.489956766       2.14831448       1.65690839       1.37385833      0.924587965      0.313753158       1.78225899       2.39385343      0.951044559       1.03687882      0.280885041       1.63125038      0.870533407       1.99658215      0.709549189       1.96851695       1.00349748       1.13852525       2.28517628      0.768040299      0.784242868       1.17908096       1.11401188      0.918948770       1.13197100      0.366379112      0.626583695       1.28190017      0.936256588       1.04902589       1.53163540       1.09792101       1.07740700       2.89710307       2.28133345      0.158561051       2.19837427       1.54013765      0.863479257       2.01984978      0.506212234      0.463892132       1.14570475      0.692489624      0.711303890      0.557529032       2.06399345       1.33030105       2.54875803       1.85234380       1.39883626      0.528356314      0.274926305      0.142471120       1.79917252       1.74961996      0.752294421      0.264262706      0.307507932      0.828489959      0.388644457       1.00702453      0.875408471       2.79668140       1.62073696       1.49741054       1.77682841       1.67828524       1.15712881       1.31187809       3.17275786       1.16960752       1.64581990       1.77333295       1.75458980      0.661817253       1.42054260       1.02618384      0.359231681       1.87028778      0.324908316       1.55297661       2.80844378      0.966458142      0.654585719       1.43100488       1.42879570      0.681721509       1.19869494       1.59216309       1.39881086       1.61884677       1.74768019       2.35681319       1.04681969       3.41684866       1.48682034       1.54068100       1.71214759       1.15896320      0.509001553       1.14350820       1.64999640      0.432639927      0.686194479       1.38968492       2.15203190       2.13646817       2.00017786       2.11718464       1.03472352      0.908542573       1.39029431      0.950360835       1.14465606      0.798359275       1.46961737       1.88642037       3.00892830       1.10329819       1.50900292       1.58214903       1.58579576      0.913851917       1.05208528      0.473969698      0.945656598      0.305275589       1.53214991       1.42551899      0.301397026       1.66194320       1.20770073      0.930364013      0.469282925       1.36735284       1.06624544      0.913183570      0.986229897       1.40846777      0.615060747      0.343111306      0.826403022       1.13372982      0.821813166      0.672203183       1.03253186       1.33007360       1.62070060      0.943720520      0.488265604       1.84753168       1.54551172      0.489751250       1.78231454      0.169286892       1.70639169      0.558133960       1.76588178       1.28955901       2.08944345      0.213689506       1.27737427       2.35523200       1.00313342      0.426569790       1.62336600      0.492057890       1.69046986       1.71455014      0.575242996      0.935966909       1.70001459      0.728013575       1.90279245       1.07970262      0.461857677       2.41008687       1.87993765       1.27939606      0.761153042       1.54229200      0.235567123       2.13392544      0.867883265       1.20209384       1.61483884       1.39297783       1.01240540       1.90744066       1.58572793       1.58721244       1.60278571       1.13432801       1.15584350      0.991324842      0.856916547      0.869534612      0.260230511       1.53916037       1.11273599      0.295275509       1.03079951       1.20240426       1.58920968      0.602689505      0.999342740       1.16637683       2.05858183       1.44543564      0.947975159       2.09571123      0.470916897       3.55997133      0.993442059       1.15402389      0.623634458      0.560446978      0.469606280      0.344327122       1.27052045      0.799210250      0.634343326       1.18003774       9.93083194E-02  0.677836835      0.803340375      0.350389272      0.850359797      0.998223841       1.67195952       1.72801363      0.560702384      0.820268929      0.372493386       1.07840872      0.651998401       1.30784297      0.962338448       1.77868462       1.18598568       1.09611702      0.519250631      0.652988315      0.969451845      0.579344332       1.29062808      0.703604996      0.379254639       2.81482983      0.962669492       1.52372885       1.15377259      0.943795264       1.69794071       1.41533291       1.38418746       2.06170702      0.710501730      0.580237746      0.355051070       1.91134334       1.18247914       1.64599502      0.940608799       8.38419646E-02  0.469345331       1.21344280       1.78117812      0.132863015       1.17005646       1.51427865       2.18163824      0.489571482       1.31430423       2.59201956       1.49983716       1.53294957       1.53513300       2.38506317       2.10484886       2.07654858       1.43579388      0.812817693       1.26086962       1.85249531       1.37074661       1.11394620       1.51406193       1.57872260      0.277129382       2.46865988       1.63888311       1.98534214      0.759462297      0.537147522       1.46666646      0.918307841      0.700302422      0.625748515       1.29713988       1.04883385       2.69123769      0.911547005       1.25061679       1.51527917      0.275601000      0.788288295       2.11249423      0.858920813       1.59547341       1.59988678       2.26858950       1.66912007       1.22643411       1.34224105       1.32140541      0.348976642      0.605721831      0.824372470      0.942449510       1.77941883      0.338137865      0.909664094      0.195855945       2.35174036       2.61927462       1.00437117       2.03611374      0.705636919       9.65302512E-02   1.69876599       1.94860923       1.68592966       1.30407012      0.369701087       2.36457586       1.59164429      0.824168146       1.14955747      0.671102583       1.54890585      0.901530683       1.66543376       1.31596577       2.44291258       2.31836343       1.75417805       1.14976692      0.875630200       1.14415455      0.980183780       2.22330642       2.59885979       1.00177944      0.716164410       2.28056622       1.17899120       1.76140106      0.887077630      0.632410824       1.12724137      0.367220521       1.10355377       1.23315382       3.46661448       1.51143575       1.83493471      0.995512784       2.75636673       1.87732732       2.62530684      0.928360283      0.405816346       1.43777227      0.144717380       1.80572021       2.02852631       1.88830888      0.919392109      0.747258425      0.872867346      0.552319825      0.741096556      0.377651095       2.33758712       2.21151757       2.35403728      0.891971886      0.764564753      0.713647246      0.903068542       1.34771609       1.29291880      0.403960258      0.331956059       2.32672691      0.348012865       1.85468864       1.55187237      0.620970249      0.426880538       1.44780648      0.277418882       2.71138644       2.40226936      0.837008119       1.01478755       1.49243951       1.85215509       1.51681817      0.767384768       1.21660149       1.12078667       1.17484081       2.44417524       1.75924706      0.494479388      0.382556826      0.836502254      0.759661734       1.63415623       1.02029800      0.360175878      0.787210345      0.910127103       2.04006791       2.02094674      0.945171833       1.04087770      0.149121851      0.960912168      0.856650114       1.28243887      0.829621613       1.33427691       1.16458488       1.36490119       1.03274822      0.707757413      0.935151994      0.597209334       1.30751860      0.775090754       7.05993325E-02   1.19919586      0.219843864       2.04605150       1.73897183      0.243324682       2.30216980      0.940221965       2.00837207       1.11849165       1.76518309      0.365809977       1.42778039       1.01385760      0.875008821       1.99440026      0.896529555      0.603724480       1.09452629       1.54446983       1.32117867       1.03303754      0.823725641       2.26121545       1.85382485      0.790359914       1.23832834       1.52176833       2.07728577       1.61761701       1.57277119       1.70152271      0.488727540       1.30356240       1.32794917      0.995169818       1.08318818       1.66599119      0.780779600      0.777519822      0.809999168       2.98537946      0.769532859       1.22577679       1.43668079       1.04022086       1.53494108       1.07707179       1.15448725       1.61950397       1.29097652      0.104495376       1.32068086      0.770259976      0.818901658      0.809949636      0.827875793      0.766761959      0.849016666      0.785610020      0.939465463      0.795448542      0.611945271       1.30667019       1.90334904       1.06628704       1.38840246       1.06669199      0.664697289      0.274704903       1.20019722       2.44088316       1.46140528      0.669995785       2.65781069       1.07601142       2.01550007      0.676597893       1.39813995       1.41592920      0.294934779      0.907881320      0.563109934       1.62777317       1.23159409       2.56317687       1.32009411      0.623110950      0.947631121      0.959965885      0.824182630       1.77671182       2.01575565      0.848724246       1.39437115       1.05945516       1.50125110       1.87701726      0.200014248      0.828397572       1.26964283       1.15240479      0.758946240      0.860968232      0.726290286       1.25126135       1.10676563       4.57503945E-02   1.89521146       1.90100801       1.46337783       2.03974557       2.60581350       1.08018029      0.883501887       1.00448608       1.00039554      0.531828642      0.617314458       1.80387449      0.476719379       1.44421661      0.221577495       1.01717210      0.348709166      0.541820109       1.19678593       2.35804081       1.11150765       1.32225358       1.89428890      0.114020564       1.10984445       1.69633389       1.16465616       1.76437759       1.15388203       1.81934237      0.515632808       1.46905363      0.790308893      0.644658685       1.86623561       2.60331511      0.311701864       2.25447321      0.454788893      0.240859106       1.19286358       1.41427636      0.826750040      0.901164889       1.25001478      0.947608054      0.764634430      0.542506993      0.658144534       1.30330622      0.565250874       1.87067175       1.63931608       1.00088584       1.29765475      0.479979187      0.980134487       1.02421904       1.19472563       2.51751852       1.33220708      0.920592487       1.01041257      0.336040914       1.92083240       1.20034087       2.69321060       1.50671291      0.234178513      0.623255312      0.481444746      0.786485851       1.31255686       3.47906089      0.561177969       1.16941226       1.16873312      0.496856004       1.87749922      0.452414066      0.213101149       1.56622660       1.64585900       2.47290707       2.24523687       1.51682520       1.55020428       2.47243428       2.18029833      0.107896715       1.13710630      0.699215293       2.65887547      0.317749947       1.07715714       1.93072355      0.814222753      0.327759951       1.53185368       1.09110761       1.11864400       1.98542452      0.755387545      0.815232515       2.01435113      0.347663879       2.77875304       2.94299507      0.703575313       1.52416766      0.775439918      0.838020205      0.750085413       1.59040666       1.51655531      0.435782403       1.05567276       1.62333179      0.585682333       2.21781254      0.504160166      0.754808366       1.75740600       1.39417183      0.717038751       1.33852172      0.846130669      0.311921984      0.840769053       2.68163109      0.387871087       1.71597207       1.08060718      0.959922850       1.58852923      0.931305826       1.14812386      0.540326118       1.61170602      0.901199043       1.20929122      0.392696142       1.45999789      0.559773803       1.59691763      0.772490740      0.270587683       1.73089790       1.37272894       1.57452917      0.319453031       2.12862730      0.606259227       1.05884457       1.13997829      0.759378374       2.36882305      0.353430957      0.598316610       1.94535518      0.749175429      0.967691064       1.15216482       2.72225809       1.41445398      0.911028147      0.488041371      0.886776030       1.00276530       2.23434591      0.632372975       1.74351108       2.19159889      0.414749771       1.62817121      0.811818957      0.556189895       1.11471343       1.08306301      0.698341489       2.45167994      0.501368463       1.12831748       1.30312788       1.83539844      0.444461614      0.317957431       2.02860880       1.05228055       1.61195803      0.448785961      0.628260970       1.02414644       2.14352083       1.68715799       1.72578871      0.762708306       1.85408366      0.807219267       1.12321222       1.07558429       1.10506368      0.372743726       2.32467866       2.29452682       1.29115558      0.395709276      0.826202869      0.732097149      0.565913856      0.623377383       1.84505355      0.423106313      0.842670500      0.989197195      0.354543120       1.78796923      0.267319083       2.14691496       1.39811432       2.03058743       1.59345698      0.211397931       1.86685705      0.605999947       1.24123418       2.35349250      0.881099463       2.24415922       2.97037911      0.912394047       1.82390225      0.422172010      0.721890330       2.57656765      0.414869547       1.23547471       1.30155754       2.09540892       2.36896133      0.893607020       1.17877758       2.52410436      0.938173711       1.89115274      0.606492043       1.47781825      0.751221597       2.47245789       2.29221916       1.17338300       1.63322711       2.27525377       1.24904108       2.46576023      0.917493224       1.61600983       1.00088930      0.379821032      0.808111131      0.578635275       1.02878344      0.794261277       1.21746230      0.494303912       2.34850287      0.417519897       1.01144385       2.25507236      0.507544279       1.47746456       1.02458251       1.13304377       1.35152519       1.47822738       1.29036748       1.27791190       2.28122854      0.852169633       2.59061408       1.11660028       2.01437759      0.761632681       1.70622480       1.94992805      0.786233068       1.61947727      0.533470809       2.45225811       1.70304060       1.97999501       1.02347922       2.47800589      0.364625245       2.83624387      0.977186024       2.74671054       1.47549534       1.63262188       1.43122995       1.42948163      0.746720612       1.77437019       1.51985133       1.06415212      0.916598618       1.10116363       2.33305216      0.518885612       1.71735489       2.03496456      0.853277683       1.75613272       1.86096334       1.75944567      0.915180385       1.23209476       1.51885378       1.51917684      0.671306252       1.80700552       8.37263092E-02   2.02090120      0.881772697       2.24951839       1.75404072      0.324336976       1.36933255       1.97022128      0.879262447       1.35176134       1.59474194       2.13456631       1.92528808      0.668847620       1.83261156       1.98622024       1.44317102       1.91975951      0.905121326      0.205942079      0.961404681      0.769784987       1.12884665      0.797861755       1.02372861       1.41407502      0.115517795       1.82061756       2.68530655       1.47521651      0.891395509      0.706095278      0.223604351      0.609277070       1.23003674      0.529386520       1.89246023       1.62726247       1.55219674       1.64670670       1.35016596      0.708979547      0.982097208      0.766235292      0.196557999       2.17870092       1.47958839      0.803420365       1.36172116       1.90774465       1.15016580       1.79062986      0.351748258      0.554626703       2.39606380       1.54251194       1.83039176       1.21717238       1.39289391       1.63299739       2.12798595       1.01280832       1.26964688       1.56847095       1.38843513       1.08980978      0.995751917       1.85268092       1.04835165       1.59181452       1.47355986       2.29879260      0.691849172       1.09672010      0.984846830       1.69099653       1.27994168       1.47945726       1.47764575       2.62540722       1.91189587       1.37451994       1.33313584       1.34826624      0.760960996      0.862174928       1.70735717       1.44508040       2.60386086       1.30006588       1.05423307       1.97952724       1.53510022       1.24069297      0.586486220      0.610402524       1.95645571       1.21352959      0.150523543       2.25146770      0.929570436       1.97211540       1.77279484       2.35475516       2.28153110       1.79689348       2.16786265       2.33579516       1.66938245      0.697146535       1.13374090       1.43727064      0.815780342       1.10279679       1.84282231       2.55818462      0.551524282       1.51269186      0.761424124       1.27426898       1.56906450       2.95074034       1.60664392       1.19965196       2.57499719       1.00893235       1.23626983      0.176949009       1.33539271       1.37481821       1.44739366       2.28178358      0.783968806       2.56084871      0.465913177       2.06034517      0.459190071      0.868730307       1.26268756      0.601444840       1.52242911       1.33516049       2.16639400      0.900692463       2.22355342      0.191043004      0.159753487       1.81447089       2.27488708       1.32038546       2.14482379       1.14067590       1.88943863       1.42146122      0.735147238       1.35517168       1.09022570       2.31133342       1.23291755       1.71231639       1.28526115       1.10077298      0.460484326       1.05298305       1.43834150       1.76626825       1.99162567       1.14538753      0.943846822       2.68152738       1.54410839       2.54703474       1.32969797       1.45058978       2.25705290       1.00250292       1.63612127       1.47049260      0.399637520       2.38171792       1.14198446       1.23999965       2.24140215      0.409260780      0.628261328      0.627422690       1.75140750       1.16147625      0.612727344       1.16639400       1.26779032       1.84188759      0.425709933      0.390315890       1.78649735      0.471071184      0.156515047       1.66283107      0.955712795       1.05056798       1.69382751       1.14439237       1.13637125      0.659438074       1.50752318       2.60705090       1.57460737      0.344216883       1.86980271      0.508156180       1.90046346       1.28970003       3.02316284       2.05968356      0.145220965      0.572016597      0.794144034      0.765860736       1.01965380      0.278254151       1.80065155       1.08901393       1.71492636      0.897456288      0.827706099      0.886454880      0.940814197       2.79289532       1.29760742      0.833071113       1.30731416       1.59415054       2.14444852       1.12197256       1.83450902       2.54118657      0.972475767       1.34303772       3.01629400       1.29246199      0.182736784      0.501508653      0.536435246       1.22978163       2.77756262      0.604155362      0.822417498       1.63492298      0.859488308       1.49117196      0.888964832       1.60023594       1.39342523       1.33298063      0.950699151      0.619249463       1.43204689       2.05276227       1.55568850       1.43441486       1.03610575       1.26324594       1.04363275       2.24292850       2.72456503       1.92569923       2.41634560       1.18290806       1.29919708       2.60445809       1.20335233       1.34794641       2.23955178      0.277398795       1.98596358       2.10272670       1.66401541       2.63258338       2.31571579      0.842213750      0.938594103       1.19077373      0.955950618       3.14855886       1.14856207      0.909219563       1.44720149      0.745314181      0.607332230       1.30071115      0.945913851       1.54149103      0.763582826       1.81779599       1.62393129       1.53609753       2.27202296       1.20130193       1.10593283      0.243191928      0.970137715       2.06208372      0.867578804      0.818899214      0.142465204      0.827358961       1.02077615       1.67943871       1.07869136       1.39850819       2.58178854       1.58760703       2.20602131       1.35666144       2.39111352       1.45660782      0.842841566       1.35032332       1.64024949       1.24640357       2.88283873      0.278928310       1.93992043       1.81327140       2.65078521      0.731461585      0.892810225      0.693826199      0.660555005      0.735833764      0.575921714       1.14547694      0.845575452       1.04898298      0.668377399      0.738368094      0.490464360       1.08614469       1.10965383       1.62009704      0.345566452       1.54979658      0.930666208      0.162384450      0.996709466       1.77518892       1.62481177       1.75654078      0.701056600      0.172509193       3.29313278       1.02486515       1.19713926      0.732806683       2.02509499       1.45949256      0.546927214       1.12457204      0.661801696      0.560493886      0.425438970      0.900001109      0.710232317       1.71155071       1.27915692       1.62099075       1.64514375       1.11057580       2.85724974      0.674327254       1.61883795       1.44096196       1.68523645      0.789887786      0.986451566       1.89943516       1.15283787      0.954286218       1.03558481      0.770557940       1.53179514       1.18197572      0.556001008       1.02850950       2.02355099      0.798192799       1.49021018       1.71357059      0.288401991       1.04015732       1.28497434      0.506449938       1.58044517      0.841094196      0.423914522      0.411814719       1.00949037       1.34259415       1.01986277       2.37015891      0.805940092      0.618652225       2.14706922      0.742334723       1.33158815       1.01782393      0.977191567       1.22685206      0.724051595      0.599462807       1.18364501       1.80563653       1.58878112      0.648892641       1.11426973       1.03426695      0.390019685       1.23261178      0.964366794      0.118332028      0.436654747       1.38700294       1.20190823      0.825422883      0.682461202       2.02785778       1.42587745      0.657961547       1.06094313       2.30246162       1.56694663      0.622719109       1.19229460       1.75371492       1.27302122       1.04072845       1.44107032       3.05544400       1.01028919       1.27667558       3.27704692       1.32045913       2.34620571      0.620064974      0.575261056       1.95211077      0.519445002       1.80056441       2.19779348      0.845227838       1.19448781      0.757968366      0.949503481      0.712227702       2.61507297       6.81894049E-02   1.10928392       1.97207725       1.65557659      0.949907601       2.14749098      0.939910591       1.48115146       1.34898508      0.452524692      0.937945366       1.16034794       1.25016582      0.678648114       1.28973854       1.25965357       2.13923979       1.33771765       2.06611371       1.80803776       3.66044305E-02  0.353346229       1.41206288       2.05732226      0.966615856       1.41503549       1.49132311      0.681673408       1.68082333       2.17722082      0.398697704       2.03211880       1.60685027       1.09513974       1.47492063      0.997267127      0.786516547      0.551989913       3.22567987       1.37420177       1.90061200       1.01722181      0.331005841       1.47076344      0.983202279       1.16504085       1.18231726      0.911030650      0.877299309       2.28147984       1.02187407       1.22759593       1.36812627       1.31975901      0.855672181      0.351557136       1.05669546       1.20174944      0.509343505      0.474312216      0.543826938      0.554298937      0.514802337       1.68719006      0.694255412      0.995183349       2.20651269       1.49943686       1.92961681      0.746812701      0.771477103      0.736345828      0.460658014       1.68932426      0.689803660      0.469117850       1.55556750       1.83238053       1.51368201      0.217930540       1.07395554       1.33302534      0.401083261       1.47971928       1.02386558      0.724324882       1.24403036       1.18787253      0.353726864      0.979626894      0.670360327       2.11475658       1.42659092      0.341877997      0.278694481      0.694054782       2.56648970      0.685273528       1.65610874       1.58426046      0.951792598      0.523355484       1.19974506       2.45617008       1.55702031       2.35544705      0.739525676       2.36063743       2.95776939      0.529238760       2.39377522      0.893751860      0.279611588      0.739501774       1.10691392       1.34109187      0.630618453      0.932711244       1.94868839       1.69039750      0.485998273      0.891493678      0.855938971      0.663126767       1.20732272       1.65917051      0.833226621       1.68251979      0.421808690      0.344641447      0.461110741      0.804551542       1.47875845       1.97821248      0.412409544       1.60275972       1.65923965       1.49699521       1.99306929       2.81682277       1.51150703       1.93255925       3.35304475       2.81005597      0.390506864      0.844497025      0.785416067       1.52232075      0.474802256       1.29507291       1.55903029       1.25684488      0.985392272      0.887829900       1.49907207      0.358742058       2.13883471      0.734117925       1.78664517      0.926370621       1.68182695      0.866912782       1.46190441      0.241570905      0.853324652       1.10644686       1.04260218       1.30600274      0.588549852       2.55349731       1.90573549       1.37549412       2.21961904       1.20945477      0.963245571      0.343335837      0.514020979       1.04578066       2.12466145       1.57864499       1.98040187       1.11431694       1.03997993      0.767643750       2.17282486       1.43823957       1.94450033       1.43626308      0.641388416       1.16522944      0.785279155      0.205824390       2.09968472       1.51609218      0.417182118       1.56266034       1.59666288       2.68063116       1.65542424      0.263820916       1.72947395      0.834901333      0.494368374       1.48447001       1.80626333      0.772489965       1.67859685       1.63762724       2.07176566       1.47303247      0.820503294       1.33310425       1.19639599      0.808338225      0.773327112      0.526194870      0.671623766       1.03419769      0.531163692       1.82154262       1.83051646       2.22593570      0.529293895      0.892099917      0.503431976      0.414560527       2.12499642      0.486022443      0.809663415       1.75814950       1.79886603      0.405540705      0.978323221       2.99764657       1.46142566      0.662260354       1.67360556       1.53895140       1.94215178       1.29171717       1.50371778       1.19090199      0.978853047       2.26636910       1.44488549      0.866205692      0.990900159       1.02686656      0.798835754      0.559733152      0.915071964       1.81836402       1.29958713       1.88409197       1.50761437      0.879521489       2.02030277      0.615606308      0.852167845       1.29800403       1.93956208      0.982618749       1.13972473       2.76162672      0.875024915      0.816558361       1.06544018      0.391100466       1.28887391      0.777602792       2.05549073       1.48018110       1.61167884       1.34777415       2.53726506      0.345987350      0.179565609       1.68452859       1.27131593      0.707276702      0.225840896      0.702163637       1.13191974       2.06218410      0.465704083      0.807182014      0.138590276       2.21377468      0.783093393       2.04356050      0.986142755      0.630599797      0.843057036       2.18058801       2.34453511       1.82616901       1.89029753      0.684554935      0.450402170       2.38191223       1.82754064       1.53217340      0.759656608       1.06392264       1.81047750      0.474729598      0.465074539       1.34450614      0.889837444      0.492894650      0.278339207       2.42100692      0.690529406      0.718576252      0.543685675       1.62465620       1.00065315       1.33538020       1.68091655       1.40602517       1.15204728       1.63584256       1.46106851       1.72109294      0.566786349      0.422476113       1.72375655      0.585311711      0.848866343       1.01793289       6.59909397E-02  0.735258877       5.92511073E-02   2.28936195       1.92266214       1.03496051       1.05636907       2.38386917       1.21548676      0.721230090       2.50369096      0.674319923       2.16201997       2.21612716       1.27863765       2.36772537       1.16834617       1.81956017       2.43577099       2.02104688      0.378361702      0.545738101       1.26222861       1.05771911       2.16056752       2.17935443       2.04352093      0.682814062       1.48181987      0.590485811      0.235824540       1.06889999       1.27007794       1.34152555       1.18339515       1.70281136      0.902611732       3.03694820      0.891690373       1.97237098      0.107209444       1.02023208       3.60101724       2.04814005       2.09948993      0.476629734       1.90982985       1.39357066      0.780678332       1.57403219       7.01416656E-02  0.962399483      0.610871017       1.42264616      0.381330580      0.397360742       2.02779984      0.590503097       1.58687830       2.13014507       1.13490880      0.163452193       3.17419887       1.01311278       1.63864434       1.30969644      0.974351406      0.741553485      0.915634573       1.59612691       1.14388227       1.98709869       1.16456497      0.698899627       2.43837452       1.67907751       1.80313337      0.963673711       2.03170133       1.05182862      0.193566352      0.737208962       1.29892683       2.93542576       2.13565612      0.818804026       1.50482523       1.54668975      0.678074718       1.34883010       1.75020874       1.27793396       1.86736953       1.66784370      0.889739156      0.249574676       1.34734738       1.04010248       1.40989232      0.783652067       2.61658168      0.588920116       1.27428603      0.486727417       1.98880970      0.734817564      0.895690501       1.61685514       1.28856099       1.23339307      0.953701437      0.847440004       1.31597161       1.06031644      0.680763900       1.30619144      0.380511850       1.93023276       1.16650009      0.907034397       1.03707850      0.938543975       1.53205013       1.89023077      0.839520395       1.44494736      0.859157145       3.10731649       1.41742468      0.571608782       1.06682813      0.671699166       1.66797936       1.12269461       1.26985407       1.56951845      0.441427022       1.27200973      0.563187718       1.81493390      0.417312860       1.83956265       2.19246292       1.15992570      0.480664402       2.01025510      0.596549332       8.20741504E-02  0.374685764       2.08890843       1.66431463       1.31356227       1.43381631       1.27684569       1.03277910       1.08190203       1.69655943      0.831908405      0.657677591       2.34431243       1.91426587       1.64825213       2.70735240       1.48225415       8.34665820E-02   1.38004911      0.672078013       1.07033598       2.13636637       2.21332383       1.18312562       1.96181631      0.811077476       1.66220295       1.41792893       1.18627036       1.82499933       1.24894154       2.34865332      0.161015704      0.869072497       1.67152560       1.52977610      0.991033971       1.63372958       2.26323652       1.40046787       1.12279797       1.00547814      0.388353616       2.46671557       2.16159511      0.875035465      0.903807223      0.724663854       1.24321032      0.962694407       1.98540354      0.674460530       3.37189817      0.982070029       1.04492617       1.43789446       1.72665596       1.53583264      0.613166928       1.39895022       1.70757639       1.26121414      0.881334603       1.66574574       1.54592872      0.771425605       1.94195771       1.85433805       1.04671681      0.386120349      0.822067201       1.93191206      0.471549273      0.594140768      0.951842427       1.77161312       1.19974446      0.617527485       1.78952563       1.92267144      0.852534175      0.709960878       2.19636440      0.770933986       2.44245481       1.67828619       1.19564414      0.662805319       2.20138073      0.756024003      0.222920910      0.487114280       1.04873538       1.29408050       1.51975000      0.912585020      0.798858881       1.99682975       1.14152002      0.820414066       1.10855067      0.350512803      0.678156674       2.79159832       1.00885284       1.29210055       1.76251864       1.24929714      0.747567654       1.17458582       1.57589316      0.784686148       1.97505665      0.341411769       1.69106925       1.97646224      0.473629802      0.823535681       1.75061572      0.476222605      0.718982458      0.535817862       1.47448635      0.537938297      0.461632073      0.535172045      0.678531229      0.879509628       1.62812769       2.68447089      0.306034863       1.46693671       1.34251821      0.605837166       1.54241812       1.86183286      0.576469243       1.45790827      0.613905907       1.78766286       1.48180604      0.599422514       1.04959607      0.543718815       1.76244068       1.24167585      0.353289664       2.17524958       1.51823997       1.57202923       1.01390862       1.84213352       1.85271263      0.393648207      0.805533826      0.412222743      0.563747823       1.67855585       2.30573964      0.474754602       1.38714278      0.664520979      0.681611657       1.70966613       2.15792131       2.13458037       2.24975395      0.662603021       1.27470362      0.617161632       1.49822462       1.02424824       2.42567182       1.71237719      0.646712482       1.04501891       2.05015445      0.855481327       2.26567435       2.40398693       2.35740829       1.26048326      0.648723006       1.05237234       1.33881843       1.08688712      0.316322774       1.29039979       1.64778113      0.216569528      0.382862836       1.21501541       1.33413935      0.754321218      0.917844534       1.61987519       1.20511961      0.315646619       1.65411782      0.761955202       1.07379186       1.31981981      0.905968904       1.59020829      0.817797184      0.879083037       1.07300842      0.971527755      0.980065942      0.792997181      0.488736480       2.52926493       1.15083909       1.80859160       1.23449326      0.737634361       1.22849429      0.289232314       1.08966005       1.37974679      0.568567336      0.164718360       1.07673490       1.47435403       1.49926817       1.35711110       1.43188858       1.71919274       2.93594980       2.19160485       1.40781093       1.70403516       1.45939600       1.48865700       1.27066684       2.08013344      0.876663327       1.94856393      0.441026926      0.887843549       3.02183318      0.710065901      0.295096427       1.16926467       2.10727763       2.69726253       2.10604548       1.30190611      0.366748989       1.39958036       1.47236419       3.51860833       1.79167962      0.334706247       1.58223426       1.24300611      0.329198420       1.86400104       1.13107240      0.845683634       2.19737005       2.69494867       1.71020126       1.65374219       2.20449066       1.79825032      0.170783103       1.62272120      0.502046347       1.06179070      0.527183354       1.58765066       1.02179492       2.35934281      0.129605368      0.339345008       2.16174960       1.00394285       1.50381279       1.50510621       1.88270426      0.517912447      0.628287077      0.263420165       2.41626954       1.32214594       1.48396516      0.937908351       1.70634139       1.83056891       1.34184492      0.939091563       1.01857591       1.52327299       1.24849248      0.620679438      0.383494943       1.41539633       2.03025627       1.14254296       2.09693742      0.780662596       1.46651936       1.69458652       1.34525192       1.12559688       1.62913740      0.121419504       1.88357711      0.576753795      0.532111287      0.574669719       3.29980898      0.283981562       1.16413319      0.906670690       1.90051472       1.57361341       1.76620483      0.876116574      0.963259101      0.488749117       2.09589314       1.17711818       1.88690031       2.38261580       1.18989635      0.514783204      0.789511561      0.704118907       1.74972308       1.45656717      0.249367386       1.68782508       2.30462074       1.74636638       2.50856590      0.389963597       1.66554248       1.73588324      0.543676913       1.17633939       2.00008440       1.90316105      0.815217197      0.282287955      0.670733511       1.28701937       1.44859612       2.39482188       1.79845190       1.25298893       1.36305499       2.70482349      0.744086623      0.715194702      0.550004363      0.629610658       1.13864303       2.71292186       1.11953461       2.75149250      0.689518154      0.553587258       1.69293523      0.444802105      0.568474650       1.34191203      0.764670014       2.07210231       1.28600693       1.40493071       1.60862434      0.817686200       1.78182030       2.13890719       2.28379893       1.61965442      0.970033288       1.27019894       1.62411392      0.753068745       1.22511983      0.831659019       1.32602620      0.968685091       2.70137000       2.09497881      0.402733177      0.446445465      0.921888947       1.14879537      0.518608510      0.900515378      0.610024571       1.85596490      0.563065410       2.03826880       1.53546154       1.39805377       1.38548803       1.32508218      0.957526326      0.841486514      0.740560114       1.40254462      0.899519265      0.940902412      0.907705963      0.736298501      0.425802201       1.80322599      0.961615026      0.691714644       2.04669142      0.646593392      0.788238347      0.533650219       1.81207609      0.953652799       2.12769842       2.83112669      0.538829744       3.48807096       1.11094439       1.12573075      0.148782372       2.31258011       1.37464046       1.02283776       1.49406075      0.784183443       1.31274271       1.33914852       1.46918166       3.04866743       1.31907618       1.62583160       1.27872169       1.61012447       1.67569494      0.534851909       1.62390709       1.36717021       1.21271050      0.932903111       1.63488567       1.45938826       1.29262042       1.41053760      0.325026095      0.273071587      0.125218317       1.59694529      0.611361921       1.74822557       1.47824788      0.375440389       1.53627908       1.19784105       1.92981136      0.990846336      0.324240506       1.64481831       2.27904749      0.216377854       1.81242609      0.802051485      0.836580575      0.419820398       1.41062915       1.61839407E-02   1.08903408       2.04517031       1.31763244       1.57824957       2.18233633      0.996739924       1.32626700      0.572152436       2.08600926       1.64604032      0.974524081       1.31632900      0.730730712      0.398804516      0.628407598       1.09343576       1.52857041       1.69464421       1.47034276       1.59047174      0.571516812       1.51871550      0.644114614      0.785916150       1.37677598      0.780383289       1.70766330       1.55376720       2.01338720      0.549105883       1.46957922       1.00469017      0.730493486       1.19896877      0.354422987       2.64971352      0.568600833       1.32199800      0.963944256       1.89092886      0.751110733      0.606062591       2.17894101       1.44557655       2.83397198      0.457464337      0.182539657       1.95986748       1.55117846       1.33778536       4.09079790       1.57009304       1.43204987      0.508167386      0.668506026       1.61708772       1.04471552       1.20920682       2.21872115      0.277043313      0.661828935      0.940480769       1.43666649       1.92453277      0.916068077       1.82786262       1.60691273       1.13051593      0.729822397      0.894929349       2.60599542       1.29854095      0.951262116       1.19968653      0.969935119       1.45757568       2.23001647      0.874303341      0.811325371      0.546089292      0.625120819       2.26471686      0.663823247       1.09212077       1.26874793      0.478013873       1.48870504       1.73532367      0.405275404       1.04918361      0.254757136       1.49661219      0.503090322       2.26863289      0.257275939       1.23065019       1.36091495      0.967025220       1.21227574      0.519895196       1.21810365       1.19717300       1.61990166      0.767716706       1.08760595      0.514632225      0.322611094      0.971114933       1.12988818       1.22625279       1.03264570      0.520272374       1.71516860      0.610921800      0.794513702       1.08155453      0.847084105      0.562255621       1.55850840      0.269050002       2.69377565       1.65047431       1.21460128       1.84609890       1.19465840      0.660852671       1.48122776       1.32137883       1.84538484       1.06520689       1.60919785       1.68036318      0.938889265       2.14798141      0.326377660      0.856913149       1.36284244      0.635428965      0.690194726       1.29589415      0.881243646       1.87097180       1.87703502      0.749848247      0.932612956      0.635926783      0.873329759       1.63027155       1.45170367       1.35297668       1.19647789       1.51642704       1.34864175       1.40981317       1.38299584       2.02046609       1.68923092       1.29014552       1.97233415       2.43514681      0.491468370       1.80960202       1.29277754      0.691959918       1.15761673       1.56222939       1.95708442       1.47934616       2.91510746E-02   1.60256326       1.67558217       1.37543046       2.30245090       1.40066504       1.74238586       1.60417449       1.83219838       2.21529055       1.61622143      0.991371214       1.94598782       2.68734097       1.63209820       2.12448406      0.325818270      0.882209480       2.17364001       1.90250909       1.16170382       2.01167345       2.02499175       1.19476616       1.16190684      0.641387343      0.366145223       1.44842601      0.981716335       1.66941977      0.949391842       2.12842917       2.46151590      0.924033403       2.78112364      0.738042772       1.76783586       1.62807560      0.531995535       1.65093279      0.540324867       2.27755761      0.922550321       1.59719157       2.80591917       1.73695815      0.565507889      0.541261494      0.415359259      0.303094834       1.23759627      0.974873245      0.333645552       1.20328248       1.88330448       1.12524796       2.16948628      0.455810606       1.51657343      0.351850659      0.808629453       2.81029129      0.776333153       1.15578723      0.903615355       1.05421305       1.32309163      0.392207831       1.08645904      0.245136291       2.68191624       1.67302871       1.11141753      0.592542768      0.666008413       1.42230046       1.48299396       1.71170402      0.938686430       2.29263973      0.410355598      0.988412678      0.970466554       1.98911965       1.49530935       2.11206174       1.04475653      0.892620862       1.44913960       1.25654805       1.12837660      0.114436537      0.487486303      0.726361632      0.787580788       1.27092206      0.770685971       1.27966177       1.63307488       1.65019071       1.96901548       1.70205963       1.24767911       1.09019744      0.812489867      0.649053872      0.416239172       1.68085492      0.960335016       1.21022856      0.452824026      0.750439405       1.70128679      0.887121260       1.07396865       3.03556418       1.62578273       1.41619575      0.569191217       1.94119799       2.29267812      0.356144547       2.47271013       1.97416997      0.398688793       1.14856839      0.671067178      0.275323212      0.652421176       1.52784169      0.938149691      0.801708221       2.17679548       1.64811337       2.59117484       2.68937278       1.69117022      0.777680993       1.13478184       1.10513175       1.77395701       1.27370894       1.47918308       2.90983295       1.60727608      0.204097733      0.562311530      0.937885165      0.706180334       1.82979178       1.63256729       1.80454814       2.14818096      0.427632958       2.95039654       1.66214728       1.16670275       2.29098701       1.57528663       2.36304522       1.71389246       1.13054931       1.40516460       1.63038099       6.93233833E-02  0.719847202       1.50593853       2.29439640       1.38623428      0.261359364      0.589175761       2.00871444       2.11690903      0.300445557      0.939509988      0.861924767      0.353453755       4.65606594       1.06576741       2.64804983      0.474565864       2.40496492       1.19543123       2.14853406      0.549532354       1.51824713      0.927060843      0.481300712      0.379813284      0.271714956      0.600478649       1.57162762      0.365296453      0.547855258       1.42846417      0.983997941      0.694880784      0.404442072       2.04314661       1.61461830      0.573480487       1.23476541       2.10006285      0.771524251       1.63119578       1.61870003       2.44757485       1.58025825      0.261289030       1.09134436      0.745487034       1.41836309       1.31951833      0.341789842      0.600285709       1.06266522       1.08023012       1.75411451       1.01471484      0.919063926      0.765548289       1.19411039      0.654536426       1.55491841       2.13474917       1.48005497       1.22875690       1.29832745       1.93862236       1.07242143       1.37197483       1.20697832      0.807711959      0.990053058      0.761112392       1.18762755       1.39969289       1.27868366       1.62050259       2.07698226       1.74688828       1.36744511       1.40018499       1.12827218      0.807334125       1.72226632       1.18931890      0.532986641       2.43157244       1.89228630       1.01892471       1.08411539      0.530429542       1.55265415       1.85308897      0.869764447       1.28841698       1.68707824      0.471297622       1.32755828      0.825969040       1.13642418       2.92676067       1.11402869      0.628227413      0.594052792       1.22166300      0.615489542       1.45105028       1.67383146       1.10702276      0.662485361      0.641000450       1.06767035      0.702225447       1.31988001       1.25071192      0.654990196       3.05455399       1.29020309       1.76248229       1.39162195       1.11536014       2.48084831       2.85134745       1.65540195      0.991737306      0.874307632       1.28447604       1.00472140      0.936621010       1.28686035       1.40835369       1.75672781       2.26130819       1.11751223       1.96126390       1.11040926       2.01337385      0.581402361      0.789979398      0.903310537      0.846762002       1.16442549       2.60023260      0.797502041      0.873913467       1.29477024      0.982940257       3.00744200      0.791937411      0.509590447      0.835499644       1.50356925      0.523364246       1.01633668       2.05435944       1.40259719       2.60913229       1.40275741       1.23696434      0.977779090       1.32159483      0.840132952      0.945524931       2.16774058       8.20559263E-02  0.764081120       1.46047926      0.671314240       1.64372754      0.744385421       1.34852350       1.67959404      0.909621894       2.69205737       1.78603017       1.18872666       2.28839278       1.96732140       1.14082706      0.287867010      0.942116439      0.697373390      0.141102120       1.21515667       1.52840495      0.509988844       1.10482240       3.08815742       2.09383321      0.533225179       2.06003428      0.816080153       2.97830009       1.67458475      0.951074839      0.639458537       1.90462077       1.51634014       1.15215421      0.744246721      0.533490241       1.26306450      0.783170998      0.465597957       1.21316373       1.50991404      0.924106598       2.29283738       1.71187639      0.388126314      0.869711339       1.24292052      0.488575101       1.26061714       1.22995329       1.03734064      0.874758780       1.97011495      0.427600265       1.22916591       1.54603100       1.96887767       1.72240317       2.12878609       1.48760176      0.330709189       2.37214494       1.33488357       1.16734028       1.12428486       1.52001190       1.10411370       1.59706068      0.392210275       1.79418278      0.572985053       1.79111397      0.891096354       1.47870862       2.39873457       1.17723918      0.325957537       2.15323162      0.609785199       1.14629197      0.678874552      0.864541054       1.22597456       1.66658032       1.36795974       2.21585202       1.19929492       2.66189504       2.88317394      0.753677547       1.35043526       1.55063915      0.465718776       1.15060031      0.973790050       1.30037236      0.236420497      0.306922972       1.35009456      0.943563461       1.58549619       1.00134289      0.714756787       1.52801955       2.80257154       1.16918588       1.49704635       1.77076030      0.878117323       1.69337749       1.41273427      0.773239791       1.58874989      0.367084712      0.468350321      0.930031180      0.752538025       1.01203513      0.855715156       2.25187683       2.35831547       1.28077185       2.35244465      0.491379380      0.336265147       2.16076183       1.07191467       2.24348402      0.577817976      0.456945330       1.61968029       1.88388765       1.69999957       1.23782051       1.45559597      0.224766612      0.892986357       2.63249207      0.145456389      0.207100481      0.481570005      0.519940555       1.12313688       1.17231214       1.28637183       1.25758338       1.61011660       1.41125166       1.95281029       1.25526214       1.51413608      0.792970955      0.267773718       2.04617977      0.456541508       3.75679016      0.562222600      0.730056047      0.847233534       1.55702138      0.378988743      0.596044600       1.00693071       1.23313951       1.77333963      0.614497423       1.18943143       1.66127884      0.169421136       1.92587161       1.65475082       1.40929687       1.66211581      0.581756771       1.72477794       1.24199975       1.77669752       2.10403705       2.43482280       2.80222631       1.40307534      0.968930602       1.72223818       1.50824630      0.301897466       1.79535055      0.867458761      0.365949154      0.982099533      0.934966266       1.09127200       1.18015456       1.52131355       1.71980727       1.39271867      0.606415033       1.85352623      0.850858927       1.64015150      0.741705298       1.27140296       2.36160207       2.14646316       2.33015704      0.879156172      0.633651257      0.193018734      0.896959186      0.759578288       1.60687101      0.888284743      0.584116578      0.631210208       1.74740934       2.17704797       1.12130153      0.274097711      0.921650767       1.07955909       1.06099856       2.22325039       1.35833061       1.15791082      0.884806275      0.944781005       1.69691944      0.718474984      0.272168666      0.663071215       1.81246424      0.543730140      0.721795022       1.23747110       1.19720554       1.24699295      0.625038624      0.751453698      0.781043828      0.678076565      0.429856062       1.71014559      0.527029395       1.66049862      0.795217693       2.35602236       2.28062391       1.06682587       1.18020403       1.32660902       1.20403254      0.937916994       1.98960435       1.87260461      0.676109254       1.19961882      0.790843606      0.245233506      0.608570516       1.65210569       1.19637036       1.61626887      0.275523275       2.38482833      0.951277137       1.11834121       1.61992502       1.30849135       1.42493916      0.935406804       1.72198105       1.08050406      0.699498832       1.52414405      0.715127528       1.89441645       1.38701415      0.243189141      0.898707330       1.24144208      0.415458441      0.644446254       1.14891303       1.58475351       1.13329136       1.99415445       1.09984148       1.31760883       1.43232596       2.72199464       2.40677238      0.785163164       1.61643481      0.889645934      0.677620173       2.33081579       1.24574375       1.48482215      0.282110572       1.11700428       1.10628843       1.16602659       1.42564702       1.56169343      0.961684287      0.860021532      0.801786780       2.12691808      0.442559302      0.207261547       2.62387586       2.94824529       1.86855614      0.955736637       1.29200876       1.43418515       1.04498136       1.69160235       1.39839137       1.68437994       2.28181052      0.620169342      0.472273946      0.748626471      0.473442942       1.28607345       1.44558454      0.992510259      0.923420608      0.815437555       1.14731312       1.49526429       2.85385227       2.18271017      0.239967719       1.03498936       1.09523678       1.53787625       1.10684156       2.36289454       1.37951303       1.37460828      0.519724667       2.41368294       2.29805493       1.31018233       1.85297740      0.582517266       2.67953634       1.91190481      0.843322635      0.445111066      0.737874985       1.95514131      0.625480592      0.172236145       2.61082840       3.00594902       2.96476912       1.86616635       1.56159866       1.62027180       1.27012467      0.734552979       1.28050685       1.43436968       1.34742737      0.967878938      0.807185411       2.78725910      0.337208152       1.08706462      0.844920695       2.38156652       1.05602586      0.563162625       2.66641355       1.17888689       2.10125256       1.88354588      0.300582916       1.07498956       1.99787819      0.547384739       1.28659511      0.808414996       1.89174128      0.983021736      0.184486538      0.465211898      0.595169961       1.28134000       2.22493577       1.20533693       2.12993622       1.40790999      0.140178874       1.55527747      0.479468435       2.86248088       1.96810091       1.49417531      0.365022868      0.920264602       1.53179884      0.843403816      0.888201058       1.09956217       1.23231220      0.954857051       2.10149622       1.57682717       1.79326427      0.809270024      0.605936468       2.19505835      0.971850514       1.11656117       2.02906942       1.60114288       1.77481091      0.736076713       2.21394157       2.11287212      0.882647991       1.26934469       1.03366268      0.818509102       1.04101527      0.825973988       1.31346691       2.66995096      0.585732222       1.63619792       1.75084162       2.09031940       1.91908240       1.21565580      0.590044677       2.91807747       1.50550604      0.721346736       1.76417446       1.17255926      0.297533482       1.44744265      0.404254258       1.35204685       1.39819622      0.947907746       1.51412225       1.90887499      0.768721104       2.01478648       1.96886587       1.65685737       1.28520584      0.475019574       1.23251212      0.904065490      0.767681718       1.65808523      0.863942623      0.884194732      0.884866655      0.799257874       1.08812797       1.10765386       1.60635805      0.541674197       1.69333088       1.26984096       2.33291340      0.578701615       2.61174607       2.40480804      0.336014837      0.473191082      0.701957703       1.45352435       2.08546162       1.28842914       1.76011848      0.553459585       1.87580514       1.85800886       2.14434910      0.490695953      0.619110584      0.513500810       1.34156835       1.85364175      0.877434194       1.48013854      0.391260207       1.30510652       1.89714909       1.55648339       1.64466786      0.899873674       3.24605322       1.30875099      0.630234778       2.13193560       1.40850055      0.644614518       1.62584746       2.46205807       1.29540193       1.32169974      0.563501894      0.749064744       1.01691771       1.85833359      0.829163551       1.41979480       2.48673153      0.228400797      0.203036532       1.48319018       1.10840702       3.00172830       1.37757111       2.30757999       1.12447321      0.517039597      0.994125247       1.54218698       1.97563839       1.44542062       2.54119015       1.91197157       1.28811777       1.44050038      0.595928609       1.51159680       1.47094977       1.43309462      0.853097856       1.19117236       1.72269821       1.62745965       3.18974900      0.865836501       1.63628829       1.86170387      0.716819644      0.680393517      0.963892221       1.81372941       1.10105419      0.724348068       1.12896800      0.822747767      0.661328793       1.65163994       1.75765860       1.96433437       1.00100601       1.64600122       1.69317102      0.861969352       1.12742662       1.71281135       1.25111175      0.908198535      0.771136999      0.555922806      0.558125019       1.40631020      0.222076222      0.986307144       2.52571630      0.483658165       1.37402153       1.80378079      0.619799912      0.674467742       1.02002668       1.78406024       1.57765472       1.22062230      0.970031798       1.91941679       1.44591486       5.86667731E-02  0.241911620      0.775977075      0.453533411      0.830102205       2.31912279       1.04414225      0.645775557       1.23832655       2.09966969       1.39510930       2.32819152       1.39558411       2.30444717       2.08890772      0.617177963       1.28197503      0.451539487      0.981804669      0.801110983      0.863848627      0.741190970      0.615622938       1.49342334       1.42445064       1.04383814      0.953036010      0.109583415       1.81371796      0.837836564      0.820858359       1.62372482       1.68115997       1.79784489      0.795183361      0.823172629       1.36205113       2.39353919      0.736247241      0.402729303       1.19187510       2.45231771      0.964874327       2.03683138      0.286330968      0.845228434       1.40540719       1.44257081       1.79593372       1.12969887       1.81737244       1.27909911       1.05429852      0.764984190      0.544122994       1.18141210      0.985169649       1.97169256       1.29102361       1.27651310       2.70862913       3.37229395       2.68330264       1.33461475       2.70345998       1.49584913       1.51496923      0.838322878       1.26279402      0.917796612       1.13558674      0.975628436      0.309455663       1.61084414      0.769694328       2.17982483       2.28883553      0.776966095       1.71800554       1.49693656       1.66313362       1.63780177      0.270769060      0.309142143       1.46180272       1.92014420       2.04320097       1.72314739       2.08032513      0.758783758       1.69541442       1.58656573      0.831853688       3.03027940      0.813460648      0.539903224      0.314357311      0.593139410       2.16089892       1.64152098       1.40716851       1.10464287      0.985054255      0.570369780       1.53073287       1.49205518       2.91096187       2.00265312      0.813340902       2.08721519       1.05170810       1.34726012       1.78279895E-02  0.520367205      0.346805513       2.07591486      0.885466516       2.09001327      0.810113430      0.274474084      0.522801280      0.574118316      0.363597780      0.877373874       1.16735041       1.12973630      0.936688721      0.339581430      0.974982202      0.933623970      0.572546482      0.120085455      0.435833365       1.24878442       1.03861833       1.40912950      0.262621135       1.86258924       1.59190750       1.34874129       1.70999980       1.59435618       1.47572792       1.01144385       1.59463561      0.543653488       1.18079460       2.02669120       1.89642417       1.74203455       1.22064233       1.67736793       1.06727064       1.64938092       1.12613463       1.99104595      0.794522285      0.799902916      0.961685479      0.855788291      0.350356907       1.32055128       2.04780459      0.141498357      0.859548211       1.85991883       1.38443398      0.393913358       1.44352508       1.37473023       1.61223531      0.589006305      0.814411640       2.92716503       1.52594543      0.874048233      0.961001873       1.10794938       1.76109600      0.775807738       1.24261963       2.24629593       1.76375365      0.860967636      0.773878276      0.879738092      0.843408525      0.676777422      0.290267646      0.798115849       1.10997736       1.37829328       1.49160624       1.83442509       1.61581063      0.985314012       1.55136585       1.09832549      0.536846757       1.25547588       1.05978608      0.656476259       1.31293631      0.528605342      0.592367589       1.53421664       2.16093540       1.13612783       1.38340878       1.16346574       1.25970590       1.16158390       1.59720898       2.38414693      0.350112259      0.917184174       1.89625442      0.238619730       1.05553555       1.61579287      0.453447580       1.75981832       2.25866151      0.757569730      0.264056385       1.36034501       1.54206467       2.31671023      0.913715482       2.15656352      0.190070555       1.86296475      0.932775855       1.09228218       2.10823750      0.673646450      0.552909791      0.853059649       1.89800394       2.01666665      0.327129632       1.06627011       1.24973595      0.866905332       1.90395594      0.617066026      0.513623297       1.29752278      0.937718928       1.48107398       1.54659319       1.29243386       1.31648099      0.704809248       1.44053638       1.97368002      0.335244715       1.23868763      0.644182146       1.51020956       1.33712888      0.989301622      0.914359391      0.393725783       1.33309901       1.37792468       1.15687621       1.45180261      0.781839788       1.50351048       1.02134645      0.347685724       1.69223464      0.493935376       1.52028954       1.81002343       1.77653170       1.42128015       1.62750912       1.19749057      0.260981768      0.464074671       2.25641418       1.42050123       1.37830782      0.507899880      0.863254547      0.363499492      0.212030485      0.786184549      0.919542670       1.56504071       2.40162015       1.69672966      0.885438919       2.27376461       1.43072307      0.376601160       3.34466124       1.20470929       1.63576663      0.393116832      0.261491954       1.07881451       1.73926580       1.47271252      0.846392989       1.56855500      0.834748983       1.30075598       1.44306660      0.913931787       1.40195525      0.529335380       1.14926958      0.394698739      0.675894082      0.877138615      0.231499329      0.875621796      0.851105392       2.19314480      0.541176081       1.28582382      0.972184956      0.160406709       1.64016950       1.86493015       2.64147925       2.44872427       2.09366822       1.29620922      0.711279511       1.60900009       1.02541554       1.09026003       1.20561635      0.717689753      0.449850589       1.29000223       1.02016461      0.846755624       1.11937487      0.648053288       2.08159184      0.913926363      0.773175657      0.578144848       1.22760630      0.598211408       2.82438874      0.906005800       1.13763630       2.85099792       1.45514107       1.75789189       1.43402338       1.42566037      0.777968228       1.46003187       1.74993002      0.859491765       1.04636526       1.42787993      0.509307563       1.35530734       1.74265265      0.504609883       2.88992524       1.02992201       2.65841055       1.18292320       1.22204125      0.164812237       1.41953361       1.38360059       1.37284291       1.60400391      0.737442672       2.53494954       1.71655202       4.34622955      0.385228157      0.725211620       1.32272828       2.19751096       1.01886904       1.42557585      0.790913522       1.66079307       1.48276150       1.47460413       1.72267544       2.17364144      0.894531190      0.764962256       1.37763369       1.10424495      0.438026935       1.68869984      0.184070364       1.55612731       1.68417954       1.11726761      0.963120878       1.06415439      0.450265497       1.19724405       1.12769651       2.74561453      0.296465486      0.913122714       2.55859566       1.39722288      0.950852752      0.705917954      0.426786453       1.65068936       1.66994560       1.44457400       1.69439149      0.925622404       1.19882953       1.28998566      0.602418959      0.142955497      0.433575839      0.324985117      0.484505266       1.13527870       1.42955482      0.632443070       1.73896277      0.803810358       1.46561646      0.262611985       1.77943194       1.30491114      0.738186121      0.240642473       2.37668204       1.13951826      0.946797252       1.58368683      0.833669960       2.01960731       1.90039754      0.809558094       1.88360620      0.746775031      0.212209240      0.612272561       2.29727411      0.544468820      0.927466214      0.124095537       1.29092383      0.590830147      0.586451232       2.23399138      0.464409858       1.84782362      0.385842353      0.319905937      0.391295075       1.79098094      0.530361772       1.34026551      0.834051073       1.27943492       1.45736277      0.892990530       1.15507233       1.60326028       1.09653354       1.17957473       2.36775756       1.55542314       2.12309670       1.75820661      0.829801202       2.10702109      0.300306439       2.12287712       2.49155283       1.54387665       2.19386220       1.56228042       1.37270200      0.692972720       2.06485558       1.34164286      0.985829592       1.05799091       1.65822554      0.124260478       1.33879256      0.713832855      0.547155738      0.490711570      0.247680917       1.22425568       2.91872025       1.25127959       1.39493263       1.18327749       1.06630778       2.32984400       1.25772369       1.61403716       1.49108052      0.753376007      0.284533054      0.835348427      0.446165442       1.42601562      0.824534953       2.82565045      0.570210397      0.714140058       1.07992220       2.84207153       1.62395680       1.13751721      0.869684875       1.33233118       1.88980043      0.439680785       2.38340807       1.09452748       1.26639831       1.77285194       1.45745027      0.482982337      0.236467689      0.843015254       1.14605033       1.61854172       1.65104127      0.709398091       1.30523789       2.19759512       1.08981562       1.18281949      0.794151902       1.39479613       3.58916593       1.52984071       1.92967355       2.17034197      0.328500479      0.990819275      0.423020184       1.11961353      0.953520417       1.89350677       1.81147790       2.70191979      0.358512521       2.38604426       1.88239455      0.575795650       1.25801611       1.70263243       1.15429294       1.47704697      0.707461119      0.604601204      0.455325246       1.52217627       1.68277097       1.89247167       2.41183496      0.578697085       1.86326087      0.674430013       1.71362674      0.622557938      0.298307300      0.864247322       1.03608704      0.350962788       2.04515648       1.93075562       1.88995039      0.727705956      0.468792558      0.965988100       1.27396476      0.925426364      0.731395841       1.08863533      0.940901577       2.10904479       1.73141634       1.20114470       1.39060926       1.34792531      0.561288059       1.00530505       1.65133119       2.24964809       1.58094621       1.35799062      0.651275396      0.157786444       2.34193420       2.30729198      0.446808368       1.10512114       2.31315327      0.264925718       1.81634176       1.96222377      0.980383158       1.45341825       1.22671854       1.62414670       1.64061010      0.776200652       3.00230169      0.467296332       1.32268679      0.819888055      0.166285053      0.388917953      0.926543236       1.76789820       1.77088046       1.59232712       1.65962470       1.73910320       1.89218724       1.04836917      0.899653375      0.868273199       3.08574986       1.54678988      0.297934026      0.981469333      0.231178328      0.389601290      0.162359163      0.522625864       3.15293908       1.40533805      0.392282814       1.44775581       1.23526073      0.814974666       2.22663879       1.19602621      0.895430923      0.805926204      0.672545016       1.12453485       1.39005160       1.20401192       1.27729893      0.271922678      0.543164134       2.01746511       1.71141684       1.87497282       1.58946323       1.36815155      0.609443724       3.42960119       1.94282925       1.80931318       1.27901089      0.697305560       1.70498121       1.01315844      0.412575692      0.834244430       1.36053348      0.851688743      0.691525161       1.22625661       2.71992898      0.792080820       1.33602107      0.672957242      0.691433072       1.28576434      0.635779917      0.407730371       1.45843971      0.313141376      0.366897255       1.67698276       3.83042622       2.18756366      0.181275100       1.19651473      0.643720090      0.213171810       1.23738241       1.11885262       2.07425761       2.18388677      0.295338094       2.05990505      0.921673477       1.85100114       1.60810423       1.48530376      0.440986097       1.43550158       1.67708492      0.430952072       1.92129683       2.39771914      0.675141394       1.38726044      0.930210650       1.89693367       1.38547313       1.56211567      0.834404409      0.849620104       1.30732226      0.996250510       1.38986778       1.92595124       2.19786334      0.912883341       1.01580000       3.48496199       1.53776920      0.211684346      0.663540184       1.76926708       2.03984284       1.23666632      0.376344204       2.09063411       1.12610674       2.85765290       1.78201127       2.18337321      0.911509037      0.543429554       1.90012062      0.614503384      0.585213602      0.408770233       2.23915029      0.547608674       1.15774000      0.402980447       2.29935217       1.70491874      0.428413123       1.97979558      0.626720250       1.92620409       2.04323363      0.694776654      0.558745503      0.138691410       1.30000138       1.82635427       1.14915502       1.23940861       2.44606400      0.771041155      0.976153016      0.530194342       1.18387222       1.35676682      0.744658113       1.49518979      0.798919976       1.14020050       1.21484065       1.38283324       1.10363245       2.91781378       1.01266444      0.831149220      0.684305072      0.532010257       1.62620080       1.32539225       2.13217115      0.827348948      0.766172230      0.729200840       1.21223199       1.07274973       1.37264276      0.997420073       1.65594494      0.814389467      0.623890519       1.57074034       2.05258822       2.82005024      0.437654465       1.82731915      0.861945927      0.779112220       1.86060596      0.570699096      0.571606100       1.64750695      0.519676745       1.34394825       1.06178308       1.65566468       1.35010517       1.23957574       1.52317083      0.883641899       1.52771676       1.57790840       1.63354790       1.17415762       1.17917848       1.88608921      0.366469920      0.463161528      0.778617144       1.07442248       1.98376453       1.23964882       1.22043014       1.88477635      0.927350938       1.12274921      0.891407967      0.697322249       1.58268678       2.54849744       1.84875464      0.743125439      0.505928159       1.41635120       2.11191607      0.568159103      0.645741105       1.10831916      0.560188591       1.54571080       2.14326954       1.69055533      0.762275398       2.65110373      0.855927110      0.869714320       1.56122959      0.615908206      0.947688162       1.28162754      0.941352248       2.16124868       1.05543351      0.796691835       1.46019387      0.427645326       2.17515373       1.20446599       2.51438475       1.74317729      0.172772363       1.28208482      0.552022755       1.41257429       1.68692660      0.979583204       1.83230007      0.748821378       1.13607013       2.23697805       1.60129738      0.874180317      0.456949681       1.59785593      0.612598002       2.47627282       2.60211205       1.42308056       1.85992777      0.964522123       1.39508939       2.25905561       1.05683672       2.33785319       2.67654681       3.14881182       1.42319918       1.54622674       1.25529540       1.47766078      0.530474782       1.80337191      0.997417331      0.563324034      0.674813628       1.84964812       1.19148982      0.727666676       1.64654756      0.560603380       1.97525382       1.46984494       1.86341321      0.797825217       2.67417502      0.801182330       1.76190388      0.120010443       1.45361757       1.78711271       1.42118657       1.42014134       1.71305943       1.03961694       1.35788000       1.63784921       2.60634780      0.537006497       1.77322531       1.01831567       2.03704381       1.08530509      0.825196683       2.56766772       2.41416359       2.34980059      0.574634612       2.23706985       1.96114564       1.40671897       1.93346095      0.503945887       1.54197383      0.650481224      0.522997558      0.502400279      0.282107264       1.36107993       1.35534906       1.43888390       1.61511803      0.797290564       1.92803967       1.58801150      0.725471318      0.688303113      0.499755323       2.60876560      0.374827892       1.05485785       1.10209024       1.64515781       1.03778827       1.60307801       1.16714537       1.81913292       1.35383701      0.326323539      0.529647887       1.08312905       1.64050865      0.327749193       1.87882733      0.814255118      0.467926532       2.48409367      0.935546756       1.77760041       5.44586144E-02   1.01489627      0.605230272      0.791953504       1.15200496       1.57673955      0.696410596       1.10339689       2.55419183       1.45263278      0.267744184       1.19145691      0.737897694       2.19743824      0.828897238      0.975115359      0.302746475      0.851255596      0.728484809       1.36975348       1.07982624       1.36779809      0.303058594       1.04059553       1.99027598       1.76490152      0.882387698       2.69084787       1.24318755       1.17154813       1.38154650       1.20687473       2.07494617       2.80486917      0.915099978       1.09069479       1.39644229       1.13318181       1.21294045      0.755160689      0.435467362      0.876312077      0.429351509      0.816572130       2.96609116       1.10569119      0.996680558       1.95795333       1.37479413       1.78500295       2.07318592       1.37913597       2.46172166       1.10015357      0.988864958      0.522095919       1.18936396       1.85132647       1.20277035       1.30188239       3.80485559       1.65002906       1.45319259      0.273182124       1.20546043       1.34304273       2.47206354       1.08288264      0.676534355       1.04211390       1.19780838       1.78609562       1.20202792       1.66081786      0.156835079       1.15373576       1.79073453       2.09722900       1.83796930      0.393953264      0.827356040      0.938263178       1.14328372      0.853758156       1.55665660       1.19927502       1.10215127      0.138282940       1.38427103       1.25009203       1.23456061       1.54521072      0.528945625      0.534101546      0.507206202       1.74690020      0.538900971       2.01472044       1.07015812       1.37811351       2.14782405       1.45212388      0.466676295      0.521875560       1.94164956       7.09202290E-02  0.281009287       1.56539118      0.842797816      0.495942622      0.361503720       1.51801109       2.18405366      0.861562431       3.01263189       2.84267306       1.81518245      0.840098143       1.36817932      0.760508180      0.859212518       1.23802650       1.96366644       1.56975985      0.561470449      0.767875910      0.670686305      0.408446580       2.37844849       1.35252202       1.36023045      0.864932537      0.947403967      0.763131380      0.871224940      0.468290538       1.85697579      0.417328775       1.34494174       2.67166352       2.15477228      0.892903686       1.35794902      0.886599720      0.706322193      0.592741668      0.428421348      0.856862247       1.79373670      0.745968819      0.975667775      0.628032446      0.887471139      0.499614805      0.704528749       2.14392781      0.385326803       1.24403024      0.957346916       1.43924725       1.34118974       1.09653413      0.975232363      0.297223210       1.72021651      0.882502854       1.11944735       2.36941600      0.982770145      0.672661364       2.05820680       2.76191902       1.07750928       1.12304974      0.865752876      0.678888202       1.96428680       1.62962162       1.95687485       1.41256368      0.842457831       1.06523883       1.82346904       1.21695232      0.730641544       1.66210914      0.414167255       1.49309027      0.873467088      0.690617740      0.842173576      0.565334976       1.01938057       1.51461923       1.33138549       1.24295592      0.719139338       1.29134858       1.72489464       1.27535164      0.952546418       1.22329295      0.744474471      0.811272919       2.14843988       2.70691919       3.13888788      0.733698845       1.42111135       1.29097259      0.666557968      0.979669452       1.59133661       1.46534240       1.02223825       1.19618714      0.100938685      0.868558586      0.319742918       1.68273926       2.17320132       1.23796058      0.786796689       1.33227932       1.42683148       1.57793891       1.41698682       1.58044577      0.162324190      0.800039113      0.696117342       1.29918253       1.42499483       1.74008596       1.22675276       1.35848272      0.947243690       1.77154040      0.973541141       2.30683756      0.848799825       3.33850026      0.650712311       1.28583789       1.17713523      0.666957676      0.677634776       2.04534197       1.26403320       1.95757806      0.464055926       1.35183942      0.894343615       2.69528270       1.38374221       1.94577050       1.14588130       1.12247968      0.625855565       1.16695189      0.908150077       1.16319549       1.31291842      0.798847616       1.26176858       1.11747730       2.32773471      0.769606113      0.477773815       1.22455895       1.36338162       1.72560394       2.03825378      0.450809628       1.10983670       1.26081598       3.11353350       2.33144355       2.26901078      0.670075893       1.31753623       2.27939296       1.62274885       1.08583629       1.03832686      0.559542894       1.65354598       1.50916529       1.88725269       1.61636090       1.00468493       1.11991107       1.85478199       1.71252275       1.91542292       1.20232320      0.468024880       1.37291598       1.65948415      0.712162793       1.66588664       1.25539553       1.26765513       2.68658352       1.59230578      0.291856080       2.24706411       2.30173755      0.644310594      0.547216833       1.00357008      0.731020749      0.269359231       1.06747937      0.351621151      0.342206150      0.124843076       1.46295476       1.73140836       1.44735050      0.419227123       1.65809715       1.95065331      0.872950613       1.98433983       1.26730847       1.79965746       1.61794770       1.06467366      0.455929279       1.26038826      0.695616841      0.682344556      0.914800763      0.954753458       1.66069567       1.16446006       2.52553058       1.37673807       1.30302858       1.46701276      0.107668109      0.381035805       1.40051115       1.55048048      0.957064986       1.06034052      0.279787540      0.824216127      0.264914781       2.51291156       1.18003309       1.77278745      0.233264089       1.43887568       9.20220241E-02  0.940364063       1.54395938       1.97064996       1.01952755      0.151218042       1.10497248       1.75767756      0.403124958       1.50808918       1.01926768       1.11796796      0.655254066       1.62369311       1.61416268       1.06688488       2.66373491       2.66539502      0.483737677       1.11999393       1.12014818      0.827215314       2.19891071      0.856817544       1.33908141      0.666906953      0.537125349       1.34499216      0.795651495      0.923749804       1.24647784      0.642139733      0.600593150      0.495863229      0.350338072      0.793154061       1.82638335       1.72669888       1.30742621       1.98718679      0.874131262      0.175288484       1.86608386       1.02617598       1.30079174      0.425097615      0.845530510       1.25086856      0.722673178       1.58651519       1.79523611      0.813737273       1.43569124       1.59045970       1.34270966       1.87792599       1.68743527       1.68208849       2.29612851      0.802838683      0.845137417       1.13452077       2.73702145       1.07841909       2.25014830      0.622551203       2.33788919       2.34694171       1.99139869      0.696016014      0.987245739       1.40831935      0.929638565       1.01597846       1.68758178      0.539776385       1.50203955       1.73787999      0.885536551       1.20919120       1.47428226       2.31571841       1.99844062       1.91255641       1.66496313       1.22855783      0.492406189       1.15830219       1.35658967       1.14113879      0.577065051      0.969831467      0.716494799      0.956547856       1.94843304       2.39342880       1.74104500       1.33903134      0.966390312       1.57415009       1.86395240      0.916791499      0.410952181       1.00237298       1.53263605       1.09541523       1.69523442       1.09352684      0.419524491      0.968116820      0.591549158       1.99821103      0.829430163      0.391577184       1.65499222       1.05097580       1.98028386      0.481609195      0.785813570      0.735703886      0.586241782      0.160425514       1.26664829      0.969990909       1.13492560      0.972135723      0.761485815      0.829219937      0.642493069       1.96781969       2.04023600       1.22729552       3.22174025       1.68308532      0.319973588      0.444774151       2.22900319       2.10046983      0.821961761       1.10644698       3.31303887E-02   1.36691880      0.824820817       1.34496927       2.22139645       1.60471177      0.621522367      0.184865385      0.813440561      0.965956688      0.395251334      0.446026862      0.621491671       1.22767520       2.23488593      0.550397754       1.61998427      0.772543013       1.94840586       1.29694378       1.22408354       1.65383089       1.38174081       1.33617651       1.87395573      0.678816438       1.89452469       1.43283772      0.465050101      0.574170828       1.38607645       2.21874475      0.717108071       1.21355402       2.19678330      0.704367936       1.79085839      0.501286626      0.736229181       1.32435703       1.38371217      0.989075780       1.60732782       1.51677310      0.898638070       1.96891761       1.09312749      0.667554498       1.01240242      0.899525344       1.12592912       1.52501643       2.41164517       2.74667740      0.732952416      0.525450647       2.09371352      0.308416933      0.942637563      0.792391956       1.11609006      0.793388844      0.546504855       2.05338097      0.899265766      0.767506242       1.55955410       1.43786037       1.36651957       2.04920745       1.64826643       1.32100821       2.20926261       1.74173820       1.04521799       1.66829109       1.39574361      0.842612624       1.63942146      0.529234231       1.65719509      0.878035009       1.65638149       1.58146906      0.791965365       1.14716041       1.67653477       1.03690720      0.609595895      0.503219664       1.58982968       2.32058215      0.862259328      0.959250271       1.78628182       1.36741805       1.31486130       1.23954785       1.54718602       1.46952641      0.979401886      0.797295392       1.68363619       1.11712337      0.643849611      0.869453728      0.914812088      0.415432006      0.555721521       6.95075765E-02   1.09654772       1.65626419       1.70117891       1.58132517       1.32724631       2.22392273       2.08904648       1.75847137      0.295558751       1.90336978       4.30515814       1.65302575      0.947917163      0.715679705      0.974979818      0.443337232       1.02914190      0.299875736       1.10016561       1.02466559      0.614048839       6.20136373E-02  0.883119524       1.76694977      0.765172064      0.958671749      0.686260939      0.568540931       1.16582847       1.44919086       2.64086127       2.92127514       9.52966213E-02  0.808991909       1.79364800       1.66243792       1.80216813       1.97660792       1.12298298       1.45899308       1.59957135       1.11402011       1.84903204      0.575224400      0.725741029      0.766198397      0.788085341       2.12263441      0.626657903       1.50045860       2.25703120       1.82530010       1.98142612       1.55794132      0.995584786       2.28809071       1.39295602       2.76390791       1.46078408      0.556389272       1.78158271      0.449112535      0.741691411       1.56094408       1.71378529       1.06571710      0.871439099       1.12663579       1.74115098       1.24259770       1.06548536       2.05977392       1.32580471       1.54076004      0.498649180       2.57070875       1.47480381       1.76041961      0.260704935       1.44607067      0.807631195      0.640218139       1.31629789       2.41790605      0.604597628       1.00935805       2.36187530       1.79555678       1.35664845       2.18025541       1.21614230       2.21102023      0.765258133       1.01149893       1.67029834      0.996156275       8.60475898E-02  0.904849529       2.68204451       1.21663213      0.535618007       1.71909273      0.766041577       1.33254814       1.66408396       2.76936817      0.436179608       1.36876976       2.16528201       2.46455336       1.69230092       1.47851717      0.923054278       2.08410883       1.30586708      0.682077944       1.66939092      0.760196805      0.405417502      0.671072721       1.80718029       1.01041436      0.695951760       1.49201787       1.04235697      0.682889283       1.16790950      0.680561125       1.27295077      0.893568277       1.09643269      0.541226149      0.853043437      0.643227935       1.58133721       2.41697288      0.990935504       1.12736952      0.696344733       1.04124510      0.519790530      0.877491951      0.754384518      0.589197755       2.29502368       1.50037670       2.28821564       2.04021311       1.02523708       1.39828897       2.16417575      0.924805403       1.53929722      0.805003762       1.70721924      0.852185845       1.14734471       1.63415694      0.542621553       1.85813236      0.984764874      0.169792280      0.320705533      0.183216095      0.824479997       1.27357554      0.294275105      0.564728737       1.32369792      0.434012592       1.35109329       5.63569888E-02  0.513783395      0.895569265      0.695934176       1.29321015      0.947518945      0.754249752      0.809298754       2.37744927       1.61684620      0.750430286       2.49445963      0.621436656      0.652199626       1.77902329       1.19424438       2.25528646       2.03893781       2.30807519       1.17680454       1.80743957       1.25581264       2.79429603       1.25262094      0.995281041      0.731828809       1.03114617       1.24617207       1.71395791      0.770460188       6.09637760E-02   2.74577665      0.623688996       1.12402272       1.75626385      0.923890769      0.521013081      0.427848548       1.98743057      0.801516593       1.29874516      0.280416042       1.11756992       1.70843911       1.24497700      0.415723145       1.76492929       1.61972678      0.774618924       1.64389086      0.450345039       2.19262075      0.310916871       1.20891452      0.555084050      0.558225930       1.43902314       1.99031997       1.82524335      0.986067832       1.48460424      0.720661342       1.10306287       2.85640264      0.468699008       1.21400881       2.45836306      0.625029385       2.00673914       1.47931635       2.22634196      0.772635758       1.00190306       1.56328893      0.704067707      0.752039313      0.984404981       1.17613125       1.28131342      0.118762925      0.381233394      0.516469002      0.701256275      0.894200504      0.513541996       1.08778095       1.43264723       1.02186751       1.36001348       2.04669809      0.402242750      0.964837670       1.01729929       1.06878293      0.481373727       2.22301364       1.51327360       1.24170947      0.816614807       1.82754898       1.31076133      0.590990603       1.56285691       1.55503273      0.157798305       1.16172183      0.892448604       1.19080973       2.27052712       2.34673810       2.00749159       3.49375725      0.469960630       1.12051022       1.66774166       1.22704864       2.18866420       1.25851154       1.06805861       1.23297095      0.557038188       1.58016586      0.882460952       1.12706947      0.814849794      0.777855933       1.51037478       1.28146982      0.904205263       1.58319962       1.20565462      0.892401755      0.274210811       2.29351687       1.60631764      0.826920807       1.18963635      0.857836187       1.47287571      0.491321236      0.773281336       2.07107663       1.59173608      0.144679919      0.743725657       1.37780952      0.192489803      0.728522599      0.719600201       1.68950701      0.820540011       1.04516685       1.56386554       1.91523409       1.17306316       1.24336469       1.74930847      0.421243995      0.709464014       1.27720225       1.22712862       1.19280565       2.52599716       1.26720810       1.32750475       1.39774919      0.957149446      0.772373736       1.09683430       2.28660440       1.16515136       1.18261385       1.60749412       1.73773563       1.40612495      0.320143521       2.28307176       2.62063718       1.33934379      0.621300519      0.631308377       1.45627236      0.995946169      0.872794867       1.90168929       1.52227056       1.71404958       1.54324424      0.860534728       1.35560787      0.632438481       2.31042123       1.17918921      0.396697193       1.18941486      0.886804223       1.03706157       1.63878572       1.15661693      0.803262830       1.69307768      0.482454300       2.55212069       2.08770800       1.34827125      0.905187130      0.982984006       1.01956713       1.34209895       1.01573312       1.87296736       1.86286879      0.676104844       1.98601127       1.00669742       1.91277456       1.37445223      0.484701097       1.38668334      0.743749261       2.68048191       1.54011047       1.34991264       1.09416056      0.865087509       2.09517670       1.37637174       1.06145942       1.68244874       1.61693776       1.96235728       2.49102950       1.96410024       1.95807993       1.52375460       3.84412980      0.253663749       1.64383328       1.55961478       3.48753214       1.63321245       1.33346713      0.939564645       1.62964010       1.02464557       1.08881211       1.34716749       1.59239149       2.01720929       1.32295609      0.897805154      0.513576746       1.56163502      0.445654750      0.855139911       1.38230717       1.61133313       1.33918989      0.682173908      0.916495860       1.41407025      0.478033423       1.30032015      0.532423675      0.675798357       1.02073526       1.89996672      0.697442055      0.533934355      0.371796340      0.694697142       1.21532309       1.07994473       1.96473086       1.01940370       1.63742387      0.550500154       2.03434873       1.46066689       1.57396138      0.770420313       2.40690875      0.647340834       1.89101481       2.17519307       1.22433555      0.926793337      0.856299937      0.568366349       1.22016120       1.46804082       2.23302269      0.147448286      0.494991362       1.34888756       1.35809600       1.56301069      0.381408900      0.571246505       1.43537748       2.75453615      0.690311491      0.955931604       1.03319120       2.01827025       1.49500942       1.10258067       3.66193056       1.99291813       1.09460998       2.46401691       1.08863151      0.951659501      0.737612963       1.07156289       1.53969157       2.15363097       1.95966482       1.68265378       1.09563696      0.592930198      0.183741048       1.17221141       2.32264447      0.841384232       1.73160267       1.02579105       1.32423151      0.343024135       2.52361917       1.46977520      0.393242449       1.26412416      0.942759216       3.55006957       2.87040162       1.41665423       2.63492942       1.63294888       1.81537664       1.27784240      0.684055805      0.640404522       1.81758893      0.598808706       1.28592861       2.37716126      0.339161724      0.515513122      0.376859158       1.38969779       1.03467309       2.04586363       1.44220984      0.618315578       1.19179022       1.63525510       1.43489003      0.174821034      0.921877384      0.692143798       1.88062787       1.10121047       2.23036218      0.533134401       1.02487671       1.65205646      0.924021542       2.57642436       2.08956790       2.35231447       1.08587670       1.13038623       1.32773566       2.22290683      0.937594116       1.24475241       2.17273259      0.622733414      0.731368244       2.35291529      0.996582389       1.40335965       1.60933757       2.03402495       2.16798997       1.28413558      0.373028874       1.90547776       2.10460973       1.73334956       1.07900774      0.194344193       1.27687490       1.94264102       1.85230029      0.663709283      0.787096202       1.00226283       1.91851735       1.32469320       1.96440971       1.11395228      0.781203032       1.41737866       1.40187359      0.460580438      0.896275163      0.704849362       1.02965832      0.682554007      0.854796112      0.734762311      0.423800379       1.32860291      0.665527403       1.67063427       1.35470903       2.54428530       1.68109381      0.732709229       2.78675604       1.53461516      0.759896994       1.25453532       1.36460829      0.458193272       1.05720735      0.814545274       1.08002472      0.884843409       3.10972333       2.14893866       1.03855515       1.64538026       1.78962040      0.867037773       2.81611586       2.24815607       1.68759310      0.564308465       1.00778818      0.372963756       1.62308335      0.654641926       1.83696616       1.14322281      0.925494730      0.703227282       1.54153395      0.759718299      0.984812021       2.61526179      0.834218621      0.929918528      0.735047162      0.765036941       1.47671533       2.67054749       2.52047491      0.542381346       1.90454626       1.10119081      0.796791017      0.942625344      0.997259498       1.05083692       2.55281377       2.06967711       1.77636921       1.14892375       1.69375348      0.449451119      0.248915046       1.03332317      0.753224492       1.44502664       1.71572185      0.784192085      0.179618895      0.279308200       2.05474615       2.38116097       1.75938845      0.422664106       2.82264042       1.36715817       2.25794959       1.32453156       2.15098858       1.78828716       1.43526936      0.750982225      0.665180981       1.16845143      0.388839751       1.15202439       2.18696451       1.62957835       1.42277575       1.86902189       1.01055312       1.95901108       1.64651155      0.251965165       1.69335568       2.25535107       1.09938228      0.849753022      0.439728141      0.924504757      0.875396371      0.814548314       1.24269319      0.468838662       1.79659188       1.95392382      0.385012656      0.677639842      0.499877632       2.19090652      0.788442552       1.77823126       1.13671541      0.918320358       1.51285994      0.124777138      0.335671574      0.349508703      0.742744088       1.90646303       1.96258605      0.699195921       1.23332667       2.38250256      0.665606499       1.77745795       1.45951128       2.54732871       1.62645543       1.02259851       1.06128144      0.827112257      0.891379416       2.38420081      0.963959098       2.44525957       1.44495380       1.12221801      0.613044441       1.87718666       1.09674680      0.991619289       1.32750809      0.150340006      0.446830183       1.50484192      0.690789521       2.28294039       1.72288465      0.744423866       1.80964351      0.829468071       2.02887058       1.01093256       1.82711828       1.93603790      0.832042396      0.680241942       1.20378935       1.30636489      0.312524527       1.46259785      0.375249535       1.79553378       1.65811205      0.986853778      0.442219496      0.510684073       1.99554384      0.932170928      0.228901446      0.739776611       1.33193278       1.05680311       1.16332519       2.32131863      0.622246206      0.398977965       1.52804649      0.515659869      0.528601050       1.26630831      0.644053042      0.505474627      0.487102985       1.02530134      0.693194151       1.33741391       1.01723039      0.682223380       1.63488150       1.73270369      0.946202576      0.999108851       1.83735132       1.73460650      0.664495945      0.125062779       1.09340990      0.675160468       2.03609085      0.524366081       1.98430598       1.06211972       2.62388015       2.18837667      0.742385268      0.432989717      0.739633918       1.32750201      0.554790378       1.04689205       1.12209320       2.40802312      0.712895572       1.81436491      0.617693484       1.36791503       1.03969824      0.933872283       1.56115294      0.887218535       2.26546431       1.68701851       2.31207728      0.275336266       1.06779528      0.687117815      0.587788999       1.63186336      0.935947537      0.577234507      0.673296750       2.83224010       1.85665381       2.48925948      0.331128508       1.54245508       1.05916810       2.57045245       1.18016624       2.06809998      0.830235481       2.08582020       1.23100173       1.72127581      0.527866006       1.10265446       1.30336535      0.956792951       1.08479226       1.37232566      0.413354993      0.441428930       1.09244895      0.901383996      0.541920245      0.354706198       2.09378600       1.57729411       2.22662354       1.18842101      0.884081423       1.34029675       1.01358962       2.30842161       1.14438021       1.25150061       1.47045553       1.06469977       1.70754409      0.489256263       6.97504207E-02   1.27166438       1.38693058       1.54379725      0.587746799      0.270899862      0.939141750       1.91814840       1.47847760      0.515642822       1.21008325       1.37736344       1.45008409       2.19620919       1.41908741       2.51286292      0.673399568       1.51893950       1.92890000       2.39977670      0.606839597       1.22906148      0.696216643       1.15287733      0.894066691       1.88481987       2.33357787       1.07711816       1.64024127      0.232473522      0.508632898      0.952068388       2.63689208      0.824684739      0.671612501       2.34687257       1.58237517       1.98157561       1.31143439       1.94406378       2.04807687      0.255072594       1.82079482       1.76292837       1.84987247       1.09693229       1.10741365       1.57057595      0.122380584       2.37672138       1.70667338       1.49680030       1.38098967      0.709366262      0.848603964       1.38282585      0.691336632       1.75965309       1.15026414       1.41368854       1.02350998       1.10225797       1.38863933      0.529563606      0.344790071       1.68294442       1.92256379      0.965935349       1.37399054       1.30898046      0.722327888      0.137681991      0.935333610       2.07833982      0.848278880       1.93655765       1.22370386       1.57986307       1.60588551      0.875051796      0.652702451       1.12173736      0.335780144       1.59526289       1.51508749      0.447196037       1.05181468       2.15552187      0.956798255      0.994435489      0.662148714       2.11638141       1.26218843       1.11457908       1.46883893       1.37065721       1.49905789       1.41616189       1.56056917       1.50687349       2.79060626       1.22517574      0.271536678       1.76504946       2.29959440      0.452391595       1.66392434       1.55664289      0.765019774      0.472944498      0.556727111      0.975072265       1.99096835      0.187634185       1.15842712       1.73454595      0.879947364      0.725722969      0.552019894       1.85932672       1.65024936       1.34826481       1.94512355       1.32925761       1.44064569       1.18411899       6.53798282E-02   1.27100241       1.62077069      0.333981216       1.89074016       2.01949716       1.84880269      0.962812781       1.09339547      0.632285237       1.83993030      0.671944857       1.01878750      0.971970618       1.06098044       1.18701768       1.68168056       2.40025258       1.35735786      0.715651274       1.03111684      0.309386164       1.20728469       1.18743968       1.16105020       1.08163071       1.13825023       3.31525397      0.968913555       1.03502536      0.145102710      0.911264777       1.63095641       1.03669667       1.89003026       1.81448996      0.905605614      0.946449935       1.82608604      0.451062769      0.401001602       2.17783093       1.08368170       1.03916442       1.29359782       1.65834570      0.549450636       1.31258941       1.71184909       2.13177681      0.577380836       1.56989026      0.949772775      0.799631000       1.03448725      0.763065577       1.01519930       2.15742207       1.38112760       2.51355100       2.99805212       1.76632893      0.102327563       1.31499135       1.22636545       1.98908460       1.39384270       1.56510437      0.744390130      0.739994287       2.90069366       1.07147479      0.729166090       1.81492448       1.51541018       1.13017297       1.62915552      0.453032553       1.49219847       1.22492635      0.899608970      0.435588658       1.79318833       2.15329075      0.328106165      0.641867042       1.63990510      0.647198379       1.71004021       1.50159097      0.707241237       1.50927234      0.978634953      0.456653059       1.19803512       1.06342912      0.866020381      0.967202425       1.26012182       1.33988011       1.36428821       1.53093123       1.07272005      0.997474790       1.41261089       1.05637562       8.11641142E-02   5.89621924E-02   1.42128146       1.06443095      0.803762734      0.412637174       2.11355925       1.72460389       2.23642659       1.11776555       1.61384475      0.806479156       1.06337738       1.66029370       1.28843188       1.97423780      0.877270401       2.15315580      0.954087377      0.403082132       2.02262807      0.811726391      0.211677715      0.825946152       1.77155399      0.342426777      0.224906638       1.95468831       1.66572392       1.42647207      0.896845222       1.31066787      0.726591766       1.36047828       1.32924616      0.941302180      0.971673191      0.888415337       1.21450889      0.314525992       2.48940635       1.01515567       1.34541726       2.40262032       2.26104379       1.74477708      0.829616129      0.424394250      0.811632931      0.603919566       1.54590929      0.752885103       1.46614969       1.03472269      0.840639651       1.16653752      0.979357600      0.823995829      0.534270823      0.591114700       1.46919405      0.207071960      0.132323354      0.468695611       1.45507860       2.60127950       1.62718582       3.07039237       1.59169090      0.714768946      0.575125515      0.187653571      0.581995070       1.26984930       1.34484208      0.491116434       2.05696607       2.29004812       2.87461519      0.655724764       1.37612939       1.38165987       1.19865012      0.155838966       2.04146504       3.28210402      0.791551530      0.743089378       2.29324722      0.593160033      0.994378388       2.02287555       1.65671420       1.75437927      0.753511846       1.59783924      0.203342572       1.37494671       1.48931122      0.804338574       6.05036281E-02   1.23419416       2.47400665      0.675434887      0.798994303       1.77582812      0.499064863       1.34481323       1.45813489      0.807912707       2.35473824       1.36692536       1.93477058       1.21033370       1.38229072       2.10952878      0.829606414       2.13372684      0.813958287       1.73301077       1.58079433       1.72481930       2.00208092       1.17831016       1.17108715       1.70751941      0.573367178       1.18457603      0.695804656       2.24268079      0.826279461       1.96380234       1.31524253      0.669992387       1.27995646       1.57374513      0.649850309       1.10728502       1.24032962       1.46994138       1.42167616       1.34203970       2.24622369       1.39831352      0.847126722       1.49205482       1.79972303      0.956928611       1.59648955      0.156542405       1.76413345      0.262970716       1.64148867       1.00056374      0.891601503      0.447228134       1.45380569       2.43340540       1.05046296       2.36757445      0.896817029       1.51712012       1.10864627      0.913688719       1.30081105      0.914752066      0.979043663       2.56821251      0.972457230       1.16035867      0.657633960       1.94497848      0.560365438      0.900511742      0.845969081       1.84722364      0.791021645       1.33991325      0.906598926       1.17290437      0.584730804      0.591114759       1.36536264       1.02596843       1.33350110      0.897231042      0.430801630      0.980334878      0.952680290       1.97461963      0.252990752       1.03378499       1.57391977      0.518958271       2.96951342      0.807071805       1.16706467       1.12986112      0.432613283       1.83683717       2.72604275       1.21627283       1.35453796       1.59123898      0.920127332      0.719841778       1.06286764      0.754898489       1.75694656       2.16786051       1.37045407      0.728636444       1.06785750       1.08614945       1.83643508       1.71892369       2.04244637      0.803920925      0.716894031       1.52554858       2.22088766      0.983455062      0.559771001       1.51101506      0.959990621      0.901799381       1.28123093       1.22094762      0.827032328      0.849018872       1.65722942       1.51213610      0.610372782       5.96177988E-02   1.33852386       1.02520251       1.56953049      0.848088264      0.105127804      0.810639262       1.71487606       1.50850534      0.491869867       1.01327419      0.965061724       2.51394129      0.543562531       1.92477703      0.958003998       2.41706300       1.15947616      0.857249498       1.56701112      0.902082980      0.504158378       2.36053014      0.968304634       1.81481278       1.05658329      0.271369219       2.17738700      0.616427839       1.49282777       1.56340170       2.23862553       2.26299191       1.31381190       1.69862497      0.674519002       1.66152382       1.26703203       2.18809795      0.597804368       1.66357028       1.64761186       1.07515407       2.19961667      0.440053821       1.19203341       1.07939255       2.45037699      0.486431509       1.63835311       1.19004989      0.759523928       1.79638886      0.630856812       1.22632551      0.598117411       1.44332564       1.23342097       1.53516197      0.747239769       2.04047871      0.794175684       3.53653669       1.19715619       2.50814891      0.973963499      0.764111817      0.353668749      0.725801468       1.19614148      0.802320242      0.910493016       1.02978134      0.612989902      0.831093013       1.50000346       1.00560164       1.53311205      0.755345762       1.20068157       1.56807411      0.813344538       1.15161586       1.60994840       2.11235905       1.24888968       1.45187175       1.24208212       1.31895185      0.258853376       1.15359902       2.29272103      0.848148346      0.828824103      0.867699623       1.22137010       2.39012456      0.423677891       1.32467198      0.751498520      0.965641975       1.90353310      0.575409710       1.84239376      0.535507679      0.635340452       1.12551773       1.40719521       1.13710403       1.01289618       1.07708478       1.09959590      0.311551660       1.54825056       1.07476950      0.631790519       1.36441922       1.15116107       2.42696404       1.85718191      0.892598808       1.36920249       1.59221363       1.55604935      0.276416898      0.531158686      0.772148967      0.731451213      0.881132662       2.21000242      0.931228638       1.45750737      0.918991506      0.967733562       1.59830546      0.647614777       1.82443035       1.51047599      0.545274317      0.956025243      0.426056087       1.33705091       1.68081939       1.11402810       1.07838917       1.92022383      0.449535757      0.862705529       1.06555390       1.51741600       1.50743902       1.77213466       1.48676991      0.792507946       1.31994081       2.40125537      0.298986375      0.924656451      0.613563001       2.02777457      0.919847846      0.558363318       1.88367414      0.415156484       1.16239154       1.05070162      0.581384003       1.45998478      0.267257839       1.22165859       1.84688115       1.15920556       1.22707856       2.12072611       1.10709596      0.794554770       1.36589909      0.728473425       1.79174387      0.921648085       1.21343565      0.741130471      0.469978034      0.576858819      0.984188437       1.44719756       2.15527534      0.810207844       1.45404994       1.48783636      0.979028344       1.18317378       1.89299667       2.75589585       1.42975891      0.973035872       1.22831547      0.692344844       1.56813478      0.533788383      0.773470402      0.685180783       1.35440898       2.58675599       1.17388940       1.20281684      0.404953748       1.93407416      0.703700066      0.629518509      0.333829641       1.19843495       1.87868500       1.97755277       1.69410098       1.61340225       2.31919360       1.22065878       2.41668892       3.73935795       2.16190886      0.934061348      0.543130934       1.05707967      0.874879479       1.60049438       1.62461507       2.09218884       1.39068973      0.513048947       2.21194005      0.582271457      0.851833344       2.64925528       1.72718549      0.814053059       1.08682775      0.698367774      0.758870184       1.60229087       1.15521622       1.35860193       1.19098020      0.758851051       1.53953767       1.38803113      0.307542264      0.754547417      0.860756040       1.07217062      0.751846969       1.08342671       1.04123628       1.30293298      0.496048629       1.36293781      0.775972605       1.56445050       1.14232099       2.77932596       2.16222620       1.89712894      0.812471271       1.67564321      0.598289371       1.81970131       1.08169615       1.22738886       1.43370628      0.775643945       2.12138677      0.801379919      0.864061415      0.414809734      0.963916421      0.645848632      0.492860526      0.395403743       1.57329249       1.78820479      0.357659757       2.41440582      0.102177553      0.564011574       3.15616012       2.44523859       1.53103793       1.25885832       2.17441177       2.29637718       1.88493705      0.707365572       5.10180332E-02   1.45234156      0.386255205      0.959232450       1.95709085       1.05505931       1.01037824       2.25937867       1.23149252       1.34738171      0.598913610       1.41594207       1.11538625       2.05145574       1.07280219       1.42874289      0.195893168       1.37788868       1.45684409       1.23777354       3.10603213       6.19625784E-02   2.28846931      0.780617952       2.54855394       1.09900379      0.606679022      0.439708859       1.73304248       1.14823401       2.09833121       1.45058322      0.524183989       1.06330299      0.842935681      0.248537615       1.06159139      0.734523296       2.41509914       2.13657856      0.718899190      0.565188289      0.957813680       1.40141284      0.824288487      0.156601369       2.65131378      0.636062980       1.89432991       1.50829661      0.516153455       1.11745286       1.64815021       1.01807630      0.501228154      0.866647720      0.429452747       1.41227865       2.51881528       1.41351211       1.07867646       1.96282876       2.46249509      0.649876237      0.945293367      0.460717708       1.02247822       2.95219731       2.22769904       2.12037396      0.855326116       1.93180108       1.97893488       2.24577355       1.38030005      0.218453124      0.513669550       1.00900888       1.04311836       1.69895756      0.979396522       1.18728828       1.20555389       1.74879324      0.925059855       1.01612294       1.63233435      0.561125338      0.892949343       1.82713175       1.18420172      0.438439280      0.944194376      0.789136469      0.999791145       1.05209875      0.827335536       5.45188673E-02  0.807055295       2.49294686      0.124967158      0.871368289       2.40366411      0.453996539      0.354969144      0.859914422       1.64314651       1.71718657       1.98485744       1.36155379      0.341832906      0.803366363       1.45287728       1.74417794      0.239966944       1.97490180       1.21301341       2.28673840       1.73316801       7.86596686E-02   1.95867014      0.995423257      0.996023595      0.573689222       1.45727253       1.26727903      0.698686421       1.64121449       2.41358042       2.13634777       1.16417706       1.81830907      0.852527142       1.69030190       2.10427713       1.27379584       1.98841286      0.912583947       1.51826310      0.607580304       2.64496732       1.22124791       1.26464021       1.57861280       1.50271153       1.27494526       2.41287732       1.21018565       1.23245382       1.79783762       1.35392392       1.80404198       1.09756100      0.789612591      0.907837391      0.150108874      0.175247386       1.58830404       1.87765336      0.418632984       3.46412635       1.07182407      0.940363586       1.24873173       1.66096318      0.724127412      0.895201862       1.10162485      0.766929924       3.05778599       1.35964954       2.09185600      0.359157711       1.32331228       1.76542258       1.39535320       2.81150222       1.84080374      0.578083754       1.90339732       3.05154777       1.13852227      0.347604692      0.810773790       1.92720938       1.19586837      0.512523592      0.572670937      0.442540884       1.04897428      0.397442877       2.22683191      0.538442254       2.15369630      0.695549488      0.139700145       2.81228423       2.23942995       1.86342263      0.720483124       1.47305512       1.90870047       2.31596780      0.395874619      0.881633580      0.840649724      0.900621951       1.44544816       1.23330605       1.25893617       1.53724539      0.642597854       1.47024095       1.27829421       2.03650737       1.50785625      0.225379929       1.33137691       1.53360212      0.767391980       1.37642467      0.503389835      0.772999465       1.02570593      0.835054278      0.950148344       1.29693246       1.00072467       2.01209641      0.779702544       1.17842245      0.749144912       1.07590580      0.429274946      0.439632863      0.745477200       2.09320641       1.52831137      0.384017229      0.726940870       1.35244918      0.741906822       1.03602171      0.569858730       1.50476027       1.37098086       1.83382380      0.475242734      0.632309854       2.93606305       1.91384208       1.82685935       1.52799284       1.40541017      0.880857229      0.734405220      0.227496132      0.563008249      0.843342304      0.934797883       2.61028409       1.16738987       1.42420161      0.480158091       1.67219067      0.125765979       1.83954155      0.948884130      0.663404047      0.384122133       1.18054783       1.18421447       1.06425667       1.25846744      0.890900731       1.24541175       1.12942815       1.49261475      0.736218333      0.998395383       1.21728814      0.500848889      0.323720872       1.90879929       1.76117456       1.95802295       1.92767215       1.23868203      0.429570675       1.59723270      0.992965281      0.861069441       1.33492112       2.14018202       1.77064836       1.53811598      0.980628371       1.41531110      0.816893756       1.06450605      0.260732591       2.54795504       2.51359439      0.656246603       2.14850831       1.02274668      0.918926120       2.81854177      0.591927648       1.16978824      0.545203030       1.75503469       1.93878412       1.49711907      0.847509384      0.726932168       1.34768116       1.35323977       1.46500599       1.11605096       2.36938214       2.29185653       2.22096729       1.72582114      0.620136857       1.12899768      0.450557977       1.64524662       1.15148175      0.936238348       1.25596881      0.620426297       1.64516389      0.728600442       1.24358273       1.66412961      0.916274965      0.450000256       1.44644940      0.487279296       1.51885200       1.15095484       1.16223586      0.541926503      0.648887098       1.13025212      0.529348731      0.403860986      0.461577356      0.817791700      0.719393194       2.96672916       1.02426195       1.26000214       1.87662160       1.08610702       1.89849496      0.920782268       1.78852713       2.14702082       1.77876282       2.09324360       2.27316117       1.67046547       1.68144381       1.74597514       1.19305480       2.26398969       1.01591003       1.28178549       1.62386823      0.345313132       1.19689667      0.848431110       1.43476593       1.10089803      0.898956478       1.30257332      0.817620516       1.51814151      0.322933435      0.485540181      0.708192468      0.971879601      0.982888937       1.87321579      0.808142960       1.13461685      0.994701862      0.407314926       1.02299273       1.32657075       1.62876904      0.800368726      0.778131545       1.91654265      0.407441288      0.745642185       1.88445473       2.01585388      0.910440266       1.56784129      0.348583817       1.50759232      0.766511858      0.697492719       1.54927576       2.00552988       2.05803466      0.307004601       1.39166975       2.13080645       2.25155592      0.624459386      0.905440569       1.40672457      0.531720161       1.10698044       1.08683991       1.17117441       1.35224223      0.496241152       1.49053204       1.21442795       1.23468125       1.61795163       1.50531626       1.27119088       1.60277808      0.556512058       1.12551844      0.799793482       1.16399789      0.793284595      0.686929703      0.683370173      0.338346660       1.42599165       1.66471314      0.504721224      0.590693176       1.11489856       1.60199988       1.20330834      0.686544955       1.21157753       2.18445516      0.374666452       1.77965939       2.12010050       2.84455490       1.12894130       1.60332668      0.505519927      0.548203707       1.52059901       1.21215749      0.103319988      0.559168756       1.73401523      0.703831673       2.33091021      0.672292113       1.63570929       1.07596469       2.12106895      0.878321648       1.30377352       1.53440475      0.903216183       2.82031846       2.41159296      0.810472488      0.913371921      0.529194951       1.54281020      0.897084117       1.20731902      0.276934654       1.19399178      0.510520935       1.42474413      0.394443512       2.14088416       1.14583719      0.999317288       1.73417616       3.13595486       1.98020959      0.833052099       2.28824711       1.93070185      0.507042110      0.460372329       1.91860211      0.491022885       1.05686140       2.04734969       1.26784527       2.70027256       1.63590801       2.14792466      0.597640693       2.06457615      0.240401685      0.365788728       1.66230321      0.882896125       2.77515483      0.794230044       1.58971620      0.317132652       1.50414217      0.917190969      0.885716379      0.783140481      0.235871822       1.15048194      0.828602076       1.31523192       1.21129322       1.04198647       1.10314667      0.992882371      0.226415530       2.51722789       1.23060513       2.07453871      0.755291283      0.857566893       1.55001116      0.634404123       1.25545645      0.673922658      0.530086815       1.99102080      0.388811320       1.32040274       1.39122927       2.66518998      0.493860424      0.633155823       2.14684343       1.26947653       1.60263216      0.363175303       2.68125224      0.624326229       1.39692676       1.40135443       1.70403039      0.809833288       1.45667589       1.20887089       1.96998620       1.80327165       2.17571306       1.39430201      0.774666309      0.673397243       1.48335683      0.889045477       1.30350912      0.849408746      0.303270847      0.773671210      0.766499043       1.29098654       1.59164238       1.67128539       1.12941229       1.50082803      0.654749632      0.447140813      0.155525848       1.49438703       1.30281532      0.852451324       1.26988232       1.84283435       1.52963030       4.01306963      0.462800831      0.795729518      0.810721934      0.648016453       1.40229118      0.459807962      0.665567517       1.54402447      0.540387154       1.21038640       1.01980412       1.10195577       2.43026400       1.57077253      0.976577282      0.818432331       2.28171802       1.22511137       1.08813989      0.579422951       1.13254702       1.56518996      0.717135370      0.136580706       1.43695593       1.24916005       1.89119899       1.27102029      0.765446305       1.21955347       1.54369843       1.43708539       1.73604989      0.563822091      0.427661508       1.27667177       1.39229488       1.73687017      0.507674515       1.42363727      0.498526275       1.76923776      0.189488873       1.48225093      0.410380691       1.12564206      0.940359116      0.793652177       1.45737255       1.00162756      0.435030460       1.48757339       1.08235252      0.388736576       1.36027670      0.564432979       1.28793287       2.51006055       1.68652689      0.397413164      0.460506201      0.904710293       1.38500786      0.585479259       2.48120189       1.44445777       1.76028085      0.821006060       3.15772796       1.57923877      0.333991200       1.29023838       1.74385595       1.08410215      0.907095492       2.25554514       1.98856294      0.684440136       1.45955420      0.586358488      0.519425571      0.958743393       1.28122187      0.282657534      0.788867414      0.583706081      0.567385912      0.431207567       1.17478693       1.13538957       2.24600029      0.643650770       2.70905638       1.49012446       2.71110773      0.987132609       1.33850622       1.07032478      0.996250510      0.847295880       1.87979889       2.02295780       2.36692309      0.589556575      0.404230416       8.39895085E-02  0.790093899       2.37937760      0.488835812      0.465281993       1.29315078       1.13072431      0.821582794      0.648852289       1.07443178      0.729072869       3.91690657E-02   1.26009822       1.33553410       2.26045108       1.12610757      0.747799158       2.06155324      0.853724778       1.72489309       1.22603297       2.98082256      0.673414648      0.555204332      0.700587451      0.397050768       1.53709137      0.873471975       1.74705648       3.05906343       1.42790055      0.915124834       1.48503077       1.21517563       2.35461068      0.177001014       1.82765627      0.470074922      0.966267109       1.20916665      0.734113872       1.61613119       2.41318297       1.24740279       1.57006049       2.25282240      0.986338198      0.862940550       2.56721020       1.43562782      0.790996373      0.590861499      0.297579736       1.07440853      0.730948150       1.46675718       1.21657538       1.07333398      0.961722553       2.96902871      0.363339722       1.25619626       2.60509181       2.44315577      0.376204759      0.892225504       1.06598806      0.917444408       1.42344713       2.11079597      0.448242813       1.37687564       2.26765013       2.73806453       1.57626283       2.19191003      0.485890061       1.97527611       1.07603860      0.441331446       1.22627842       1.85161388       1.28449702      0.973340511       2.00599813      0.983174801       1.13122034       1.78470027       2.65546584       1.92472184      0.723316431       1.90864527      0.972251534       1.10018051      0.685512364      0.311307967       1.40125072       1.49218416       2.18129802       1.50955057       1.57439899      0.578922510      0.913394272       1.89954948       1.03198886      0.138069108       1.90984261       1.23582959       1.18575084      0.299710631       1.77216363      0.892042577      0.950267375      0.664807081      0.457577884       2.76661921      0.979789138       1.10197997       1.03007472       1.66456139      0.363387048       1.07565212       2.57810950       1.39177454      0.212417692      0.731588483       1.32815218       1.58481002       1.14214516      0.906974018       1.25246501      0.767942786       1.55380988       1.09235799       1.39580107      0.290831923       1.59546626       2.67505407       2.76975799       1.06587994       2.17531443      0.586564422      0.135187477      0.736928105       1.77083957       1.00654697       1.00214553       1.76248121       2.25949621      0.281247735      0.250573337       1.23535407      0.342832237      0.672720253      0.733531892       1.07943976       1.07123792       1.23684692       2.50309634      0.598643363       1.18836105       1.64110851       1.37633276       1.01099026      0.242880970       3.54952049       2.12047148      0.867665708       1.66899586      0.957794487       2.28652477       1.95534110      0.321543545       1.73470199       1.89668334       1.78124082       1.10283017       1.36954713       1.26701844      0.357434601      0.279831409       1.47561836       1.22052705      0.769069970       1.86715198       1.75984907       2.01261306       1.30295968       1.18461108       1.13761270       1.11418724       1.36293042      0.611519396       1.41587710      0.965993583       2.71997237       1.38053250       1.17025042       1.04854047       2.48611355       2.28410172      0.671167672      0.452039033       2.25445437       1.74152076       2.80097461       2.12103391       1.22774935      0.238369286       1.42476106      0.903249085       1.69317663       1.44820130      0.659290195       1.15174675       1.84019864       1.46318555      0.355553359       1.91249299       1.00005996      0.523352146       1.91315556       1.14572966       1.05719769       2.54385853       1.99778342       1.77747929       2.03377509      0.616262972       1.02456617      0.346303642       1.46482503       1.46917272       2.13441920       1.40699804       2.90847635       1.27741659       2.03598356       1.18044722       1.82622492       1.09265029       1.37458694       1.01214492       1.86967504      0.896219611       1.03127539       2.46791911      0.223596975      0.249166116       1.92793143      0.812040985      0.599226356       2.28552890      0.370034128       2.26795292      0.874349296       1.45462477       1.14072764      0.803427279      0.636377335       2.02778244      0.513321996       1.12247562      0.911268592       1.45560050       1.74369824       3.03536367      0.989409685      0.532017589      0.811086297       1.56110382      0.811928928      0.958762527       1.48007548      0.351517826      0.819743276       2.25357437       2.50008917      0.965938687      0.156727329      0.273981422       1.09017098      0.973905385       1.64763784      0.465755999       1.49999142       1.72934425       2.94168448       1.50345266       1.23688006       1.16779780      0.941580772       1.19621599      0.382902205      0.607585728      0.582788587       2.07482743       1.26115704       1.14070189       2.29435945      0.220872045       2.42356467       1.10583317      0.560022533       1.19493401       1.01293778       2.61139035      0.571425021      0.565212369      0.694508851       1.81255245       1.48311210       1.74087250       1.82621276       1.21415079       1.05515087       1.45644760       1.04049468      0.883477032       1.65099478       1.63279057       2.58792996       1.72281384      0.658849895      0.754438877       1.87587273       2.31146002       2.15530109      0.369170994      0.743414760       1.21764684       1.41911781      0.288779229      0.926707685       1.24666131       1.11846161      0.973902643      0.450207055      0.767936885       1.70303047      0.821902335       2.36991119      0.202086210       1.55554962       1.39717829       2.42140889      0.744682908       1.58880043       1.69693625      0.935923755      0.864671290       2.41872835       1.28188217      0.971313894       2.33228540      0.988734663       2.08776927       1.87760448       2.19494128       1.69718766      0.402500868       1.34885800      0.645184577       1.10303938       1.68990636       1.00876689       1.35896432       1.01763880       1.28633976      0.600777447       1.36688459      0.313302875      0.830230892       1.56274652      0.581309378      0.553539693       2.35234547      0.781570733      0.416692615       1.57675683       2.39471793      0.667280436       1.20571053       2.55839777       1.80804634       1.11127210      0.414867818       1.31723261       1.30299330       1.11683941       1.10440135      0.683005154       1.77863002       1.47132063      0.626500905      0.640831888       1.32414901      0.677498639       2.93462372      0.571575165      0.854781568       1.17015374       1.26442015      0.833196044       2.04993176      0.693701923       1.05426514       1.68661976      0.526127934       1.00435460       1.64298868      0.698630452       1.54882658       1.34771609      0.827682436       1.51410973      0.674051702       1.52990770       1.57224619       1.56929326       1.40970421      0.856885314       1.20374584       2.88670540      0.633262873      0.387942493      0.583454967      0.376342654       2.32421660       2.18781304      0.709458709       1.40780473       1.20800722       1.99816775      0.442934811       1.11724246       1.64602482       1.13649249       2.79952335       1.38524330       3.47177863       1.58076334       1.95397723       1.57202065      0.396611989      0.523334622       1.25195110       1.13998616      0.726924002      0.671655655       9.36258808E-02  0.512955129      0.624233663       2.02691674       1.05476809       7.42731467E-02  0.747740269      0.755963862       1.79973722       2.41385055       1.57781804       1.89729309       1.25848246      0.933701634      0.921214223      0.523592234       2.00560904       1.10767174       1.03138554       1.13061774       1.29384887       1.14684677       1.81500602       1.43922937       1.62607741      0.873296022       1.67303848       2.53986764       1.31885624       1.15425801      0.936206996       1.10058045       1.81696522       1.74142408       1.63440013       1.17348385       1.13595843       1.02088583       1.07397473       1.22521579       1.25195539       1.27960205       1.85090244       4.28173468E-02   1.36701345       1.93711901      0.708601356       2.04417396       2.67112970       1.74947691      0.596493661       1.08551526       1.09892809       1.31526184       2.01486516       1.20981383       1.43346119       1.96735239      0.597563803       1.08335042      0.484062672       1.24090612       3.17999172       1.72842729       2.36004519      0.560718060      0.227976397       1.99187827       1.29452467       1.08105302       1.79630840       1.31396127      0.845545232      0.781096280       2.05083895       1.60988069       1.07448053      0.361384898      0.533397853      0.631828547       2.28745770       1.81673110      0.390427619      0.745691597       1.10162818       1.48903692       1.45073509       2.70012379       1.65816641      0.523926854      0.963704169       1.38348556      0.427836806       1.75960970      0.577756643       1.24083436      0.349737942       2.89826441       1.49342513       1.49420786       1.62210298       1.45402157      0.592009187       2.42607689      0.896867573      0.217195004      0.391478390      0.209505633      0.236017033      0.552899480       1.26249576       1.17511487       1.50022209       1.43595266       2.00185156       1.10672998      0.976182044       1.04792905      0.860477507       1.11943448       1.00891328       1.10066056       1.00682032      0.761140704       1.09482813      0.716841638       1.72397637       1.77114666       2.03731942       1.22478652       1.67620897       1.83067882       1.55165386       1.41672611       1.91097939       1.41913450      0.830354154       1.19808388      0.323767453       2.12400413      0.992582321       1.53810644       2.20608187       1.62426770      0.479019493      0.815804124      0.841773510      0.809719920       2.28499031       1.49530315       1.01901233      0.988415420      0.630928397       1.55357027      0.970111012       1.27097273       9.68473628E-02   1.52759612       1.15486431       1.39960551      0.464239866       1.20168555      0.907155871       2.79588294       2.76926064", "1.18114209       1.12434220       1.88492739       1.59625900      0.526062191       2.30269790       1.45399094       2.31169963       1.73873889       1.58767951      0.915508747       1.12851536      0.736602962       1.36452162       1.60769880       1.30720949       1.22045016      0.874689341       1.38500214       1.09781075       1.55679142       1.22210789       2.05414224       1.35585940       2.51825428", "0.901769221      0.368678957       1.37290895       1.63353956      0.443882793       1.26283348      0.594683290       1.97691262       1.70462298       2.40022039      0.328011632       1.47927749       2.00294781      0.482093215      0.737265527       1.40861869       1.32937825       1.33397901       1.57096672       1.57571125       1.34801531       1.08614588       1.24469423      0.860598862      0.563972533       2.42782998      0.711393893      0.893012524      0.861803532      0.473455191       1.06938028       1.62453961       1.42486858       1.59535742      0.392757148      0.821074247      0.753745735       1.26865530       2.15623808      0.676620483       1.02164471      0.742401481      0.307799429      0.105787657      0.361770838       1.57645917       2.41013813       1.01782691       3.05951047      0.640435278       1.14302719      0.779527426      0.187000111       2.15829110       1.61756861      0.787166715      0.946929514      0.595141292      0.870051980      0.376769662       1.03198397      0.998688102      0.998076618      0.919311643      0.602048755      0.857962668       1.01960123      0.563523889      0.357853711       1.44747472      0.495258898       1.36129606      0.421031982       1.02169812       1.98730803      0.335039109      0.714656770       1.90048909       1.90811849      0.854884565       1.71651268       1.46580505      0.469409555       2.34130836       1.02263832      0.944745898       1.62395287       1.57563567      0.485671788      0.734002829       2.49150681       3.56468484E-02   2.42443824       2.11482930       1.64987028       1.19513965       3.04210567       1.28896987      0.753071070       1.04184282       2.04405499       1.54534733       2.05622983       1.42102242      0.781321347      0.275091976      0.937776327       1.59473765       1.51495862      0.611771762      0.587104976      0.213770539      0.776639283       1.01785111      0.781370401       1.79545176      0.607087553      0.600060999       1.19944417      0.783078313      0.588560283       1.28276503      0.479093611       1.23907566       2.66683769       1.95314646      0.556365013      0.899094522      0.824286342       2.14000320      0.232586771       1.23951244       1.73174858       1.09579587       1.34515560       1.08511925      0.679434836      0.817894459      0.754174113       2.36556196       1.26419806       2.12771678       2.82288098       1.63088238      0.452275127       1.91332281       1.15286863      0.473245472       1.70003915      0.325982004       2.55512786       1.22565877      0.916553080      0.488961130       1.62791765      0.103737898      0.465542465      0.907515526       2.25853324      0.898084104       1.14399326       1.41469693       1.19324565      0.641811609      0.424123526       1.58154035       1.92854941      0.583212197       1.08767402       2.04193306      0.565537810       1.94087565       1.52846098       1.39623380      0.856729090       1.89085960      0.567119420       1.79317331      0.933480799       2.24348235       2.23312378      0.259370774       1.31304908      0.905560613       1.50132370       1.03385723      0.554115832      0.562207818       1.29853654      0.811402559       2.82305574       1.20619905       1.13542080       3.19267249      0.664713502      0.944707453      0.610660136      0.812211156       1.16274738       1.06917679       1.07227039       1.12319326       1.31835485      0.882111490       2.35350156       1.10191667       1.78712666      0.809259355      0.301629752      0.835259914       1.02879024       2.60094810       2.04875255      0.594076991       3.13509893      0.144795612      0.974084020      0.104780607       1.39693451       1.75232112      0.725244641       1.11830485      0.887063384      0.196504831      0.810293138      0.966755807       1.98518431      0.688611567       1.08069038      0.733673394      0.527453005      0.982001722       1.01240075      0.443615735       1.99161112       2.94799256       1.00861192       2.15979624       2.86169147       1.83727181       2.41007686       1.47775435       1.22031260       1.30670595      0.396724313       1.30711806       1.63135672      0.568585098       1.88118076      0.233022928       1.83754253      0.629289508       1.08161342       1.09500813       2.00128412       1.56636429       1.28834867       1.52921939       1.58896744      0.536997914       1.92350042      0.566604316      0.736300528       1.02531779      0.733376503       2.27367170E-02   3.10150743       1.15856194       1.07758033      0.411485642       1.39936113       1.41215527      0.857261777       1.19179547       2.43444061       1.45360410       2.24013877      0.464899153      0.437305301       1.45966005       1.47731876      0.210988134      0.781497240      0.690676451       2.56373286       2.24002481       1.02572596      0.874594927       1.32572722      0.194110274      0.682558537       1.90713930       1.09984422       1.71189737       1.46004939      0.454822898      0.554534972      0.958630204       1.05784941       2.03659463       2.33369803       1.19417882       1.74369895       2.39646411       1.49270034      0.537195623      0.544544160       2.57691312       1.52384233       1.61364651       1.13577259       2.44232130       1.25122905      0.916455388       2.32053852      0.953219593       2.24577498      0.744951010      0.308249682      0.972737312       1.08502853       1.80603898       1.00026917      0.570779741       1.27036548      0.262498707      0.601227283      0.785514832      0.372907400       1.52646077       2.22475481       1.46542251       2.37857151      0.814144552      0.278816521      0.719352245      0.902068257       1.57281864       2.18960524      0.356466115       1.41375983       3.06191468      0.731472731      0.782702148      0.774764240      0.944120646      0.190691590       1.98271024      0.141362563      0.953510344       1.06864655      0.561364293      0.894338727      0.946409941       2.73847246       2.37263727       1.17674971       1.40068436      0.304455519      0.685013354       3.21069574      0.621914268      0.469365448      0.503661931       1.22230065       1.15590692      0.368210793       1.34168470       2.26628542      0.595735312      0.760791659       1.26857841       1.11748362       1.01578462       3.85497236       1.36287451       1.01016927       1.73145163       1.14719510      0.611021638      0.945128262       1.53997433      0.993137598       1.25452614       1.08075297       1.72853112       1.25583827       1.59324658       1.31482995      0.987669170       2.02023625       1.79615080       1.46585834       2.79145336      0.706337452       1.21508086       1.02817059       1.28290355       2.25037265       1.27647924      0.865626514       1.05668533      0.974446654       1.21252477       1.80925739      0.374304712       1.71377146      0.473724276       1.63354254      0.718741417      0.735105813       1.79853296       1.25457644       1.00836444       2.03713799       2.24259210       1.28250122      0.889903307      0.628231585      0.586982191       1.02160382       1.43416607       1.77368748      0.475742131      0.317225724       1.83324194       2.63228798      0.247789577      0.982193589       1.53483641       1.19815087       1.22373831       1.52255440       2.18834043       1.46279240      0.544136584       1.00854349       1.68083894      0.914634049      0.333821326       2.02144241      0.896643341      0.540333927       1.61531532       1.78578353       1.71773994       1.80173159      0.860314310       1.41694653      0.761431694      0.381706774       2.16420579       1.39717722      0.724079430      0.582911968       1.20804095       1.31564474       2.07306910       1.25589907      0.978102565       1.42701936       2.21304297       1.68683743       2.72135091      0.546073735       1.85908103      0.908217549      0.342415154       2.12194562       1.79891384      0.720238805       2.75410199      0.200145245      0.696386397       1.24951267       1.32003438       1.58215189      0.999121189      0.961180687       2.06942868       1.65272033      0.901814282       1.53060687      0.531048715      0.836686432       1.12255204       1.35452175      0.663248718       1.79789150       1.07165527       1.54311490       2.17825532       1.86554873       1.32728159       1.36238480       2.91646194       1.17709398       1.53281403       1.28709042       1.91236567       1.01323140       1.07521749       1.81063855       2.23367882       1.12471664      0.634126723       1.11652267      0.900773525      0.599895418      0.992178679       2.82828259       1.08852673       1.47456145       1.31913412       1.11428487       2.05765891       2.15459728       2.14273620       1.62763834       2.06618333      0.310822487      0.953624070       1.64879167       1.30433381       1.93502152       1.24118161      0.841760457       1.51443148       1.52331328      0.392068297       2.39088655      0.205085412       1.00099385       2.21505642       1.95275235       2.11147523       1.04706895       2.84197760      0.737783372       1.31051517       2.74069405       2.58153176       1.41931176       1.70923078       2.11562157       2.27062607       2.62464619      0.320060015       1.29311442      0.672868669      0.417482227       1.33633339       1.82297969      0.984019578       2.82623482       2.16410804       1.04933822       2.99349833       1.44003344       2.13374543       6.04404323E-02   9.87512544E-02  0.378996015       1.69304335      0.976836979       2.73673677      0.882222891       1.28086841      0.353120983       1.01194215       1.15435886       1.22183883       1.36895192       1.02114451      0.658487737      0.453565150       1.03131616      0.680039346      0.382811725      0.989419401       1.84403670       2.63327980       2.10366297      0.577316463      0.425274253      0.820969641       1.15868545      0.635694742       1.28401315      0.345528543       1.11743748       1.01306081       1.51512384       1.39878297      0.897717237       3.03129721       1.51689351      0.738191366       1.47466314      0.912776053      0.654055297      0.321978003      0.762472570       1.52573323      0.783442438      0.802340865       2.41107821       2.49498820      0.641350269       1.41300368       3.00234127      0.878316462       1.28613031       1.77229798       1.09768987      0.948536217       1.11825538      0.584143341       2.94951272       3.01861024       1.29168844       2.26268315      0.952902853      0.883558810       1.06995487       1.20027423      0.813009620       1.43524766      0.609602451       2.53216028       1.35989380       1.53319740      0.377159446      0.801806033      0.759429157      0.914128602       2.21376514       1.46926773       1.83453310      0.905613244      0.916204154       2.21163416      0.866462946       2.01939273       1.87663305       1.94186640       1.59587526      0.475111157       1.98348844      0.944529831      0.976085961      0.741690874       1.04968739       2.67010880       1.44717884      0.654333591       1.81787717       1.56918776      0.134844452       1.82373953       1.48270345       1.06449974       1.15738809       1.19613445       1.49647796      0.486600727      0.373530298      0.846381664      0.556024373      0.634783447      0.707692325       1.24234354      0.830955565       1.03055549      0.964710295      0.968915105      0.999478281      0.734939873       1.28786266       2.14326930       2.27201605       1.43323135       1.40438366       1.07914817       1.15702057       2.18620563       1.46161377      0.861489713       1.86164808       2.25172043       1.36514604       1.29159486       2.06510830       2.24349713       2.05134606       1.67013526       2.08407545      0.772296667      0.678689599       3.06576562       1.78622413      0.724346578      0.545879304      0.403670549       2.01333857       2.10931706       1.35626173       1.48852921       1.44061625      0.874460459      0.516230464       1.84238207      0.935901999      0.561337829      0.327982485      0.414617240       2.33851647       1.85650706      0.525473952       2.20999527       1.02025163      0.525496066       2.33014941      0.781670213      0.926152229      0.439882487      0.720298290       2.98613715      0.780970633       1.47224998       1.26085830       2.35243607      0.531558752       1.22986686       1.36906624       1.06564558      0.831849754      0.753935575       1.10738850       1.11034775      0.808438063       1.14287138      0.954066694      0.482392401       1.42205095       1.53572035      0.788993120       1.69314754       1.28372145       1.35367537       1.00406182       1.07942271       1.43814349      0.745226264      0.953800917       2.16888547      0.462405324      0.581489742      0.604679286       1.46854985      0.636117697      0.276793718       1.41828322      0.609559000      0.964636803      0.484674841       2.89616752       1.35533130       1.13015366       1.43515694       1.40100110      0.913081527       1.44125628      0.809541762      0.707029521      0.447932959      0.489676625       1.81905580       1.84515190       1.95918810       2.08102489       1.75866723      0.285115391       1.58494043       2.07422233       1.85982168      0.527451575      0.503687322       1.09212601       1.03034794      0.745987833       2.78453994      0.269292474       1.86432159      0.760512471       1.49446964      0.908560634      0.828329444       2.38059211      0.623509288      0.713899255      0.736606658      0.977361262       2.64211369       2.04950762       2.18593383       1.65171051       1.13379681       1.26283157       1.74937725       1.89815021       1.43380547       1.06749916      0.713339388       1.63298404      0.936348677       1.54675484       2.49087834       1.44371593      0.653387725       1.45200384       1.09696877      0.779909074       1.37294579       1.38662136       1.89612687      0.996634901      0.850888789      0.841975510      0.894122779       1.55740762       1.62367284      0.766799450       1.62462401       1.13661158      0.990739405       1.39245605       1.63598549       2.02307844       1.45226467      0.768235803      0.875759721      0.657329679       1.34647787       2.00418210      0.121633448      0.601437390       2.04186773       1.95910680       1.12995017      0.961489022       2.11878395      0.137663200      0.568319976      0.643620193      0.483847648       1.84359396      0.344036072       1.14893377       1.35415101      0.770930588       1.82009935      0.478123158       1.11252499       2.16951180      0.848204255       1.51453876      0.455529809      0.654026031      0.790147901      0.413961172      0.860735893       1.02293146       1.20791054      0.684446096      0.988164783       1.17067218       1.43416691       3.32616568       1.49223530      0.791524947       1.80489838      0.348257720      0.408193827       1.62382293      0.634050846      0.469677985       2.11303234       1.59317303       1.54915380      0.451916784       1.76156676       1.04069543       1.78260481       2.22854352       1.33110893       1.22677410       1.02144098       1.21857500      0.924074113       1.28597653       1.10826695       1.62637568       1.14261687       1.26209474      0.757428527      0.858015001       1.09569204       1.12531662       1.26734185       1.80272841      0.533620059      0.426289499       1.11043525      0.712656796       2.13986087      0.166481555      0.541927755       1.29734254       1.67915213       1.03909278      0.327326983       1.17472267       2.48366070      0.986991942      0.240414187      0.935607255       1.00163734       1.91699433       2.28189182      0.341616005      0.435457289      0.886062801      0.402292550      0.671748817       1.29156423      0.727022886       1.04828167      0.852629781       1.91827571       1.21084714       1.31782258      0.584134281      0.889262974       1.55161822      0.805911362       1.01367247      0.404534966       1.87135911       1.69850528      0.828361571      0.730797410       1.61504078       2.32421660      0.602618933       1.08174741       2.10744667       1.34431422       1.20242321       2.39795613      0.943471968      0.797438681      0.776210189      0.489201337       2.25900269       1.65905499       2.05756903      0.841682494       1.45020342       1.53162885       1.44397533       1.50331295       1.61100793      0.678759158       1.79745182E-02  0.830935597       2.44470835       1.06034660       1.35876727       1.03098416       1.19449604      0.877028286      0.561167359       1.23548591       1.23095298      0.218805507       2.81096959       1.33182383      0.309059590       1.79657400      0.721208215       1.17710078      0.323595911       1.23444366       2.05984497       1.46811545       1.00441825       1.17201054      0.623155475       1.85050237      0.762717724       2.59491920       1.74013627       1.25753808       2.51607990      0.835789919       1.98522270      0.646902740       1.54423058      0.850149035      0.917210102       1.51751745      0.673063934      0.527013004      0.580214560       1.21547377      0.528306246      0.778255761       1.03715944      0.989050269       1.71461523      0.389080763       1.86754584       1.51180303      0.825706840      0.877932966       1.30906653       1.21521795       1.27697134       2.58155441      0.983390093       2.50520420      0.418563694      0.529990792       1.94383419       1.98236799       2.48954296       1.20875597      0.653875589      0.900483251       1.42526579      0.942160308       1.38289595       1.09879160      0.383406579      0.506771207       2.04629827       1.28582788       1.21285546       1.15474856      0.333003402       1.03184867       2.23006082       2.88733983      0.684002459       1.47382295       2.51945782       1.07761967       1.96723962      0.271283060      0.463449955       1.38933992       2.18819976       1.75999117      0.158853516       2.11944437       2.04496527      0.120514154      0.671891272      0.634802401       1.11656737       1.27652788      0.427720904      0.883649707      0.998313367       1.11194074       1.38847613      0.373958528      0.648468077      0.562609673      0.809864223       1.04818296      0.351135790       1.37274241       2.24200010       1.06871390      0.654242873       1.18981373      0.876399815      0.984059811       1.41201949      0.768616974      0.460820556      0.760642231       2.16776967       2.56105328       2.58686185      0.943330824       1.67560291       1.42755926       1.45808339       1.17315435       1.34779000      0.696977913       1.20513105       1.06190991       1.22468996      0.973173976       2.49570990       1.71509528      0.637812555      0.416397661       1.29260802      0.737829864       1.61404502      0.620721579      0.215828151       1.70029044      0.816913903       1.35466230       2.13235807      0.690158844       1.24926829      0.284703404      0.827614784       1.16377831       2.19087982      0.722411752       2.43664527       1.53682363      0.377299070       3.36084795       1.63451350       1.27218139      0.625558853      0.552745342       2.11081576      0.490154952      0.297132671      0.960063159       1.77681899      0.584885478      0.165321410      0.940660000       1.02631140       1.27061832      0.997868359       2.25919247       1.84726799       2.33628988       1.67938983      0.277641416      0.655901849      0.978933334      0.599470556       1.17043102       1.56764257       3.17646384      0.675567985      0.575854421       1.27866769       1.03103924       1.09717083       1.12374389      0.991805553       2.35498524       1.31264973       2.23056793       1.18364167       1.08955610      0.493672639      0.529400647      0.978576779      0.656103194      0.669577718      0.910979509      0.584185004       1.62479234       1.55334568      0.408366323      0.770680010      0.156996220       1.40619016       1.12069714       1.06267989       1.31535923      0.116948918      0.269659221       1.23789096       1.67814219      0.646356285      0.971578300       1.39300656      0.182503134       2.06301498       2.16723204       1.24567318      0.974265218      0.436314225      0.933185339       7.60953501E-02   1.60994923       3.65812826      0.721774220       1.30427146      0.788963675       1.14447367       1.19507897      0.477307707      0.401225924       3.11435366      0.483131409       1.21633673       1.54448426       2.28502536       1.03344595       1.32251942       1.80542076      0.951692998       1.00638223      0.458372116       1.67765498       2.16948843      0.412764102       1.20670819       2.15930438       1.96327674      0.217118278       1.00944304       1.23652685       1.28964531       3.26151228       2.15736961       1.61091328       1.11368179       1.40632129       1.93276799      0.464913577       1.68862021      0.772447050       1.71712887       2.19539714      0.780933857      0.684208095      0.913045287       2.32181501       2.72375298       1.83860183       1.71325588       1.40331948       1.76540482      0.938268542       1.37062788       1.17584848       1.56303692       1.65439284       1.75259495       1.99386334      0.831816971       1.23861074      0.817565024      0.742999077       1.04721916       1.63632143      0.366671294      0.701997221      0.660953701       2.00714707      0.602747977      0.377650917       1.86031878      0.874784470       2.19176126      0.613779664      0.311378092       1.45021319       1.43667567       1.11350775      0.831202745       1.15259862       1.30081439      0.742269635       1.45562160       1.24848115       1.55045664       1.12891269       1.05622554      0.861027241       1.22826719       1.75899816       1.34509444       1.59400666       1.16191041      0.882447481      0.198177755       1.09196699       1.46199989      0.987469733      0.961527586       1.12342894      0.823727071       1.74271131       1.79533494       2.22275376      0.700192034      0.924391389       1.06618512       1.43991411       1.74465418       1.14679646       1.44139993      0.851720691       1.48716664       1.05506730       2.43920088       1.04661644       1.85787904      0.965580285       1.81722677       3.40785980       1.85680270       3.37199187       1.35691833       1.93209434       2.09249067       1.11556959      0.945075810       1.28821790      0.577153027      0.417669117      0.982955396      0.864875972       1.61400783      0.288468778       1.41538870      0.276919454       1.33931136      0.945373833       2.29691982       2.46688843       1.24993265      0.932373822       1.46401894       2.17601109      0.903463364       1.74928474       1.24269569      0.905535698      0.267268687       1.07339203       2.46667480       1.81352663       1.18526232       1.95795918       1.18790555      0.354339361       1.47031176       1.43672168       1.08268285      0.906515598      0.524399221      0.202958584       1.33408606      0.667052209      0.775322735      0.224557370       1.71723318       1.57131183       2.11376619      0.764021993       1.25605059       1.67812395      0.748827040      0.743532717      0.727355063       1.10684288       1.23984611       1.23747456      0.726567805      0.385247171       2.68278599       1.65789008       1.32374907       1.48702431       2.34274101      0.103291564       2.90680194       1.35124207       1.92717934      0.661403358       2.00413036      0.674420595       2.44486427       1.03731108      0.468272060      0.715018630       1.17170155       1.78106105      0.470181257       2.60149550       1.43800282       1.08850050      0.654372931      0.678628683       1.48522043       2.08347464       1.05932999      0.949094713       1.81097615       1.66842210      0.855392933       1.08138978       1.05144298      0.735594392      0.971344650      0.564001024      0.747177541       2.44134498      0.662514508       1.31771886       2.08479857       1.74204445      0.783545732      0.565225244       1.00544751       1.21191490       1.13269436       2.47674298      0.630975068       2.44246149       1.94221306       2.35251474       1.76703429      0.184614643       1.74447143      0.437048167       1.40520036      0.465851426       1.33105183      0.964500487       2.03581238       1.20559776       1.32432866       1.44803560       1.26024413       1.81767857       1.55626011       1.25993371       2.08413720       1.08722305       2.64933729       1.18746340       1.69300890       2.03452706       1.47301841       1.10454726      0.873074055       2.14678001      0.599370480      0.249719501       1.26670647       1.16680050      0.231225714       7.38656521E-02   1.69295931       1.11147082       2.38504863       1.14424551       1.69950449      0.890398979       2.24741292      0.778431296      0.376190335       1.24166167       1.33175397       3.07473898      0.648802817       1.59411764       1.73023462       2.14406133       1.02102160       1.66162789       1.49088275       1.56337178       1.32912302       2.32872248      0.620864630      0.935624659       1.14973342       2.55628037      0.805460036       1.33725977       1.40168083      0.899010301      0.630725861       1.15380049       3.11196923       1.05614233       1.04924464       1.08905768       1.22674584      0.997840643      0.933761716       1.19827223      0.557873487       1.24899364       2.81648088       1.05023813       2.54686093       1.19592106       2.18796873       1.24697006       2.66730928       1.39517558       3.08314109      0.571166813       1.56953907       1.82508469       1.52155983       1.37314045      0.578272998       1.57227135      0.940332592       1.29562616      0.747403443       1.48808396       1.93929720       1.53279197       2.15496135       2.95069480       1.09349024      0.589433253       1.40899360       2.04290771      0.658846676      0.818539739       1.28600562       1.05517304       1.32437730      0.842164397       1.24392676      0.513997555       2.08143187      0.499842644       1.34337544       1.31185341      0.549979508       1.31936598       1.72262394       1.81184483      0.822658539       3.27715635       1.63517523      0.607742012       1.43949485       1.32227981       1.18311524       1.76341772       1.48642802       1.62366879      0.795244932      0.874807954      0.598708153       1.50014806       1.40986562       1.97966611      0.392144471      0.133730128       1.33245182      0.479963869      0.360970259       1.35480714       1.67115939       1.15316892       2.71611643      0.308263063      0.769562662       1.83918107       2.57439995       1.19595528      0.658890367       2.28371716       2.36231780       1.03653920       2.01463747       1.45663750       1.31474638      0.966472864       1.73615122       1.73530149       2.20192099       1.70558929       2.50782847      0.892970324      0.817720532       2.61177301       1.12220752       2.74039650      0.853168786       1.28740692       2.68333197       1.37621415       1.74757218       2.39717913       1.00922346       2.13303590       1.72914839      0.905506670       2.13052225      0.336169273       1.98521721       2.05716658       2.46026254       1.61441243       8.49124417E-02  0.912408233      0.826331973       1.05503142       1.69684589       2.98477769      0.810397744       1.08633733       1.79077256      0.214432821       1.77162302       2.29716444       1.26773894      0.761397362      0.333378941       1.13457811      0.661448598      0.290971726      0.245822951      0.765944600      0.503692687       1.73665512      0.512979746       1.46951342       1.83026385       1.19801414       1.96867979       1.66300797      0.599426568       2.01924348      0.968737364       2.58567882      0.671947420      0.476760417      0.920968056      0.450119287      0.859045744       1.65102625       1.08697951      0.447652787      0.369611144      0.172170445      0.609937251      0.782388449      0.893087924       1.22660279      0.737707973      0.809100509       1.57853103       1.20952642       1.08899879      0.302416742      0.644723654      0.879467189       2.03010941       1.47137630       2.06991744       1.79260242      0.611429155       1.43842816       2.00983977      0.722150922      0.766626120       3.02844691       1.34014487      0.689991295      0.619121552       1.91090250       1.14258468       1.67327690      0.928817809       1.24937916       1.67962289      0.956831813       1.30191135      0.785450041       1.14816606       1.45456278       1.39956868       3.45055246       1.21334124       1.82645321      0.774989188      0.418136507       2.07673573       2.11798334      0.806420326       1.07658684       1.37485623       1.02019620      0.716259956      0.897490442      0.436432332       1.39235985       2.07239771      0.846142650      0.628184438       1.20656073       1.07970452      0.874348581      0.580297768      0.823042989       2.03559089       1.33920074      0.838024199       1.21835864       1.01448166       1.44303536       1.43923044      0.491014689       1.58878696       1.99425638      0.888894677       1.03866374       1.76346850      0.703919888       1.13990486       1.14306009       2.29971313       1.11051404       1.11121607       1.08906662       1.80146933       1.88000715       1.14567614      0.765688539       1.40947402       1.55627012      0.485633671      0.802648723      0.364322722       1.90537882       1.35065508       3.02649283      0.434985578       1.76534438       1.29487514       2.17545938       1.86674094       1.22428429      0.906912446       2.97052598      0.660906434       1.28710568       1.40041852       1.77428591      0.710466146       1.94823718       2.01304173       2.59008217       1.89648807       1.28199685       1.14094853       1.55595434       1.20524204       1.07199466       2.06475568       1.00844669       1.26007652      0.895520031      0.942631066       2.30676317      0.947019100       1.15085709       1.98933506       2.19739532       2.78708339      0.541374564      0.653466642       2.00679827       1.15617537       1.34539175      0.780258298       1.77076435       1.18657327      0.998921156       2.42033052      0.793213248       1.17833531      0.192453846      0.582603216       1.34157038      0.451075792       1.56271791       1.57682979      0.794533670       2.71491504       1.32913923       1.14772952       1.18997693      0.902910769       2.33327603      0.649540305       1.15424097       2.08868861       1.53447747      0.846893311      0.750319719      0.764614701      0.321249247       1.62296784       1.16415298      0.597496867       1.61347675       1.46189034       1.52753901       1.43072891      0.845528007       1.75775540      0.485842168       1.44337380       3.71087933      0.837619901       1.32150888       2.41710615       2.90730143       1.35820985       1.90190673       1.68797445       1.40216517      0.876308858       1.58109236       2.39523125      0.938458741       1.59813881       1.01879394      0.917789400       1.84320462      0.764743030       1.33303070       2.48023653       1.19905353       1.55666625       1.06785226       1.01286340      0.824170828      0.359609216      0.115623191       1.77111340       1.53627944       2.35385871      0.769786358       1.02234054       1.05603945      0.745374262      0.732051134       2.06283092       3.28345513      0.153340504      0.172592625       1.69902635       1.35221660       1.78724265       4.70340066E-02   3.19583917       1.90540028      0.532550454      0.662664413      0.230115965       1.64162600       2.08327341      0.530396938      0.444945306      0.644839048       2.39378524       1.67944562       1.07520616       3.29498909E-02  0.954046726      0.977634668       2.17366338       2.35419631       1.31979036       1.27717018      0.917753160       2.25168467       1.54747117      0.886258125       1.68567169      0.439395815       1.61957932       2.07328629       1.89635968       1.31364775       2.40766835      0.495795012      0.663504124       1.26083255      0.924140275      0.497664005      0.889597356       2.36053467       1.66317093       2.39933729      0.505673587       1.80034769      0.927679062       2.00724316       1.52632225       1.19501913      0.137325346      0.896855235       1.26888251       1.93531048       7.40571693E-02  0.258433014       1.39684594      0.540433466      0.399744928      0.745566964       1.50495493       2.32262897      0.420220912      0.278177321      0.118348770      0.849909425      0.702150822      0.669709384       1.49787104      0.384498864       1.83167028      0.999477565       2.06297040       1.48269749       1.97143042      0.579974771       2.07798433      0.639909446       1.65481961       1.21510649       1.45744979      0.188450098      0.939192474       1.11650991       1.41220152      0.885003090      0.710952699      0.379996270       1.67891705       1.43917406       1.41978085      0.906497061       2.51312900       1.19383228       1.36633337      0.908862889       1.18785918      0.680331588       1.10371554      0.360014290      0.832220256      0.930656016      0.810675621       2.16418576       1.16213238      0.736977637      0.880112469       2.22850442       1.36077178       1.62792730      0.875972271       1.16606379      0.708818018      0.513298571       1.47492433      0.362934202       2.00441170       1.25308967      0.382227808       1.14572108      0.321808726       1.16428673       2.07417703      0.595338166       1.84743321       2.33335042       1.33840883      0.868064046       1.79331243       1.50558209      0.814015269       1.14315104       1.09672344       1.06106198       1.01973784       1.39596736       2.38103533       1.06293321       1.84810030       1.42095470      0.912542522      0.436994761       1.01599348      0.914665818       2.04264402      0.396544516       1.42740750      0.667850912       2.15919232      0.626873195      0.530752182       1.46870208       1.36949217      0.771097839       1.99676645       1.61370301       1.22463250      0.637984931       1.53943908       1.02145290       1.17434275       1.30979967      0.878962815       1.03033793      0.756351709       2.37841296      0.699530065       1.10334814       1.90145111       1.66414165       1.91828907      0.729127884      0.857897103       1.65135479       3.34013939       1.95454299      0.408138603       1.12224054      0.873788238       1.44211960      0.681008637       2.26031184      0.993605196       1.84072018       2.18330574      0.655324876       1.90405071       1.56222057       1.43157804       1.62792623       1.60676789       1.16095996       1.10410202      0.510975003      0.624860704       1.93931293      0.984217644       1.40425980       2.53080893       1.66145265      0.399717808       1.16879570      0.682982981      0.941464424       1.30284834      0.346563786      0.877998948       1.89376676       2.56708431      0.849398434       1.05729389       2.23200536      0.281713039       1.12701178       1.27358711      0.944511175      0.865306497      0.882275701       1.07068133       1.24645531      0.784603179       1.35639644       1.31893134      0.698720515      0.821719944      0.668030262       1.73673797       2.30138659       1.24314713       1.08215559       1.63803554      0.876841068       1.63382113       2.55333090      0.936907470      0.326352626       1.68363953      0.138561621       1.70793188      0.918497562       2.95270848       1.11770618       2.65171123       2.42180848      0.635027945       1.52240884       2.56449962       1.16643035       1.65846920       1.39656055      0.665879965      0.833425939       1.68265641       1.49408650       1.35679841      0.409435093       1.97272408      0.114469036       2.50152636       1.32973480       1.98761594       1.13566756       2.41979361       1.85558808       1.23239696       1.64827776      0.566999972      0.373380393      0.927953601       1.01389730      0.468351722      0.699193537       1.77883410       1.59547269       2.39748716      0.208993196       1.25484741      0.836025000       1.02998674       1.01251376       2.86842990      0.749044061      0.578958631      0.776980400       1.62886119       1.31166375      0.993266642       2.19641161      0.714605749      0.924090266      0.754486799       2.12406731      0.515704453       1.03020608       2.43126702       2.13892579       2.67721796      0.710313320       1.43530858       1.76018929       1.04470384      0.903464019      0.995093167       1.30664885      0.566902518       1.23167086       1.35827172       1.74780655       3.15576172      0.954000294       1.32042003      0.756993711      0.794749856       2.11133814       2.68591213       1.04260695       1.21603751      0.505992711      0.698109806      0.626586258       1.19682813       1.93795764       1.27659178       1.48279095      0.692887306       1.59703290      0.706642807      0.973678052       1.31488001      0.823241949      0.657999814       2.10615063       1.04107094       1.83027899       1.57954609      0.882116020       1.84842384       1.41976500       1.61136937      0.512781739      0.823678672       3.14639425       2.23035479       1.79210901       1.31611919      0.556781888       2.08994746       2.81135440      0.586003542      0.419619560       1.20450294      0.871115029       1.08842921      0.312353849      0.458241522      0.290937304       1.14883280       2.08110785      0.528687000      0.886878252      0.952030480       1.75247240      0.762515843       1.89949536       1.04516351      0.867284179       1.10461354       2.36659741       1.92915678      0.792604983       7.71617815E-02   2.01203322      0.235159934      0.524708271       1.34217274       1.35839617      0.438899755       1.18287718       1.19026875       2.03716087       1.65936971      0.350863278      0.885784090       2.67862630       1.54496503       1.32305551       1.80662346       1.37442243      0.676823258       1.07291627       1.96754324      0.252359986       2.99770546       1.98784459       3.51507378       1.51198745       1.22931695       1.17877877       1.01164365      0.750565410       1.71829069       1.64273679       1.74939203       1.70739245       2.09263182       2.86383224       1.48179150       1.63301790       1.07126296      0.457764447       1.44399834      0.888479948       1.39850867       1.73644805      0.548676789       1.65912187       1.60294414      0.738350928       1.71969843      0.714552999       2.13680243       1.98139596      0.869757235      0.924454987       1.99106073       1.01383090      0.336983383       2.21576905       1.39509392       2.37850881      0.910784841      0.621809125       1.65494525      0.772207856       1.15724289      0.600650787       2.74606943      0.801523685      0.884849668      0.199257985      0.252103359       3.12851381      0.157924473       2.11469674       1.38346469       1.97768033       1.24287963      0.445817351       1.14684033       1.49365187       3.02926230      0.574950755      0.680088937      0.339258701      0.341149628      0.617744863       1.64225399      0.963346839       2.48274922       1.45523989       2.05138826      0.345532745      0.508078635      0.436176896       1.54628861      0.517016172       1.19594085       1.69829047      0.646680057       2.04875684       1.04555202       2.58132958       2.89776969       2.68470502       2.38373709      0.365467697       1.42571211       1.27784991       2.89678192      0.949204385       1.17799413       1.00974000       1.38321424       1.16229117       1.58717871       1.04950964       2.79714680       1.71510005       1.27944553       3.27825212       1.28429687       1.46246171       1.20685256      0.910858333       1.11181128       1.39426124      0.145220563       1.26007092       1.53082693       1.55655479       3.17793489      0.774792492       3.66109443      0.591982722       1.46163225      0.410415292      0.731374443      0.987701297       1.62106967       1.78773761       1.50295734      0.468669772       2.19332027      0.462857157      0.825491905       1.46149969       2.02363491       1.95262742       2.09826255       1.54739058      0.935491621       1.25289428       1.28632998      0.410470754       1.06510746       1.13365018       1.90680909       1.24942398       1.00526249       1.25150323      0.631949842       1.22728384      0.586109459      0.820265472       1.55735791       1.54652464      0.596521258       1.66687262      0.541808665       1.66659868      0.850503922       1.61981714       1.46761072       7.31730387E-02   1.98605156       1.25693560      0.593310475      0.712712169       1.42754102       1.04914379       1.52118421       1.78805637       1.35491192       1.52164710      0.516675293      0.789443910       1.63398516       1.96191013       1.45122612       2.89024210      0.782714009       1.39440703       1.15128446      0.373851359      0.434405833      0.858512521       2.46642756      0.133658156       1.86388612       1.38963926       1.19390857       1.34479523       1.88075757       2.26947188       1.93487608      0.480071008       2.14755058       1.49992514       2.11611700       1.94955039       1.40922070       2.37878585       1.15250266       1.77929771      0.940001726       1.03728807      0.579277039       1.73523712      0.565335810       1.53467298       1.89692187       1.58914304      0.883230448       1.52098656      0.614774764       1.54866874      0.950135529       1.08337414      0.826801300      0.820536852       1.65079606       2.22788429       2.63597393      0.764506102      0.374235868       1.53436577      0.438219219      0.554184794       1.14593589       1.56251454       1.68191671       3.52843475      0.222087234      0.259034514       1.80081785       1.76621926       1.02853298      0.554483473       1.09450161       1.32440436       2.73909259       1.42529809       1.78651893      0.672373354       1.37211573       2.02567196       1.00488985       1.41823506       1.40691948       1.30175018      0.461468160       1.21056747      0.330566764      0.908208549       1.74000025      0.531806707", "1.15825582       1.23759031       1.88566637      0.388569027       1.25854635      0.183186650       1.23677766      0.371343940       2.27964425      0.742688477       1.67932534       1.08016634       1.68145382       1.26639414       2.78411341       1.39235461      0.623571277      0.682351947      0.481630445       1.92075396       1.59375513       1.45638537       1.39539397       1.36601365       1.16798937       1.60793865      0.554199219       2.11964369      0.222822756      0.375638306       1.74196637      0.877115190       1.19774199       2.81381965       1.89856541       1.28991008      0.908161759       1.90206623       1.50508738      0.480657429       1.76845241       1.16830397      0.955049336      0.631967187       1.28673875       1.48120737       1.58398390       1.46604109       1.05384529       1.52815902       1.35783923       2.29818225       2.77837515       1.39811361       1.69282794      0.850989819      0.584028482       1.08732855       1.11509275       9.49788019E-02  0.872076988       2.13295031       1.70802021      0.844751835       1.73354280       1.94561970      0.881241500       1.15064716      0.801033080      0.741092145       1.19484198       1.84996188       1.67027843       1.32975042       1.17391145       1.00548565      0.653118134       1.32565534      0.662953079      0.774780333      0.767088890       1.84951603      0.547760189       8.12392309E-02  0.607313931      0.253485590       2.09104872       1.06283808       3.13940144       1.63322127       2.15159202       8.31729770E-02   1.55907023       1.19448519      0.807326853       1.61689413       2.33499694      0.778260052      0.306263000       1.75097585       2.62891054       1.18011701       1.33216453       1.27169132       1.08177185       1.37542307      0.715530217       2.26864147      0.307156801       1.65780699       1.28254247       1.38806581       1.28996432      0.688427150      0.239215523      0.718827546      0.782799542      0.338800222      0.810428679      0.835868955      0.270367801       1.30948257       1.38767111       1.37625372       1.11037755       3.06866980       1.15997219       1.76071250       1.58586764      0.478127658       1.69094777       1.76806116       1.83353353      0.456024975       3.44945717       1.20632553      0.451486856      0.876950502      0.816101074       2.17295718      0.980295897      0.854963481       1.20249391       1.21736526      0.578758955       2.70638013      0.315566421      0.277183682      0.850212336       1.56030226       1.32136440      0.764674306      0.383068651      0.880626082       1.38663793       1.45009792       1.72582328       1.83267510      0.794176757      0.501832724       1.67283249      0.458647490       1.54512346       1.80878246      0.345791757       1.19996727       2.19046950       2.05843139      0.478606820      0.295531362       1.77464604       2.15392423      0.740483046      0.525138021       1.20657945      0.851770401       1.96947706       1.01894701       1.71817446       1.30989623       1.03369236       1.98588967       1.25490677       1.46061945       1.12129116      0.407968253       2.02641892       1.59712219       1.87657332      0.616068006       1.18769920       1.72751284      0.815497577       1.95922482       2.41812158       1.14493525      0.609211504       1.43363225       1.38364077       3.07901430       2.72431612       1.24173260       1.73596823      0.863290429       1.94455898       1.64037669       1.64566934      0.414402574      0.790006042       1.01715970       1.11261094       1.73574448       2.07840252       2.66924596      0.526395202       2.58675265      0.266291231       1.33733702       1.13409138      0.103663355      0.476299703      0.626838565       1.72260129      0.441333979       1.93633628      0.540166080      0.482552707       1.51011872       1.19269025       2.02856016       1.62277162      0.775031388      0.977591991      0.160838991      0.733258128       1.41725171      0.393492252      0.996288657       1.12825096       1.69675839      0.653839350      0.857474804       1.72355235      0.804685771      0.981346786       1.80372512       1.76681590       1.19408989      0.514815211       2.31679392       1.26207948       1.17776871       1.30185163      0.598533213      0.430268824       1.02978480       1.72200787      0.567494214      0.593099535       1.47264457      0.202195749       1.66874146       1.15844798       1.90368509      0.492333323       2.44941521       1.34145546       1.10697854       1.16302812       1.27904570       1.23386383       1.52509570       2.32936931      0.743221343      0.882938087       1.84187436       1.23130155      0.866400659       2.48254561       1.33759713      0.943771780       1.00949073       1.34884346       2.12431598       1.87979758      0.939519882       1.45034957       1.49629235       1.69839895       1.44572461      0.183336154       1.21877301       2.22495055       2.00387216      0.327968478       1.26071692       1.11361933      0.657144308       2.95995927       1.94691229       2.05009794      0.862207830      0.807614446       1.65256739       1.94442391      0.226947814       1.32377374       1.14448631       1.09393001       1.43936777      0.789123356      0.740409553       2.40026021       1.03144324      0.664207220       1.18867636       1.02844024      0.552768588       1.05605495       1.71719301      0.205470324       1.23729253       1.09008682       1.46406126      0.506305754       2.45363188       1.33528864       1.21148157      0.764049590      0.487497449      0.975578964      0.592060924       1.71035576       2.52809381      0.409847468      0.902804792       2.55632186       1.66309536       2.08541369      0.733778715      0.401667863      0.580162883       1.26507497       1.14671624       1.13316548       2.47835469       1.94728947      0.961833775       1.95080686      0.750750721       2.42827415       2.07445264       1.10546947      0.498206824       1.98788321      0.420513332       1.68600810       1.07614625       1.28533578       2.48006463       1.13160741      0.906490028       1.61882341       1.11836600      0.425553381       1.64421821       2.25969219      0.480519742       2.04752207       2.30903912      0.953111887       1.25303662       1.96709061       1.15838420       2.32203627      0.299432814      0.671778321      0.602238119       1.95921385       1.42241788       1.25198746      0.710578203      0.356405526       1.17319512      0.771810353       1.65412223       1.45672154       1.11245728       1.33280027      0.778316319      0.943749905       1.00312424       2.61472011       1.27437043      0.976334453      0.556531608       2.17754602       1.35320187      0.778329492       3.08750582      0.891830325       2.18522906       1.68043065      0.402121753       1.21468246      0.255978316      0.944104135       1.82227063      0.652787209       1.42521501       1.36567354      0.583316743      0.654518068      0.431969285      0.115574397      0.688056588      0.885575414       1.25826335      0.633448780       3.19340873      0.779926002       1.11449289       1.54086173       1.01172781       1.24724483       1.46656656       1.07719290       1.03961217      0.545784771      0.724144936      0.270034224       1.00420630      0.249551013       1.45221376       1.51344013       1.24114835      0.770332634      0.868003309       2.29051399      0.941583276       1.29632640      0.388118029      0.991450548      0.586971641      0.941651762       1.16232264       2.92143250      0.447216809      0.688723028       1.48609567      0.558341384      0.641647160       1.42594814       1.65422833       1.04998827       1.46789658      0.865993202      0.153136238      0.830230713      0.926895142      0.679255128       2.41563749      0.272026837       1.01832879       2.11761165      0.724103451      0.953705728      0.642308891       1.36315382      0.294427991      0.769637883       2.26707244      0.409927517       1.42447376       2.09854698       1.03397846      0.407301396       8.69811699E-02   1.58017075       1.85559130       1.44528019       2.15304160       1.33540857      0.885779440       2.82758617       1.34623241      0.704818666      0.839602411       1.08497179       1.19346309       2.37910104       1.86804926       2.15863395      0.778696001       1.24336112       1.36473906      0.689897895      0.912964404      0.648958743      0.785455346      0.626445591      0.755160809      0.910403848      0.888465703       1.48008358       1.96907198      0.564748049       1.81675577      0.274158448      0.981953442       2.37107086       1.83872926       1.93677461      0.849334121       1.11204398       1.33212960      0.455197752      0.311881661       1.44805825       2.02780843       2.10726380       2.25360107       1.92552304       1.11048663       1.29381955       1.29056716      0.897699952      0.675993562       1.53092349       1.26366675      0.718938947      0.963023901      0.688198984       1.19949210      0.947362065      0.214774162       1.44797695      0.807269692       1.00525975      0.350432336       1.29473436       1.01720369       2.64868021       1.09725380      0.838349700       1.86540067       1.77693439       1.39827895       1.18758190       1.86961246       1.82809424      0.765138388       1.76525927       1.21059775       1.50793016      0.893394172      0.702513456      0.390810996       1.69883871      0.868204474      0.744490147       1.76017380       1.64568186       2.59231353       1.54369044       1.04991281      0.640936732      0.523059130       2.04961014      0.637377739      0.392854661       1.29555643      0.497788578      0.984297693      0.914258480       2.50487685       1.60118222      0.337532282      0.945761323       1.13387740       1.81606913       2.54574060       1.25356960       1.75536966      0.625672042      0.486195207      0.225358754      0.763908744      0.455435455       3.12707496       1.63359296      0.724524796      0.895231724       1.41692317       1.36180031      0.665507257      0.726095200       2.42035413       2.55262065      0.956122994"]}, "code": "function randn_2d(i, j) result(x)\n    integer, intent(in) :: i, j\n    real :: x(i,j)\n    real :: u(i,j), v(i,j)\n    call random_number(u)\n    call random_number(v)\n    x = sqrt(-2 * log(u)) * cos(2 * pi * v)\n  end function"}
{"instruction": "Use Fortran to give me a function that returns the denominator of a single Chebyshev derivative coefficient of a d/d(xi) matrix given the desired index (k-1,j-1).", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,1,1]", "case2": "[2,0,5]", "case3": "[3,3,10]", "case4": "[4,5,20]", "case5": "[5,0,0]", "result": ["-1.74845553E-07", "9.51056576", "8.09016991", "11.7557049", "NaN"]}, "code": "function den(kr,jr,nr)\n    ! returns denominator of single Chebyshev derivative coefficient\n    ! of d/d(xi) matrix given the desired index (k-1,j-1)\n    integer, intent(in) :: kr,jr,nr\n    real :: pi\n    pi = 4.*atan(1.)\n    ! den = nz*sin(pi(k-1)/nz) except first and last row\n    den = nr*sin(pi*kr/nr)\n    ! and at first or last column, den is double\n    if(jr .eq. 0 .or. jr .eq. nr) den = den*2.0\n\n    ! this section targets first and last row of matrix\n    if (kr==0) then\n        ! for first and last row, den = nz/2 for even (j-1)\n        den = .5*nr\n        ! for odd (j-1), den = -nz/2\n        if(mod(jr,2) .eq. 1) den = - den\n        ! except at four corners of matrix, where den = 1\n        if(jr .eq. 0 .or. jr .eq. nr) den = 1.\n    end if\n\nend function"}
{"instruction": "Use Fortran to define a function that computes half of the numerator for a single Chebyshev derivative coefficient of d/d(xi) matrix given the desired index i = (k+j-2) or i = (k-j).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,3]", "case3": "[0,5]", "case4": "[10,1]", "case5": "[3,7]", "result": ["31.5687580", "-2.59807730", "0.00000000", "-740156.875", "4.38886118"]}, "code": "function ff(i,nr)\n    ! computes half of the numerator for \n    ! a single Chebyshev derivative coefficient\n    ! of d/d(xi) matrix given the desired index i = (k+j-2) or i = (k-j)\n    integer, intent(in) :: i, nr\n    real :: pi\n    pi = 4.*atan(1.)\n    ! ff = nz/2 / tan(pi*(k-j)/(2*nz)) OR ff = nz/2 / tan(pi*(k+j-2)/(2*nz))\n    ff = nr*.5/tan(pi*i/(2.0*nr))\n    \n    ! for even (k+j-2) and (k-j), ff is negative\n    if (mod(i,2) .eq. 0) ff = -ff\n\n    ! zero diagonal component (k=j) from i=(k-j),\n    ! and from (k+j-2) when k=1,j=1\n    ! because tan(0) = 0 and 1/tan(0) would go to infinity otherwise\n    ! hence why boundaries are handled in xnum\n    if(i .eq. 0) then\n        ff = 0.0\n    end if \n\nend function"}
{"instruction": "Use Fortran to define a function named \"temp_foo\" that takes two integer arguments and returns a real allocatable array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-1,5]", "case5": "[2147483647,-2147483648]", "result": ["", "", "", "", ""]}, "code": "function temp_foo(i, j)\n      integer :: i, j\n      real, allocatable :: temp_foo(:)\n    end function"}
{"instruction": "Use Fortran to create a function that encodes the MPI rank based on the values of ix, iy, and iz.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["27.0000000", "6.00000000", "49.0000000", "44.0000000", "27.0000000"]}, "code": "function Formura_encode_mpi_rank (ix, iy, iz)\n    integer :: ix\n    integer :: iy\n    integer :: iz\n\n    integer :: s\n    s = 0\n    s = s * 4\n    s = s + mod((mod(ix, 4)+4),4)\n    s = s * 4\n    s = s + mod((mod(iy, 4)+4),4)\n    s = s * 4\n    s = s + mod((mod(iz, 4)+4),4)\n    Formura_encode_mpi_rank = s\n  end function"}
{"instruction": "Use Fortran to give me a function that takes four integer inputs and returns a concatenated integer.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[0,0,0,0]", "case3": "[9,8,7,6]", "case4": "[100,200,300,400]", "case5": "[5,5,5,5]", "result": ["1234.00000", "0.00000000", "9876.00000", "123400.000", "5555.00000"]}, "code": "function f(a, b, c, d)\n    integer, intent(in) :: a, b, c, d\n    f = a*1000 + b*100 + c*10 + d\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between a minimum and maximum value (maximum value not included).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[-50,50]", "result": ["2.00000000", "12.0000000", "83.0000000", "109.000000", "-20.0000000"]}, "code": "function randint(min, max)\n    ! max not included\n    integer,intent(in):: min, max\n    real:: rand\n    call random_number(rand)\n    randint = min + floor(rand * max)\n  end function"}
{"instruction": "Use Fortran to create a function that takes two integer inputs and returns their sum as an integer.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2147483647,-2147483648]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function my_sum(var1,var2) result(x)\ninteger x\ninteger var1,var2\nend function"}
{"instruction": "Use Fortran to give me a function that initializes a variable to 0 and takes two integer arguments.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,1]", "case5": "[2,2147483647]", "result": ["0", "0", "0", "0", "0"]}, "code": "function my_sum(var1,var2) result(x)\ninteger x\ninteger var1,var2\nx = 0\nend function"}
{"instruction": "Use Fortran to give me a function that takes two integer inputs and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,10]", "case5": "[2147483647,-2147483648]", "result": ["3", "7", "0", "5", "-1"]}, "code": "function myfoo (lhs, rhs)\n   implicit none\n   integer myfoo\n   integer, intent(in) :: lhs, rhs\n\n   myfoo = lhs + rhs\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers as input and returns a real number.", "test_case": {"param_num": 2, "param_type": "integer,real(:)", "case1": "[5,[1.0,2.0,3.0,4.0,5.0]]", "case2": "[3,[0.0,0.0,0.0]]", "case3": "[0,[]]", "case4": "[2,[1.0,2.0]]", "case5": "[4,[1.0,2.0,3.0,4.0]]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function dummyfunc ( nr, x )\n      integer, intent(in) :: nr\n      real, intent(in), dimension(:) :: x\n      real :: dummyfunc\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between Nmin and Nmax.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,5]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["4", "10", "3", "111", "5"]}, "code": "function random_integer(Nmin,Nmax)\n!==============================================================================!\n!Randomly generate an integer in the range Nmin-Nmax\n!==============================================================================!\n!Nmin           ==>minimum index value\n!Nmax           ==>maximum index value\n!a              ==>uniform pseudo-random number\n!==============================================================================!\nimplicit none\ninteger::Nmin,Nmax,random_integer\ndouble precision::a\n!==============================================================================!\ncall random_number(a)\nrandom_integer=floor(a*(Nmax-Nmin+1))+Nmin\nend function"}
{"instruction": "Use Fortran to create a function that compares two character strings and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','worlds'", "case3": "'fortran','FORTRAN'", "case4": "'',''", "case5": "'123','12345'", "result": ["T", "F", "F", "T", "F"]}, "code": "function equal(a,b)\n    character(len=*), intent(in) :: a, b\n    logical :: equal\n\n    equal = (len(a) == len(b)) .and. (a == b)\n  end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers a and b.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,25]", "case3": "[0,5]", "case4": "[0,0]", "case5": "[100,100]", "result": ["5.00000000", "5.00000000", "5.00000000", "0.00000000", "100.000000"]}, "code": "function gcd(a, b)\n      integer :: a, b, t, as, bs\n      as = a\n      bs = b\n      do while (bs /= 0)\n         t = bs\n         bs = mod(as, bs)\n         as = t\n      end do\n      gcd = abs(as)\n   end function"}
{"instruction": "Use Fortran to give me a function that pads a string with spaces on the right until it reaches a specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',5", "case2": "'fortran',7", "case3": "'test',3", "case4": "'padr',4", "case5": "'123456789',6", "result": ["hello", "fortran", "tes", "padr", "123456"]}, "code": "function padr(string, length) result(r)\n          character(len=*) :: string\n          integer          :: length\n          character(len=length) :: r\n\n          r = adjustl(string)\n        end function"}
{"instruction": "Use Fortran to define a function that calculates the hypotenuse of a right triangle given the lengths of its legs.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.7]", "result": ["1.0000000000000000", "3.5000000000000000", "0.0000000000000000", "5.0000000000000000", "2.5000000000000000"]}, "code": "function gnstlib_hypot_c(x, y) bind(C, name=\"gnstlib_hypot\")\n        use iso_c_binding\n        implicit none\n        real(c_double) :: gnstlib_hypot_c\n        real(c_double), intent(in), value :: x, y\n    end function"}
{"instruction": "Use Fortran to create a function that returns an integer seed based on optional input arguments for year, month, day, hour, minute, and second.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[2021,10,31,23,59,59]", "case2": "[2022,1,1,0,0,0]", "case3": "[2021,12,31,23,59,59]", "case4": "[2021,2,28,23,59,59]", "case5": "[2020,2,29,0,0,0]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function get_seed(year_, mon_, day_, hour_, min_, sec_)\n            implicit none\n\n            integer, intent(in), optional :: year_, mon_, day_, hour_, min_, sec_\n            integer :: get_seed\n        end function"}
{"instruction": "Use Fortran to create a function that returns a seed value based on the current date and time or a specified date and time.", "test_case": {"param_num": 6, "param_type": "integer,integer,integer,integer,integer,integer", "case1": "[2021,10,31,23,59,59]", "case2": "[2022,1,1,0,0,0]", "case3": "[2021,12,31,23,59,59]", "case4": "[2021,2,28,23,59,59]", "case5": "[2020,2,29,23,59,59]", "result": ["2120802481", "932", "2120802621", "2120799401", "2120800240"]}, "code": "function get_seed(year_, mon_, day_, hour_, min_, sec_)\n    implicit none\n\n    integer, intent(in), optional :: year_, mon_, day_, hour_, min_, sec_\n    integer :: get_seed\n\n    character(10) :: b(3)\n    integer :: date_time(8)\n    integer :: i_y, i_m, i_d, i_h, i_n, i_s\n\n    if ((present(year_)) .and. (present(mon_)) .and. (present(day_)) .and.&\n        (present(hour_)) .and. (present(min_)) .and. (present(sec_))) then\n        i_y = mod(year_, 100)\n        i_m = mon_\n        i_d = day_\n        i_h = hour_\n        i_n = min_\n        i_s = sec_\n    else\n        call date_and_time(b(1), b(2), b(3), date_time)\n        i_y = mod(date_time(1), 100)\n        i_m = date_time(2)\n        i_d = date_time(3)\n        i_h = date_time(5)\n        i_n = date_time(6)\n        i_s = date_time(7)\n    end if\n\n    get_seed = i_y + 70 * (i_m + 12 * (i_d + 31 * (i_h + 23 * (i_n + 59 * i_s))))\n    if (get_seed < 0) then\n        get_seed = get_seed + 2**31\n    end if\nend function"}
{"instruction": "Use Fortran to create a function that checks whether a given location type is contained in a set of data location codes.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,2]", "case3": "[3,3]", "case4": "[4,4]", "case5": "[5,5]", "result": ["T", "T", "T", "T", "T"]}, "code": "function ug_checklocation(dataLocsCode, locType) result(is_used)\n   integer, intent(in) :: dataLocsCode  !< Integer code describing on which topological locations data is/will be used.\n   integer, intent(in) :: locType       !< Integer location code to test on (one of UG_LOC_NODE, UG_LOC_EDGE, UG_LOC_FACE, UG_LOC_VOL).\n   logical             :: is_used       !< Returns whether specified locType is contained in dataLocsCode.\n\n   ! Perform logical AND to determine whether locType is inside dataLocs 'set'.\n   is_used = iand(dataLocsCode, locType) == locType\nend function"}
{"instruction": "Use Fortran to give me a function that returns true if a is greater than b, and false otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["F", "F", "T", "T", "F"]}, "code": "function greater_i(a,b) result(r)\n    logical :: r\n    integer, intent(in) :: a, b\n    r = a > b\n  end function"}
{"instruction": "Use Fortran to define a function that takes in three integer arguments and returns the second argument as the output.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["2", "5", "8", "11", "14"]}, "code": "function Psi(s_index,d_index,z_index)\n            integer, intent(in)                :: s_index, d_index, z_index\n            integer                            :: Psi\n            Psi = d_index ! new state is equal to current period's discrete choice d\n        end function"}
{"instruction": "Use Fortran to give me a function that finds the index of the element in an array that is closest to a given value.", "test_case": {"param_num": 2, "param_type": "real*8(:),real*8", "case1": "[[1.0,2.0,3.0],2.5]", "case2": "[[0.0,0.5,1.0,1.5,2.0],1.2]", "case3": "[[1.0,2.0,3.0],4.0]", "case4": "[[1.0,2.0,3.0],0.5]", "case5": "[[1.0,2.0,3.0],2.0]", "result": ["2", "3", "3", "1", "2"]}, "code": "function close_to(wave_total, wave)\n\treal(kind=8) :: wave_total(:), wave\n\treal(kind=8), allocatable :: diff(:)\n\tinteger :: n, i, location(1)\n\tinteger :: close_to\n\n\t\tn = size(wave_total)\n\t\tallocate(diff(n))\n\t\tdiff = dabs(wave_total-wave)\n\t\tlocation = minloc(diff)\n\t\tdeallocate(diff)\n\t\tclose_to = location(1)\n\n\tend function"}
{"instruction": "Use Fortran to give me a function that takes two integers as input and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "2", "6", "6"]}, "code": "function adder(a, b) result(c)\n  integer, intent(in) :: a, b\n  integer :: c\n\n  c = a + b\nend function"}
{"instruction": "Use Fortran to create a function that takes an array of integers and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[5,[1,2,3,4,5]]", "case2": "[3,[0,-1,1]]", "case3": "[4,[10,20,30,40]]", "case4": "[2,[100,200]]", "case5": "[1,[0]]", "result": ["15", "0", "100", "300", "0"]}, "code": "function sumer(n, a) result(c)\n  integer, intent(in) :: a(n)\n  integer :: i, c\n\n  c = 0\n  do i = 1, n\n    c = c + a(i)\n  enddo\nend function"}
{"instruction": "Use Fortran to give me a function that concatenates two character strings after removing any trailing spaces from the first string.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','world'", "case2": "'','fortran'", "case3": "'fortran',''", "case4": "'',''", "case5": "'hello',''", "result": ["helloworld", "fortran", "fortran", "", "hello"]}, "code": "function trim_append(xx,yy) result(xy)\n  character (len=*), intent(in) :: xx,yy\n  character (len=len(xx) + len(yy)) :: xy\n  xy = trim(xx) // yy\nend function"}
{"instruction": "Use Fortran to create a function that generates a random double precision number within a given range.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[0.0,1.0]", "case2": "[-1.0,1.0]", "case3": "[0.0,10.0]", "case4": "[1.0,5.0]", "case5": "[-10.0,10.0]", "result": ["0.47321218202827608", "-0.52689776558437496", "2.8124593209726645", "4.9182959329047016", "-6.3203474090537970"]}, "code": "function get_random_double_precision_with_range(start, end_) result(random_double)\n        double precision, intent(in) :: start\n        double precision, intent(in) :: end_\n        double precision :: random_double\n\n        call random_number(random_double)\n        random_double = start + (end_ - start) * random_double\n    end function"}
{"instruction": "Use Fortran to create a function that generates a random integer within a given range.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,20]", "case3": "[0,100]", "case4": "[100,200]", "case5": "[1,1]", "result": ["3", "7", "31", "123", "1"]}, "code": "function get_random_integer_with_range(start, end_) result(random_integer)\n        integer, intent(in) :: start\n        integer, intent(in) :: end_\n        integer :: random_integer\n\n        double precision :: random_real\n\n        call random_number(random_real)\n        random_integer = start + floor((end_ + 1 - start) * random_real)\n    end function"}
{"instruction": "Use Fortran to create a function that converts uppercase letters in a given string to lowercase within a specified range.", "test_case": {"param_num": 3, "param_type": "character,integer,integer", "case1": "'Hello World!',1,5", "case2": "'Fortran is Fun',7,9", "case3": "'Testing',2,6", "case4": "'UPPERCASE',1,8", "case5": "'lowercase',4,8", "result": ["hello World!", "Fortran is Fun", "Testing", "uppercasE", "lowercase"]}, "code": "function lower(str,begin,end) result (string)\n\n    character(*), intent(In)     :: str\n    character(len(str))          :: string\n    integer,intent(in),optional  :: begin, end\n    integer                      :: i\n    integer                      :: ibegin, iend\n    string = str\n\n    ibegin = 1\n    if (present(begin))then\n        ibegin = max(ibegin,begin)\n    endif\n\n    iend = len_trim(str)\n    if (present(end))then\n        iend= min(iend,end)\n    endif\n\n    do i = ibegin, iend                               ! step thru each letter in the string in specified range\n        select case (str(i:i))\n        case ('A':'Z')\n            string(i:i) = char(iachar(str(i:i))+32)     ! change letter to miniscule\n        case default\n        end select\n    end do\n\nend function"}
{"instruction": "Use Fortran to give me a function that compares two text strings, one of which can have wildcards ('*' or '?').", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'hello','world'", "case3": "'hello*','hello'", "case4": "'*world','hello world'", "case5": "'*world','hello'", "result": ["T", "F", "F", "F", "F"]}, "code": "function glob(tame,wild)\n\n! @(#)fpm_strings::glob(3f): function compares text strings, one of which can have wildcards ('*' or '?').\n\nlogical                    :: glob       !! result of test\ncharacter(len=*)           :: tame       !! A string without wildcards to compare to the globbing expression\ncharacter(len=*)           :: wild       !! A (potentially) corresponding string with wildcards\ncharacter(len=len(tame)+1) :: tametext\ncharacter(len=len(wild)+1) :: wildtext\ncharacter(len=1),parameter :: NULL=char(0)\ninteger                    :: wlen\ninteger                    :: ti, wi\ninteger                    :: i\ncharacter(len=:),allocatable :: tbookmark, wbookmark\n! These two values are set when we observe a wildcard character. They\n! represent the locations, in the two strings, from which we start once we've observed it.\n   tametext=tame//NULL\n   wildtext=wild//NULL\n   tbookmark = NULL\n   wbookmark = NULL\n   wlen=len(wild)\n   wi=1\n   ti=1\n   do                                            ! Walk the text strings one character at a time.\n      if(wildtext(wi:wi) == '*')then             ! How do you match a unique text string?\n         do i=wi,wlen                            ! Easy: unique up on it!\n            if(wildtext(wi:wi).eq.'*')then\n               wi=wi+1\n            else\n               exit\n            endif\n         enddo\n         if(wildtext(wi:wi).eq.NULL) then        ! \"x\" matches \"*\"\n            glob=.true.\n            return\n         endif\n         if(wildtext(wi:wi) .ne. '?') then\n            ! Fast-forward to next possible match.\n            do while (tametext(ti:ti) .ne. wildtext(wi:wi))\n               ti=ti+1\n               if (tametext(ti:ti).eq.NULL)then\n                  glob=.false.\n                  return                         ! \"x\" doesn't match \"*y*\"\n               endif\n            enddo\n         endif\n         wbookmark = wildtext(wi:)\n         tbookmark = tametext(ti:)\n      elseif(tametext(ti:ti) .ne. wildtext(wi:wi) .and. wildtext(wi:wi) .ne. '?') then\n         ! Got a non-match. If we've set our bookmarks, back up to one or both of them and retry.\n         if(wbookmark.ne.NULL) then\n            if(wildtext(wi:).ne. wbookmark) then\n               wildtext = wbookmark;\n               wlen=len_trim(wbookmark)\n               wi=1\n               ! Don't go this far back again.\n               if (tametext(ti:ti) .ne. wildtext(wi:wi)) then\n                  tbookmark=tbookmark(2:)\n                  tametext = tbookmark\n                  ti=1\n                  cycle                          ! \"xy\" matches \"*y\"\n               else\n                  wi=wi+1\n               endif\n            endif\n            if (tametext(ti:ti).ne.NULL) then\n               ti=ti+1\n               cycle                             ! \"mississippi\" matches \"*sip*\"\n            endif\n         endif\n         glob=.false.\n         return                                  ! \"xy\" doesn't match \"x\"\n      endif\n      ti=ti+1\n      wi=wi+1\n      if (tametext(ti:ti).eq.NULL) then          ! How do you match a tame text string?\n         if(wildtext(wi:wi).ne.NULL)then\n            do while (wildtext(wi:wi) == '*')    ! The tame way: unique up on it!\n               wi=wi+1                           ! \"x\" matches \"x*\"\n               if(wildtext(wi:wi).eq.NULL)exit\n            enddo\n         endif\n         if (wildtext(wi:wi).eq.NULL)then\n            glob=.true.\n            return                               ! \"x\" matches \"x\"\n         endif\n         glob=.false.\n         return                                  ! \"x\" doesn't match \"xy\"\n      endif\n   enddo\nend function"}
{"instruction": "Use Fortran to define a function that calculates a weight based on magnetic latitude, magnetic local time, Kp index, and a width parameter.", "test_case": {"param_num": 4, "param_type": "real*4,real*4,real*4,real*4", "case1": "[45.0, 3.0, 4.0, 0.1]", "case2": "[-60.0, 12.0, 2.0, 0.2]", "case3": "[0.0, 0.0, 8.0, 0.05]", "case4": "[30.0, 18.0, 10.0, 0.3]", "case5": "[-80.0, 21.0, 0.0, 0.01]", "result": ["7.28503670E-34", "8.10432687E-18", "0.00000000", "3.34429566E-23", "1.00000000"]}, "code": "function dwm_latwgt2(mlat, mlt, kp0, twidth)\r\n\r\n    implicit none\r\n\r\n    real(4)                   :: dwm_latwgt2\r\n    real(4)                   :: mlat, mlt, kp0, kp, twidth\r\n    real(4)                   :: mltrad, sinmlt, cosmlt, tlat\r\n\r\n    real(4), parameter :: coeff(0:5) = (/ 65.7633,  -4.60256,  -3.53915,  &\r\n                                         -1.99971,  -0.752193,  0.972388 /)\r\n    real(4), parameter :: pi=3.141592653590, dtor=pi/180D0\r\n\r\n\r\n    mltrad = mlt * 15.0 * dtor\r\n    sinmlt = sin(mltrad)\r\n    cosmlt = cos(mltrad)\r\n    kp = max(kp0, 0.)\r\n    kp = min(kp,  8.)\r\n    tlat = coeff(0) + coeff(1)*cosmlt + coeff(2)*sinmlt +   &\r\n           kp*(coeff(3) + coeff(4)*cosmlt + coeff(5)*sinmlt)\r\n    dwm_latwgt2 = 1.0 / ( 1 + exp(-(abs(mlat)-tlat)/twidth) )\r\n\r\n    return\r\n\r\nend function"}
{"instruction": "Use Fortran to give me a function that wraps an integer x within the range [0,L)", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,3]", "case3": "[0,7]", "case4": "[12,8]", "case5": "[-3,5]", "result": ["1", "2", "0", "4", "2"]}, "code": "function wrap(x, L)\ninteger, intent(in) :: x,L\ninteger :: wrap\n\nif (x >= L) then\n    wrap = x - L\nelse if (x < 0) then\n    wrap = x + L\nelse\n    wrap = x\nendif\nend function"}
{"instruction": "Use Fortran to define a function that calculates the volume of a tetrahedron given its four vertex IDs.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,6,7,8]", "case3": "[0,0,0,0]", "case4": "[100,200,300,400]", "case5": "[-1,-2,-3,-4]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function tetrahedral_volume(id1,id2,id3,id4)\n        integer :: id1,id2,id3,id4\n        real :: tetrahedral_volume\n        end function"}
{"instruction": "Use Fortran to create a function that takes a character tag and a double precision scalar t as input and returns an integer y as output.", "test_case": {"param_num": 2, "param_type": "character,real*8", "case1": "['tag1',1.0]", "case2": "['tag2',2.5]", "case3": "['tag3',-3.0]", "case4": "['tag4',0.0]", "case5": "['tag5',4.2]", "result": ["6618568", "6618568", "6618568", "6618568", "6618568"]}, "code": "function set_state_scalar_py(tag, t) result(y)&\n            bind(c, name='set_state_scalar')\n         use iso_c_binding\n         character(c_char) :: tag\n         real(c_double) t\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to create a function that takes two character inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'tag1','c'", "case2": "'tag2','d'", "case3": "'tag3','e'", "case4": "'tag4','f'", "case5": "'tag5','g'", "result": ["15759872", "7764480", "16218624", "7174656", "7830016"]}, "code": "function set_state_char_py(tag, chr) result(y)&\n            bind(c, name='set_state_char')\n         use iso_c_binding\n         implicit none\n         character(c_char) :: tag\n         character(c_char) :: chr\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to define a function that takes two integer inputs and returns a real array of size y-x.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3.7397370218538976E-317", "3.8692533665173053E-317", "", "", "8.4023254297365760E-317   8.3863493230126534E-317"]}, "code": "function bar (x, y)\n      integer, intent(in) :: x, y\n      real(kind=8), dimension((y-x)) :: bar\n    end function"}
{"instruction": "Use Fortran to give me a function that compares two text strings, one of which can have wildcards ('*' or '?').", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','hello']", "case2": "['hello','world']", "case3": "['hello*','hello']", "case4": "['*world','hello world']", "case5": "['h?llo','hello']", "result": ["T", "F", "F", "F", "F"]}, "code": "function glob(tame,wild)\n\n! ident_6=\"@(#)M_strings::glob(3f): function compares text strings, one of which can have wildcards ('*' or '?').\"\n\nlogical                    :: glob\ncharacter(len=*)           :: tame       ! A string without wildcards\ncharacter(len=*)           :: wild       ! A (potentially) corresponding string with wildcards\ncharacter(len=len(tame)+1) :: tametext\ncharacter(len=len(wild)+1) :: wildtext\ncharacter(len=1),parameter :: NULL=char(0)\ninteger                    :: wlen\ninteger                    :: ti, wi\ninteger                    :: i\ncharacter(len=:),allocatable :: tbookmark, wbookmark\n! These two values are set when we observe a wildcard character. They\n! represent the locations, in the two strings, from which we start once we've observed it.\n   tametext=tame//NULL\n   wildtext=wild//NULL\n   tbookmark = NULL\n   wbookmark = NULL\n   wlen=len(wild)\n   wi=1\n   ti=1\n   do                                            ! Walk the text strings one character at a time.\n      if(wildtext(wi:wi) == '*')then             ! How do you match a unique text string?\n         do i=wi,wlen                            ! Easy: unique up on it!\n            if(wildtext(wi:wi).eq.'*')then\n               wi=wi+1\n            else\n               exit\n            endif\n         enddo\n         if(wildtext(wi:wi).eq.NULL) then        ! \"x\" matches \"*\"\n            glob=.true.\n            return\n         endif\n         if(wildtext(wi:wi) .ne. '?') then\n            ! Fast-forward to next possible match.\n            do while (tametext(ti:ti) .ne. wildtext(wi:wi))\n               ti=ti+1\n               if (tametext(ti:ti).eq.NULL)then\n                  glob=.false.\n                  return                         ! \"x\" doesn't match \"*y*\"\n               endif\n            enddo\n         endif\n         wbookmark = wildtext(wi:)\n         tbookmark = tametext(ti:)\n      elseif(tametext(ti:ti) .ne. wildtext(wi:wi) .and. wildtext(wi:wi) .ne. '?') then\n         ! Got a non-match. If we've set our bookmarks, back up to one or both of them and retry.\n         if(wbookmark.ne.NULL) then\n            if(wildtext(wi:).ne. wbookmark) then\n               wildtext = wbookmark;\n               wlen=len_trim(wbookmark)\n               wi=1\n               ! Don't go this far back again.\n               if (tametext(ti:ti) .ne. wildtext(wi:wi)) then\n                  tbookmark=tbookmark(2:)\n                  tametext = tbookmark\n                  ti=1\n                  cycle                          ! \"xy\" matches \"*y\"\n               else\n                  wi=wi+1\n               endif\n            endif\n            if (tametext(ti:ti).ne.NULL) then\n               ti=ti+1\n               cycle                             ! \"mississippi\" matches \"*sip*\"\n            endif\n         endif\n         glob=.false.\n         return                                  ! \"xy\" doesn't match \"x\"\n      endif\n      ti=ti+1\n      wi=wi+1\n      if (tametext(ti:ti).eq.NULL) then          ! How do you match a tame text string?\n         if(wildtext(wi:wi).ne.NULL)then\n            do while (wildtext(wi:wi) == '*')    ! The tame way: unique up on it!\n               wi=wi+1                           ! \"x\" matches \"x*\"\n               if(wildtext(wi:wi).eq.NULL)exit\n            enddo\n         endif\n         if (wildtext(wi:wi).eq.NULL)then\n            glob=.true.\n            return                               ! \"x\" matches \"x\"\n         endif\n         glob=.false.\n         return                                  ! \"x\" doesn't match \"xy\"\n      endif\n   enddo\nend function"}
{"instruction": "Use Fortran to give me a function that removes extra white spaces from a string and replaces them with a single space.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world',' '", "case2": "'  hello  world  ',' '", "case3": "'hello world','-'", "case4": "'hello world',''", "case5": "'',''", "result": ["helloworld", "helloworld", "hello-world", "helloworld", ""]}, "code": "function compact(str,char) result (outstr)\n\n! ident_39=\"@(#)M_strings::compact(3f): Converts white-space to single spaces\"\n\ncharacter(len=*),intent(in)          :: str\ncharacter(len=*),intent(in),optional :: char\ncharacter(len=len(str))              :: outstr\ncharacter(len=1)                     :: ch\ninteger                              :: i\ninteger                              :: position_in_output\nlogical                              :: last_was_space\ncharacter(len=1)                     :: char_p\nlogical                              :: nospace\nif(present(char))then\n   char_p=char\n   if(len(char).eq.0)then\n      nospace=.true.\n   else\n      nospace=.false.\n   endif\nelse\n   char_p=' '\n   nospace=.false.\nendif\n   outstr=' '\n   last_was_space=.false.\n   position_in_output=0\n\n   IFSPACE: do i=1,len_trim(str)\n     ch=str(i:i)\n     select case(ichar(ch))\n       case(0:32,127)                                         ! space or tab character or control character\n         if(position_in_output.eq.0)then                      ! still at beginning so ignore leading whitespace\n            cycle IFSPACE\n         elseif(.not.last_was_space) then                     ! if have not already put out a space output one\n           if(.not.nospace)then\n              position_in_output=position_in_output+1\n              outstr(position_in_output:position_in_output)=char_p\n           endif\n         endif\n         last_was_space=.true.\n       case(:-1,33:126,128:)                                  ! not a space, quote, or control character so copy it\n         position_in_output=position_in_output+1\n         outstr(position_in_output:position_in_output)=ch\n         last_was_space=.false.\n     end select\n   enddo IFSPACE\n\nend function"}
{"instruction": "Use Fortran to define a function that takes a character string as input and returns an integer.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'B'", "case3": "'C'", "case4": "'D'", "case5": "'E'", "result": ["3", "3", "3", "3", "3"]}, "code": "function init_indices_gflo_c (layout)\n         integer :: init_indices_gflo_c\n         character(*) :: layout\n       end function"}
{"instruction": "Use Fortran to define a function that takes a character string as input and returns an integer.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'A'", "case2": "'B'", "case3": "'C'", "case4": "'D'", "case5": "'E'", "result": ["3", "3", "3", "3", "3"]}, "code": "function init_indices_lzlo_c (layout)\n         integer :: init_indices_lzlo_c\n         character(*) :: layout\n       end function"}
{"instruction": "Use Fortran to create a function that initializes a one-dimensional Fast Fourier Transform with inputs for the size of the transform and the sign of the transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[100,1]", "case3": "[1000,-1]", "case4": "[10000,-1]", "case5": "[100000,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function ffts_init_1df ( n, sign ) result(ptr) bind ( c )\n\t\t\tuse, intrinsic :: iso_c_binding\n\t\t\timplicit none\n\t\t\tTYPE(C_PTR) \t:: ptr\n\t\t\tinteger ( c_long ) :: n\n\t\t\tinteger ( c_int ) :: sign\n\t\tend function"}
{"instruction": "Use Fortran to create a function that initializes a one-dimensional Fast Fourier Transform with inputs for the size of the transform and the sign of the transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[100,1]", "case3": "[1000,-1]", "case4": "[10000,-1]", "case5": "[100000,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function ffts_init_1df ( n, sign ) result(ptr) bind ( c )\n\t\t\tuse, intrinsic :: iso_c_binding\n\t\t\timplicit none\n\t\t\tTYPE(C_PTR) \t:: ptr\n\t\t\tinteger ( c_long ) :: n\n\t\t\tinteger ( c_int ) :: sign\n\t\tend function"}
{"instruction": "Use Fortran to create a function that initializes a one-dimensional Fast Fourier Transform with inputs for the size of the transform and the sign of the transform.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,1]", "case2": "[100,1]", "case3": "[1000,-1]", "case4": "[10000,-1]", "case5": "[100000,1]", "result": ["6618604", "6618604", "6618604", "6618604", "6618604"]}, "code": "function ffts_init_1df ( n, sign ) result(ptr) bind ( c )\n\t\t\tuse, intrinsic :: iso_c_binding\n\t\t\timplicit none\n\t\t\tTYPE(C_PTR) \t:: ptr\n\t\t\tinteger ( c_long ) :: n\n\t\t\tinteger ( c_int ) :: sign\n\t\tend function"}
{"instruction": "Use Fortran to give me a function that returns a logical value indicating whether the absolute difference between two real numbers is greater than the first number times 1e-6.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,1.000001]", "case2": "[3.5,3.500001]", "case3": "[3.0,2.999999]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["F", "F", "F", "T", "T"]}, "code": "function diff(a, b)\n  real(kind=4) :: a, b\n  logical diff\n\n  diff = (abs (a - b) .gt. abs(a * 1e-6))\nend function"}
{"instruction": "Use Fortran to create a function that retrieves the value of an environment variable and returns it as a string, with an optional default value if the variable is not defined.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'HOME','/home/user/'", "case2": "'USER','user'", "case3": "'','/usr/local/'", "case4": "'PATH','/usr/bin:/usr/local/bin'", "case5": "'LANG','en_US.UTF-8'", "result": ["/home/user/", "user", "/usr/local/", "D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;D:\\Miniconda3\\bin;D:\\Miniconda3\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;D:\\Miniconda3;D:\\Miniconda3\\Library\\mingw-w64\\bin;D:\\Miniconda3\\Library\\usr\\bin;D:\\Miniconda3\\Library\\bin;D:\\Miniconda3\\Scripts;C:\\Program Files\\Microsoft\\jdk-11.0.16.101-hotspot\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0;D:\\;D:\\fortran\\mingw64\\bin;C:\\Users\\98365\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;.;D:\\PyCharm 2023.2.1\\bin;.;D:\\Microsoft VS Code\\bin;D:\\Miniconda3\\Library\\Bin", "en_US.UTF-8"]}, "code": "function get_env(NAME,DEFAULT) result(VALUE)\nimplicit none\ncharacter(len=*),intent(in)          :: NAME\ncharacter(len=*),intent(in),optional :: DEFAULT\ncharacter(len=:),allocatable         :: VALUE\ninteger                              :: howbig\ninteger                              :: stat\ninteger                              :: length\n   ! get length required to hold value\n   length=0\n   if(NAME.ne.'')then\n      call get_environment_variable(NAME, length=howbig,status=stat,trim_name=.true.)\n      select case (stat)\n      case (1)\n          !x!print *, NAME, \" is not defined in the environment. Strange...\"\n          VALUE=''\n      case (2)\n          !x!print *, \"This processor doesn't support environment variables. Boooh!\"\n          VALUE=''\n      case default\n          ! make string to hold value of sufficient size\n          if(allocated(value))deallocate(value)\n          allocate(character(len=max(howbig,1)) :: VALUE)\n          ! get value\n         call get_environment_variable(NAME,VALUE,status=stat,trim_name=.true.)\n          if(stat.ne.0)VALUE=''\n      end select\n   else\n      VALUE=''\n   endif\n   if(VALUE.eq.''.and.present(DEFAULT))VALUE=DEFAULT\nend function"}
{"instruction": "Use Fortran to give me a function that calculates a unique global ID for a given pair of indices iorb and jorb, given the total number of orbitals norb.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[4,5,6]", "case3": "[7,8,9]", "case4": "[10,11,12]", "case5": "[13,14,15]", "result": ["2", "23", "62", "119", "194"]}, "code": "function couple_global_id(iorb,jorb,norb) result(id)\n        implicit none\n        integer, intent(in) :: iorb,jorb,norb\n        integer :: id\n        !local variables\n        integer :: ii,jj\n        ii=max(iorb,jorb)\n        jj=min(iorb,jorb)\n\n        if (ii > norb .or. jj > norb) then\n           print *,'error',ii,jj,norb\n           stop\n        end if\n        \n        id=ii+(jj-1)*norb\n      end function"}
{"instruction": "Use Fortran to give me a function that calculates the binomial coefficient of n and k.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[5,2]", "case2": "[10,3]", "case3": "[7,4]", "case4": "[15,5]", "case5": "[20,10]", "result": ["10.000000000000000", "120.00000000000000", "35.000000000000000", "3003.0000000000000", "184756.00000000000"]}, "code": "function bin(n, k)\n\n              implicit none\n              integer, intent (in) :: n\n              integer, intent (in) :: k\n              integer :: i\n              real*8 :: bin\n\n              bin = 1\n\n              do i=1,k\n                  bin = bin * (n - i + 1) / i\n              enddo\n\n              return\n\n          end function"}
{"instruction": "Use Fortran to create a function that takes a character tag and a double precision scalar t as input and returns an integer y as output.", "test_case": {"param_num": 2, "param_type": "character,real*8", "case1": "['tag1',1.0]", "case2": "['tag2',2.5]", "case3": "['tag3',-3.0]", "case4": "['tag4',0.0]", "case5": "['tag5',4.2]", "result": ["6618568", "6618568", "6618568", "6618568", "6618568"]}, "code": "function set_state_scalar_py(tag, t) result(y)&\n            bind(c, name='set_state_scalar')\n         use iso_c_binding\n         character(c_char) :: tag\n         real(c_double) t\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to create a function that takes two character inputs and returns an integer output.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'tag1','c'", "case2": "'tag2','d'", "case3": "'tag3','e'", "case4": "'tag4','f'", "case5": "'tag5','g'", "result": ["17005056", "6912512", "7109120", "7698944", "7961088"]}, "code": "function set_state_char_py(tag, chr) result(y)&\n            bind(c, name='set_state_char')\n         use iso_c_binding\n         implicit none\n         character(c_char) :: tag\n         character(c_char) :: chr\n         integer(c_int) :: y\n       end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers as input and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["3.4160331157490463E-317   3.3999700534714557E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.6426867189100098E-317   3.6266236566324192E-317   0.0000000000000000        0.0000000000000000", "8.2728960406268363E-317   8.2568329783492457E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "7.3338946367667968E-317   7.3178394795395396E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "6.1034893624644233E-317   6.0874342052371662E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that takes a string and a length and returns the string with leading and trailing spaces removed and the length specified.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'hello',5", "case2": "'  hello  ',7", "case3": "'  hello  ',5", "case4": "'hello',0", "case5": "'hello',6", "result": ["hello", "hello", "hello", "", "hello"]}, "code": "function strip_length_(value, length)\n    implicit none\n    character(len=*), intent(in) :: value\n    integer, intent(in) :: length\n    character(len= length):: strip_length_\n    strip_length_ = trim(adjustl(value))\n  end function"}
{"instruction": "Use Fortran to give me a function that returns 1 if i equals j and 0 otherwise.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,1]", "case2": "[2,3]", "case3": "[0,0]", "case4": "[5,5]", "case5": "[10,10]", "result": ["1", "0", "1", "1", "1"]}, "code": "function delta(i,j)\n    integer, intent(in) :: i,j\n    integer             :: delta\n    if (i == j) then\n       delta = 1\n    else\n       delta = 0\n    end if\n  end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers as input and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "result": ["3.5131703742466021E-317   3.4971073119690115E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "6.8482162493293512E-317   6.8321531870517606E-317   0.0000000000000000        0.0000000000000000", "5.9092227505196452E-317   5.8931596882420546E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "5.9739809228513490E-317   5.9579178605737584E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.6103076327441579E-317   3.5942445704665673E-317   0.0000000000000000        0.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to give me a function that replaces all occurrences of a given substring in a string with another substring.", "test_case": {"param_num": 3, "param_type": "character,character,character", "case1": "'hello world','world','everyone'", "case2": "'this is a test','is','was'", "case3": "'123456789','5','0'", "case4": "'testing','ing','ed'", "case5": "'fortran is fun','fun','awesome'", "result": ["hello everyone", "thwas was a test", "123406789", "tested", "fortran is awesome"]}, "code": "function replace(string, text, repl) result(output)\n            character(*) :: string, text, repl\n            character(:), allocatable :: output\n            integer :: i, nt, nr\n\n            output = string\n            nt = len(text)\n            nr = len(repl)\n            do\n                i = index(output,text(:nt))\n                if (i == 0) exit\n                output = output(:i-1) // repl(:nr) // output(i+nt:)\n            end do\n        end function"}
{"instruction": "Use Fortran to create a function that changes the current working directory to the directory specified by the input path.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'home/user'", "case3": "'../'", "case4": "'C:/Users'", "case5": "'./'", "result": ["14973360", "7436720", "16087472", "8092080", "15432112"]}, "code": "function c_chdir(path) bind(C, name=\"chdir\")\n                \n            use iso_c_binding\n\n            character(kind=c_char), intent(IN) :: path(*)\n            integer(kind=C_int) :: c_chdir\n        end function"}
{"instruction": "Use Fortran to define a function that takes an integer and a character as input and returns an integer array.", "test_case": {"param_num": 2, "param_type": "integer,character", "case1": "[1,'hello']", "case2": "[0,'world']", "case3": "[-5,'fortran']", "case4": "[100,'testing']", "case5": "[999,'cases']", "result": ["176           0         106           0     7043360           0     7041536           0           2           0", "176           0         106           0     7436576           0     7434752           0           2           0", "176           0         106           0    14776608           0    14774784           0           2           0", "176           0         106           0     7043360           0     7041536           0           2           0", "176           0         106           0     7305504           0     7303680           0           2           0"]}, "code": "function p (arg, chr)\n        integer, dimension(10) :: p\n        integer, intent(in) :: arg\n        character(8), intent(inout) :: chr\n      end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["6.4596672153391280E-317   6.4436041530615374E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.6426867189100098E-317   3.6266236566324192E-317   0.0000000000000000        0.0000000000000000", "6.3301508706757203E-317   6.3140878083981297E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "6.3625220517912388E-317   6.3464668945639816E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "3.4807833830304167E-317   3.4647282258031595E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that takes in seven integer inputs and returns their sum.", "test_case": {"param_num": 7, "param_type": "integer,integer,integer,integer,integer,integer,integer", "case1": "[1,1,1,1,1,1,1]", "case2": "[2,-1,2,-2,2,-3,2]", "case3": "[3,0,3,0,3,0,3]", "case4": "[4,1,-1,1,-1,1,-1]", "case5": "[5,-1,-2,-3,-4,-5,-6]", "result": ["7", "2", "12", "4", "-16"]}, "code": "function rule (ig, isgn, ik, it, il, ie, is)\n      integer, intent (in) :: ig, isgn, ik, it, il, ie, is\n      integer :: rule\n      rule = ig + isgn + ik + it + il + ie + is  ! make whatever you want\n    end function"}
{"instruction": "Use Fortran to give me a function that returns the nonnegative remainder of integer division.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[107,50]", "case2": "[107,-50]", "case3": "[-107,50]", "case4": "[-107,-50]", "case5": "[0,5]", "result": ["7", "7", "43", "43", "0"]}, "code": "function i_modp ( i, j )\n\n!*******************************************************************************\n!\n!! I_MODP returns the nonnegative remainder of integer division.\n!\n!  Formula:\n!\n!    If\n!      NREM = I_MODP ( I, J )\n!      NMULT = ( I - NREM ) / J\n!    then\n!      I = J * NMULT + NREM\n!    where NREM is always nonnegative.\n!\n!  Comments:\n!\n!    The MOD function computes a result with the same sign as the\n!    quantity being divided.  Thus, suppose you had an angle A,\n!    and you wanted to ensure that it was between 0 and 360.\n!    Then mod(A,360) would do, if A was positive, but if A\n!    was negative, your result would be between -360 and 0.\n!\n!    On the other hand, I_MODP(A,360) is between 0 and 360, always.\n!\n!  Examples:\n!\n!        I     J     MOD  I_MODP    Factorization\n!\n!      107    50       7       7    107 =  2 *  50 + 7\n!      107   -50       7       7    107 = -2 * -50 + 7\n!     -107    50      -7      43   -107 = -3 *  50 + 43\n!     -107   -50      -7      43   -107 =  3 * -50 + 43\n!\n!  Modified:\n!\n!    02 March 1999\n!\n!  Author:\n!\n!    John Burkardt\n!\n!  Parameters:\n!\n!    Input, integer I, the number to be divided.\n!\n!    Input, integer J, the number that divides I.\n!\n!    Output, integer I_MODP, the nonnegative remainder when I is\n!    divided by J.\n!\n  implicit none\n\n  integer i\n  integer i_modp\n  integer j\n\n  if ( j == 0 ) then\n    write ( *, '(a)' ) ' '\n    write ( *, '(a)' ) 'I_MODP - Fatal error!'\n    write ( *, '(a,i6)' ) '  I_MODP ( I, J ) called with J = ', j\n    stop\n  end if\n\n  i_modp = mod ( i, j )\n\n  if ( i_modp < 0 ) then\n    i_modp = i_modp + abs ( j )\n  end if\n\n  return\nend function"}
{"instruction": "Use Fortran to give me an internal function that calculates the location of an element in a one-dimensional array that represents a two-dimensional array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "7", "5", "11", "5"]}, "code": "function iloc (ind1,ind2)                           result(loc)\n         !--------------------------------------------------------------------------------------------------------------\n         ! This internal function dispenses with the need for a two-dimensional array for the interpolation. It replaces \n         ! astatement function in the original code.\n         !--------------------------------------------------------------------------------------------------------------\n         !\n         integer, intent(in) :: ind1, ind2\n         integer             :: loc\n         !\n         loc = (ind1*(ind1-1)) / 2 + ind2\n         !\n         end function"}
{"instruction": "Use Fortran to give me a function that calculates the greatest common divisor of two integers using the Euclidean algorithm.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,5]", "case2": "[15,3]", "case3": "[21,7]", "case4": "[100,25]", "case5": "[50,10]", "result": ["5", "3", "7", "25", "10"]}, "code": "function gcd_2ints(x1, x2) result(divisor)\n    integer, intent(in) :: x1, x2\n    integer :: divisor\n\n    integer :: a, b\n    a = abs(x1); b = abs(x2) ! Make sure inputs are positive\n    if (b>a) call swap(a,b)\n\n    do ! Keep dividing a by b, until one of them is zero\n       if (b>a) call swap(a,b) ! Keep the bigger number in a's place\n       if (b == 0) exit ! we're done when b == 0\n       a = mod(a,b) ! Divide a by b and keep only the remainder\n    enddo\n    divisor = a\n\n  contains\n    !!<summary>Swaps x and y.</summary>\n    !!<parameter name=\"x\" regular=\"true\"></parameter>\n    !!<parameter name=\"y\" regular=\"true\"></parameter>\n    subroutine swap(x,y) ! Swap two values\n      integer :: x,y,tmp\n      tmp = x; x = y; y = tmp\n    endsubroutine swap\n  end function"}
{"instruction": "Use Fortran to give me an internal function that calculates the location of an element in a one-dimensional array that represents a two-dimensional array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["2", "7", "5", "11", "5"]}, "code": "function iloc (ind1,ind2)                           result(loc)\n         !--------------------------------------------------------------------------------------------------------------\n         ! This internal function dispenses with the need for a two-dimensional array for the interpolation. It replaces a\n         ! statement function in the original code.\n         !--------------------------------------------------------------------------------------------------------------\n         !\n         integer, intent(in) :: ind1, ind2\n         integer             :: loc\n         !\n         loc = (ind1*(ind1-1)) / 2 + ind2\n         !\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n         \r\n         implicit none\r\n         logical :: r\r\n         integer, intent(in) :: a, b\r\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           \r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           \r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-4]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n         implicit none\r\n         logical :: r\r\n         integer, intent(in) :: a, b\r\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           \r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\r\n           implicit none\r\n           logical :: r\r\n           integer, intent(in) :: a, b\r\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value indicating whether they are equal or not.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,3]", "case4": "[0,5]", "case5": "[-2,-2]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)         \r\n         implicit none\r\n         logical :: r\r\n         integer, intent(in) :: a, b\r\n       end function"}
{"instruction": "Use Fortran to create a function that takes a directory and an integer and returns a string with the directory and integer formatted in a specific way.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "'dir',1", "case2": "'home',2", "case3": "'usr',3", "case4": "'var',4", "case5": "'tmp',5", "result": ["dirm000001/", "homem000002/", "usrm000003/", "varm000004/", "tmpm000005/"]}, "code": "function directory_read_data_macro(basedir, imacro) result(r)\n    implicit none\n    character(*), intent(in) :: basedir\n    integer, intent(in) :: imacro\n    character(256) :: r\n    write(r, '(a,a,i6.6,a)') trim(basedir), 'm', imacro, '/'\n    return\nend function"}
{"instruction": "Use Fortran to create a function that compares two strings and returns true if they are equal (ignoring leading and trailing blanks) and false otherwise.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello','hello'", "case2": "'world','world'", "case3": "'',''", "case4": "'fortran','Fortran'", "case5": "'fortran','Fortran 90'", "result": ["T", "T", "T", "F", "F"]}, "code": "function strcmp(str1,str2)\n\t!Case sensitive string comparison\n\t!True if str1 and str2 are equal (blanks at the beginning or at the end are ignored)\n\tIMPLICIT NONE\n\tCHARACTER(LEN=:), ALLOCATABLE, INTENT(in) :: str1,str2\n\tLOGICAL strcmp\n\t\n\tINTEGER i,l,ug\n\tLOGICAL chCmp\n\t\n\tif (LEN_TRIM(str1).eq.LEN_TRIM(str2)) then\n\t\tug=1\n\t\tl=LEN_TRIM(str1)\n\t\tdo i=1,l\n\t\t\tchCmp=(str1(i:i).eq.str2(i:i))\n\t\t\tif (chCmp.eqv..false.) then\n\t\t\t\tug=0\n\t\t\t\texit\n\t\t\tend if\n\t\tend do\n\t\tif (ug.eq.1) then\n\t\t\tstrcmp=.true.\n\t\telse\n\t\t\tstrcmp=.false.\n\t\tend if\n\telse\n\t\tstrcmp=.false.\n\tend if\n\t\n\treturn\nend function"}
{"instruction": "Use Fortran to create a function that takes an integer array and returns the number of unique elements in the array.", "test_case": {"param_num": 1, "param_type": "integer(:)", "case1": "[1,2,3,4,5]", "case2": "[1,1,1,1,1]", "case3": "[1,2,3,4,5,1,2,3,4,5]", "case4": "[1,2,3,4,5,5,4,3,2,1]", "case5": "[1,2,3,4,5,5,4,3,2,1,6,7,8,9,10]", "result": ["5", "1", "5", "5", "10"]}, "code": "function number_unique_elements(list_int)\n    integer, intent(in) :: list_int(:)\n    logical :: mask(size(list_int))\n    integer :: number_unique_elements, i\n    mask = .true.\n\n    do i = size(list_int), 2, -1\n       mask(i) = .NOT. (ANY(list_int(:i-1) == list_int(i)))\n    enddo\n    number_unique_elements = COUNT(mask)\n\n    return\n  end function"}
{"instruction": "Use Fortran to create a function that generates a random integer between Nmin and Nmax.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,10]", "case2": "[5,15]", "case3": "[0,5]", "case4": "[100,200]", "case5": "[-10,10]", "result": ["6", "7", "5", "174", "3"]}, "code": "function random_integer(Nmin,Nmax)\n!==============================================================================!\n!Randomly generate an integer in the range Nmin-Nmax\n!==============================================================================!\n!Nmin           ==>minimum index value\n!Nmax           ==>maximum index value\n!a              ==>uniform pseudo-random number\n!==============================================================================!\nimplicit none\ninteger :: Nmin, Nmax, random_integer\ndouble precision :: a\n!==============================================================================!\ncall random_number(a)\nrandom_integer = floor(a*(Nmax-Nmin+1))+Nmin\nend function"}
{"instruction": "Use Fortran to create a function that takes in two integer inputs, N and ne, and returns a connectivity matrix of size (N+1,ne).", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[10,20]", "case2": "[5,15]", "case3": "[100,200]", "case4": "[0,0]", "case5": "[1,1]", "result": ["14418256           0    14449856           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0  -184549131       37070    14418256           0    14418256           0 -1310841488       32764 -1310749232       32764           0           0  -234880782       37069    14418256           0    14418256           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "8159136           0     8126800           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0 -1310843304       32764           0           0           0           0           0           0           1           1           0           0           0           0           0           0 -1310752176       32764           0           0           0           0 -1310843040       32764 -1310841872       32764 -1310841488       32764 -1310749232       32764           0           0", "8257872           0     8290240           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0           0", "", "7241632           0"]}, "code": "function connectivity_matrix(N,ne)\n            integer, intent(in)                                :: N, ne\n            integer connectivity_matrix(N+1,ne)\n        end function"}
{"instruction": "Use Fortran to give me a function that compares two text strings, one of which can have wildcards ('*' or '?').", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "['hello','hello']", "case2": "['hello','h*llo']", "case3": "['hello','h?llo']", "case4": "['hello','h*l?o']", "case5": "['hello','h*llo*']", "result": ["T", "T", "T", "T", "T"]}, "code": "function matchw(tame,wild)\n\ncharacter(len=*),parameter::ident_6=\"&\n&@(#)M_strings::matchw(3f): function compares text strings, one of which can have wildcards ('*' or '?').\"\n\nlogical                    :: matchw\ncharacter(len=*)           :: tame       ! A string without wildcards\ncharacter(len=*)           :: wild       ! A (potentially) corresponding string with wildcards\ncharacter(len=len(tame)+1) :: tametext\ncharacter(len=len(wild)+1) :: wildtext\ncharacter(len=1),parameter :: NULL=char(0)\ninteger                    :: wlen\ninteger                    :: ti, wi\ninteger                    :: i\ncharacter(len=:),allocatable :: tbookmark, wbookmark\n! These two values are set when we observe a wildcard character.  They\n! represent the locations, in the two strings, from which we start once we've observed it.\n   tametext=tame//NULL\n   wildtext=wild//NULL\n   tbookmark = NULL\n   wbookmark = NULL\n   wlen=len(wild)\n   wi=1\n   ti=1\n   do                                            ! Walk the text strings one character at a time.\n      if(wildtext(wi:wi) == '*')then             ! How do you match a unique text string?\n         do i=wi,wlen                            ! Easy: unique up on it!\n            if(wildtext(wi:wi).eq.'*')then\n               wi=wi+1\n            else\n               exit\n            endif\n         enddo\n         if(wildtext(wi:wi).eq.NULL) then        ! \"x\" matches \"*\"\n            matchw=.true.\n            return\n         endif\n         if(wildtext(wi:wi) .ne. '?') then\n            ! Fast-forward to next possible match.\n            do while (tametext(ti:ti) .ne. wildtext(wi:wi))\n               ti=ti+1\n               if (tametext(ti:ti).eq.NULL)then\n                  matchw=.false.\n                  return                         ! \"x\" doesn't match \"*y*\"\n               endif\n            enddo\n         endif\n         wbookmark = wildtext(wi:)\n         tbookmark = tametext(ti:)\n      elseif(tametext(ti:ti) .ne. wildtext(wi:wi) .and. wildtext(wi:wi) .ne. '?') then\n         ! Got a non-match.  If we've set our bookmarks, back up to one or both of them and retry.\n         if(wbookmark.ne.NULL) then\n            if(wildtext(wi:).ne. wbookmark) then\n               wildtext = wbookmark;\n               wlen=len_trim(wbookmark)\n               wi=1\n               ! Don't go this far back again.\n               if (tametext(ti:ti) .ne. wildtext(wi:wi)) then\n                  tbookmark=tbookmark(2:)\n                  tametext = tbookmark\n                  ti=1\n                  cycle                          ! \"xy\" matches \"*y\"\n               else\n                  wi=wi+1\n               endif\n            endif\n            if (tametext(ti:ti).ne.NULL) then\n               ti=ti+1\n               cycle                             ! \"mississippi\" matches \"*sip*\"\n            endif\n         endif\n         matchw=.false.\n         return                                  ! \"xy\" doesn't match \"x\"\n      endif\n      ti=ti+1\n      wi=wi+1\n      if (tametext(ti:ti).eq.NULL) then          ! How do you match a tame text string?\n         if(wildtext(wi:wi).ne.NULL)then\n            do while (wildtext(wi:wi) == '*')    ! The tame way: unique up on it!\n               wi=wi+1                           ! \"x\" matches \"x*\"\n               if(wildtext(wi:wi).eq.NULL)exit\n            enddo\n         endif\n         if (wildtext(wi:wi).eq.NULL)then\n            matchw=.true.\n            return                               ! \"x\" matches \"x\"\n         endif\n         matchw=.false.\n         return                                  ! \"x\" doesn't match \"xy\"\n      endif\n   enddo\nend function"}
{"instruction": "Use Fortran to create a function that takes a string and a length and returns the string trimmed or padded to the specified length.", "test_case": {"param_num": 2, "param_type": "character,integer", "case1": "['hello',5]", "case2": "['world',10]", "case3": "['fortran',3]", "case4": "['test',7]", "case5": "['123456789',4]", "result": ["hello", "world", "for", "test", "1234"]}, "code": "function lenset(line,length) result(strout)\n\ncharacter(len=*),parameter::ident_36=\"@(#)M_strings::lenset(3f): return string trimmed or padded to specified length\"\n\ncharacter(len=*),intent(in)  ::  line\ninteger,intent(in)           ::  length\ncharacter(len=length)        ::  strout\n   strout=line\nend function"}
{"instruction": "Use Fortran to give me a function that removes extra white spaces from a string and replaces them with a single space.", "test_case": {"param_num": 2, "param_type": "character,character", "case1": "'hello world',' '", "case2": "'  hello  world  ',' '", "case3": "'hello world','-'", "case4": "'hello world',''", "case5": "'',''", "result": ["helloworld", "helloworld", "hello-world", "helloworld", ""]}, "code": "function compact(str,char) result (outstr)\n\ncharacter(len=*),parameter::ident_38=\"@(#)M_strings::compact(3f): Converts white-space to single spaces\"\n\ncharacter(len=*),intent(in)          :: str\ncharacter(len=*),intent(in),optional :: char\ncharacter(len=len(str))              :: outstr\ncharacter(len=1)                     :: ch\ninteger                              :: i\ninteger                              :: position_in_output\nlogical                              :: last_was_space\ncharacter(len=1)                     :: char_p\nlogical                              :: nospace\nif(present(char))then\n   char_p=char\n   if(len(char).eq.0)then\n      nospace=.true.\n   else\n      nospace=.false.\n   endif\nelse\n   char_p=' '\n   nospace=.false.\nendif\n   outstr=' '\n   last_was_space=.false.\n   position_in_output=0\n\n   IFSPACE: do i=1,len_trim(str)\n     ch=str(i:i)\n     select case(ichar(ch))\n       case(0:32,127)                                         ! space or tab character or control character\n         if(position_in_output.eq.0)then                      ! still at beginning so ignore leading whitespace\n            cycle IFSPACE\n         elseif(.not.last_was_space) then                     ! if have not already put out a space output one\n           if(.not.nospace)then\n              position_in_output=position_in_output+1\n              outstr(position_in_output:position_in_output)=char_p\n           endif\n         endif\n         last_was_space=.true.\n       case(:-1,33:126,128:)                                  ! not a space, quote, or control character so copy it\n         position_in_output=position_in_output+1\n         outstr(position_in_output:position_in_output)=ch\n         last_was_space=.false.\n     end select\n   end do IFSPACE\n\nend function"}
{"instruction": "Use Fortran to give me a function for multiplying two 32-bit floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[3.0,2.0]", "case4": "[5.0,1.0]", "case5": "[2.5,4.7]", "result": ["2.00000000", "14.6999989", "6.00000000", "5.00000000", "11.7500000"]}, "code": "function multiply_float32(a, b) result(value)\n    !DEC$ ATTRIBUTES DLLEXPORT, ALIAS:'multiply_float32' :: multiply_float32\n    implicit none\n    real(4) :: a, b, value\n    value = a * b\nend function"}
{"instruction": "Use Fortran to give me a function for multiplying two 64-bit floating point numbers.", "test_case": {"param_num": 2, "param_type": "real*8,real*8", "case1": "[1.0,2.0]", "case2": "[3.5,4.2]", "case3": "[0.0,2.0]", "case4": "[5.0,0.0]", "case5": "[2.5,4.5]", "result": ["2.0000000000000000", "14.700000000000001", "0.0000000000000000", "0.0000000000000000", "11.250000000000000"]}, "code": "function multiply_float64(a, b) result(value)\n    !DEC$ ATTRIBUTES DLLEXPORT, ALIAS:'multiply_float64' :: multiply_float64\n    implicit none\n    real(8) :: a, b, value\n    value = a * b\nend function"}
{"instruction": "Use Fortran to give me a function that returns a logical value indicating whether the absolute difference between two real numbers is greater than the first number times 1e-6.", "test_case": {"param_num": 2, "param_type": "real*4,real*4", "case1": "[1.0,1.000001]", "case2": "[3.5,3.500001]", "case3": "[3.0,2.999999]", "case4": "[5.0,1.0]", "case5": "[2.5,4.5]", "result": ["F", "F", "F", "T", "T"]}, "code": "function diff(a, b)\n  real(kind=4) :: a, b\n  logical diff\n\n  diff = (abs (a - b) .gt. abs(a * 1e-6))\nend function"}
{"instruction": "Use Fortran to create a function that takes a path as input and returns the directory name of that path.", "test_case": {"param_num": 1, "param_type": "character", "case1": "'/'", "case2": "'dir/file.txt'", "case3": "'dir/'", "case4": "'file.txt'", "case5": "'dir1/dir2/file.txt'", "result": ["15890864", "7633328", "15563184", "16284080", "15825328"]}, "code": "function dirname(path) bind(c, name=\"dirname\")\n       use, intrinsic :: iso_c_binding\n       type(c_ptr) :: dirname\n       character(len=1,kind=c_char), intent(in) :: path(*)\n     end function"}
{"instruction": "Use Fortran to define a function fqn that takes in three arguments and returns a real number.", "test_case": {"param_num": 3, "param_type": "real*8,integer,integer", "case1": "[1.0,2,3]", "case2": "[0.5,4,2]", "case3": "[2.5,1,5]", "case4": "[3.0,3,1]", "case5": "[4.0,2,4]", "result": ["3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317", "3.2700228835648744E-317"]}, "code": "function fqn(a, b, c)\n            !+Cross section function\n            real(8)             :: fqn !sigma\n            real(8), intent(in) :: a !eb\n            integer, intent(in) :: b !q\n            integer, intent(in) :: c !n\n        end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["3.7722030635734176E-317   3.7561400012958269E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.7074448912417137E-317   3.6913818289641231E-317   0.0000000000000000        0.0000000000000000", "4.0312357529002330E-317   4.0151726906226424E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "7.2691364644350929E-317   7.2530813072078358E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "8.1109927047472432E-317   8.0949375475199860E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "result": ["8.2081378682951324E-317   8.1920748060175418E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.5131703742466021E-317   3.4971073119690115E-317   0.0000000000000000        0.0000000000000000", "7.8843470066366131E-317   7.8682839443590225E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "8.5643078161195037E-317   8.5482447538419131E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "3.9340984944026772E-317   3.9180354321250866E-317   0.0000000000000000        0.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to create a function that takes in three integers, adds the first two and subtracts the third, alters the value of the third integer and counts the number of times the function is called.", "test_case": {"param_num": 3, "param_type": "integer,integer,integer", "case1": "[1,2,3]", "case2": "[0,0,0]", "case3": "[100,200,300]", "case4": "[-1,-2,-3]", "case5": "[2147483647,-2147483648,0]", "result": ["0", "0", "0", "0", "-1"]}, "code": "function func2(a,b,c) result(f)    !return variable declared to be 'f'.\n        implicit none\n        integer, intent(in) :: a,b    !can declare and enforce that variables \n                                      !are not modified by the function.\n        integer, intent(inout) :: c\n        integer :: f     !function return type declared inside the function.\n        integer :: cnt = 0    !GOTCHA - initialisation implies variable is\n                              !saved between function calls.\n        f = a + b - c\n        c = 4    !altering the value of an input variable.\n        cnt  = cnt + 1    !count number of function calls.\n    end function"}
{"instruction": "Use Fortran to create a function that takes an integer and an array of real numbers and returns a square matrix of size n x n.", "test_case": {"param_num": 2, "param_type": "integer,real*8(:)", "case1": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case2": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case3": "[4,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]", "case4": "[3,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "case5": "[2,[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0]]", "result": ["8.2081378682951324E-317   8.1920748060175418E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000", "4.2578893560611966E-317   4.2418262937836059E-317   0.0000000000000000        0.0000000000000000", "3.4160331157490463E-317   3.3999700534714557E-317   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        6.9526544448333560E-310   0.0000000000000000        0.0000000000000000", "3.6750579000255283E-317   3.6590027427982711E-317   3.0000000000000000        4.0000000000000000        5.0000000000000000        6.0000000000000000        7.0000000000000000        8.0000000000000000        9.0000000000000000", "3.9988487616840476E-317   3.9827936044567905E-317   3.0000000000000000        4.0000000000000000"]}, "code": "function expandmat(n,compmat)\r\n\t\timplicit none\r\n\t\tinteger,intent(in)::n\r\n\t\treal(kind=8),intent(in)::compmat(:)\r\n\t\treal(kind=8)::expandmat(n,n)\r\n\tend function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n         \n         implicit none\n         logical :: r\n         integer, intent(in) :: a, b\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           \n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           \n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[3,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n         implicit none\n         logical :: r\n         integer, intent(in) :: a, b\n       end function"}
{"instruction": "Use Fortran to give me a function that compares two integers a and b and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           \n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to give me a function that compares two integers and returns a logical value.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-5,-5]", "case5": "[100,100]", "result": ["T", "T", "T", "T", "T"]}, "code": "function cmp(a,b) result(r)\n           implicit none\n           logical :: r\n           integer, intent(in) :: a, b\n         end function"}
{"instruction": "Use Fortran to define a function called temp_foo that takes two integer arguments and returns a real allocatable array.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,0]", "case4": "[-1,5]", "case5": "[2147483647,-2147483648]", "result": ["", "", "", "", ""]}, "code": "function temp_foo(i, j)\n      integer :: i, j\n      real, allocatable :: temp_foo(:)\n    end function"}
{"instruction": "Use Fortran to give me a function that takes two integers as input and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer", "case1": "[1,2]", "case2": "[3,4]", "case3": "[0,2]", "case4": "[5,1]", "case5": "[2,4]", "result": ["3", "7", "2", "6", "6"]}, "code": "function adder(a, b) result(c)\n  integer, intent(in) :: a, b\n  integer :: c\n\n  c = a + b\nend function"}
{"instruction": "Use Fortran to create a function that takes an array of integers and returns their sum.", "test_case": {"param_num": 2, "param_type": "integer,integer(:)", "case1": "[5,[1,2,3,4,5]]", "case2": "[3,[0,-1,1]]", "case3": "[4,[10,20,30,40]]", "case4": "[2,[100,200]]", "case5": "[1,[0]]", "result": ["15", "0", "100", "300", "0"]}, "code": "function sumer(n, a) result(c)\n  integer, intent(in) :: a(n)\n  integer :: i, c\n\n  c = 0\n  do i = 1, n\n    c = c + a(i)\n  enddo\nend function"}
{"instruction": "Use Fortran to define a function that calculates the volume of a tetrahedron given its four vertex IDs.", "test_case": {"param_num": 4, "param_type": "integer,integer,integer,integer", "case1": "[1,2,3,4]", "case2": "[5,6,7,8]", "case3": "[0,0,0,0]", "case4": "[100,200,300,400]", "case5": "[-1,-2,-3,-4]", "result": ["0.00000000", "0.00000000", "0.00000000", "0.00000000", "0.00000000"]}, "code": "function tetrahedral_volume(id1,id2,id3,id4)\n        integer :: id1,id2,id3,id4\n        real :: tetrahedral_volume\n        end function"}
